<?xml version="1.1" encoding="UTF-8" standalone="no"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog" xmlns:ext="http://www.liquibase.org/xml/ns/dbchangelog-ext" xmlns:pro="http://www.liquibase.org/xml/ns/pro" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd http://www.liquibase.org/xml/ns/pro http://www.liquibase.org/xml/ns/pro/liquibase-pro-4.6.xsd http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.6.xsd">
    <changeSet author="ec2-user (generated)" id="1729502208304-1">
        <createTable tableName="xceler_business_master_bank_account">
            <column name="uuid" type="UUID">
                <constraints nullable="false"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="account_currency" type="VARCHAR(255)"/>
            <column name="account_no" type="VARCHAR(255)"/>
            <column name="bank_account_id" type="VARCHAR(255)"/>
            <column name="min_account_balance" type="FLOAT8"/>
            <column name="profit_center" type="VARCHAR(255)"/>
            <column name="bank_code" type="VARCHAR(15)"/>
            <column name="company_code" type="VARCHAR(255)"/>
            <column name="purpose_of_account" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-2">
        <createTable tableName="xceler_business_master_bank_limit">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_business_master_bank_limit_pkey"/>
            </column>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="amortization_applicability" type="VARCHAR(255)"/>
            <column name="amount" type="JSONB"/>
            <column name="amount_fee" type="JSONB"/>
            <column name="bank_code" type="VARCHAR(255)"/>
            <column name="comments" type="VARCHAR(255)"/>
            <column name="country" type="VARCHAR(255)"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="entity" type="VARCHAR(255)"/>
            <column name="facility_code" type="VARCHAR(255)"/>
            <column name="facility_type" type="VARCHAR(255)"/>
            <column name="fees_type" type="VARCHAR(255)"/>
            <column name="guarantee_type" type="VARCHAR(255)"/>
            <column name="inflow_accounts" type="JSONB"/>
            <column name="outflow_accounts" type="JSONB"/>
            <column name="percentage" type="VARCHAR(255)"/>
            <column name="recall_clause" type="VARCHAR(255)"/>
            <column name="region_for_line" type="VARCHAR(255)"/>
            <column name="security_type" type="VARCHAR(255)"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="status" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-3">
        <createTable tableName="xceler_business_master_bank_limit_product_info">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_business_master_bank_limit_product_info_pkey"/>
            </column>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="product" type="VARCHAR(255)"/>
            <column name="product_limit" type="JSONB"/>
            <column name="interest_type" type="VARCHAR(255)"/>
            <column name="interest_rate" type="TEXT"/>
            <column name="margin" type="VARCHAR(255)"/>
            <column name="index" type="VARCHAR(255)"/>
            <column name="calculation_bases" type="VARCHAR(255)"/>
            <column name="calculation_methods" type="VARCHAR(255)"/>
            <column name="credit_product_type" type="VARCHAR(25)"/>
            <column name="bank_limit_uuid" type="UUID"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-4">
        <createTable tableName="xceler_business_master_product_info_participant_info">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_business_master_product_info_participant_info_pkey"/>
            </column>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="participant" type="VARCHAR(255)"/>
            <column name="currency" type="VARCHAR(25)"/>
            <column name="amount" type="FLOAT8"/>
            <column name="outflow_account" type="VARCHAR(255)"/>
            <column name="inflow_account" type="VARCHAR(255)"/>
            <column name="product_info_uuid" type="UUID"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-5">
        <createTable tableName="xceler_configservice_cost_matrix">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_configservice_cost_matrix_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tr_id" type="VARCHAR(50)">
                <constraints nullable="false"/>
            </column>
            <column name="code" type="VARCHAR(50)"/>
            <column name="commodity" type="TEXT"/>
            <column name="cost_currency" type="VARCHAR(255)"/>
            <column name="cost_charges_type" type="VARCHAR(255)"/>
            <column name="cost_description" type="TEXT"/>
            <column name="cost_detail_type" type="VARCHAR(255)"/>
            <column name="cost_for" type="VARCHAR(255)"/>
            <column name="cost_group" type="VARCHAR(255)"/>
            <column name="cost_value" type="TEXT"/>
            <column name="counterparty" type="VARCHAR(255)"/>
            <column name="uom" type="VARCHAR(255)"/>
            <column name="incoterm" type="TEXT"/>
            <column name="load_port" type="TEXT"/>
            <column name="name" type="TEXT"/>
            <column name="payment_term" type="VARCHAR(255)"/>
            <column name="quantity_option" type="VARCHAR(255)"/>
            <column name="status" type="VARCHAR(50)"/>
            <column name="template_id" type="VARCHAR(50)"/>
            <column name="trade_type" type="TEXT"/>
            <column name="transaction_type" type="TEXT"/>
            <column name="type" type="TEXT"/>
            <column name="unload_port" type="TEXT"/>
            <column name="shipment_date_from" type="date"/>
            <column name="shipment_date_to" type="date"/>
            <column name="level" type="INTEGER"/>
            <column name="workflow_rule" type="JSONB"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-6">
        <createTable tableName="ctrm_audit_log">
            <column autoIncrement="true" name="id" type="BIGINT">
                <constraints nullable="false" primaryKey="true" primaryKeyName="ctrm_audit_log_pkey"/>
            </column>
            <column name="appended" type="TEXT"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="difference_list" type="JSONB"/>
            <column name="entity_id" type="VARCHAR(255)"/>
            <column name="entity_name" type="VARCHAR(255)"/>
            <column name="latest" type="BOOLEAN"/>
            <column name="modified" type="TEXT"/>
            <column name="payload" type="JSONB"/>
            <column name="removed" type="TEXT"/>
            <column name="summary" type="JSONB"/>
            <column name="table_name" type="VARCHAR(255)"/>
            <column name="parent_id" type="VARCHAR(100)"/>
            <column defaultValue="Create" name="action" type="VARCHAR(255)"/>
            <column name="update_location" type="TEXT"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-7">
        <createTable tableName="xceler_stockservice_commoditystockbuildhistory">
            <column name="uuid" type="UUID">
                <constraints nullable="false"/>
            </column>
            <column name="commodity_history_uuid" type="UUID">
                <constraints nullable="false"/>
            </column>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-8">
        <createTable tableName="flyway_schema_history">
            <column name="installed_rank" type="INTEGER">
                <constraints nullable="false" primaryKey="true" primaryKeyName="flyway_schema_history_pkey"/>
            </column>
            <column name="version" type="VARCHAR(50)"/>
            <column name="description" type="VARCHAR(200)">
                <constraints nullable="false"/>
            </column>
            <column name="type" type="VARCHAR(20)">
                <constraints nullable="false"/>
            </column>
            <column name="script" type="VARCHAR(1000)">
                <constraints nullable="false"/>
            </column>
            <column name="checksum" type="INTEGER"/>
            <column name="installed_by" type="VARCHAR(100)">
                <constraints nullable="false"/>
            </column>
            <column defaultValueComputed="now()" name="installed_on" type="TIMESTAMP WITHOUT TIME ZONE">
                <constraints nullable="false"/>
            </column>
            <column name="execution_time" type="INTEGER">
                <constraints nullable="false"/>
            </column>
            <column name="success" type="SMALLINT">
                <constraints nullable="false"/>
            </column>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-9">
        <createTable tableName="db_dependant_object_ddl">
            <column name="reference_id" type="TEXT"/>
            <column name="object_order" type="INTEGER"/>
            <column name="parent_object" type="TEXT"/>
            <column name="view_name" type="TEXT"/>
            <column name="ddl" type="TEXT"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-10">
        <createTable tableName="xceler_tradeplanningservice_physicaltradeplan">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_tradeplanningservice_physicaltradeplan_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="comment" type="VARCHAR(255)"/>
            <column name="match_quantity" type="FLOAT8"/>
            <column name="match_type" type="VARCHAR(255)"/>
            <column name="planning_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="planning_id" type="VARCHAR(255)"/>
            <column name="settlement_currency" type="VARCHAR(255)"/>
            <column name="settlement_price" type="FLOAT8"/>
            <column name="established_on" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="settlement" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-11">
        <createTable tableName="xceler_transportallocationservice_seafreightdetails">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_transportallocationservice_seafreightdetails_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="notes" type="VARCHAR(255)"/>
            <column name="planned_obligation_id" type="VARCHAR(255)"/>
            <column name="trade_id" type="VARCHAR(255)"/>
            <column name="trade_type" type="INTEGER"/>
            <column name="charterparty" type="VARCHAR(255)"/>
            <column name="freight_capacity" type="FLOAT8"/>
            <column name="imo" type="VARCHAR(255)"/>
            <column name="vessel_capacity" type="FLOAT8"/>
            <column name="vessel_flag" type="VARCHAR(255)"/>
            <column name="vessel_id" type="VARCHAR(255)"/>
            <column name="vessel_name" type="VARCHAR(255)"/>
            <column name="year" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="barge" type="VARCHAR(255)"/>
            <column name="connecting_vessel" type="VARCHAR(255)"/>
            <column name="planned_obligation_ids" type="JSONB"/>
            <column name="tugboat" type="VARCHAR(255)"/>
            <column name="plan_id" type="VARCHAR(255)"/>
            <column defaultValue="Vessel" name="allocation_type" type="VARCHAR(255)"/>
            <column name="old_obligation_ids" type="BYTEA"/>
            <column name="voyage_no" type="VARCHAR(255)"/>
            <column name="booking_id" type="VARCHAR(255)"/>
            <column name="freight_type" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-12">
        <createTable tableName="batch_job_execution_params">
            <column name="job_execution_id" type="BIGINT"/>
            <column name="identifying" type="CHAR(1)"/>
            <column defaultValue="NA" name="parameter_value" type="VARCHAR(2500)">
                <constraints nullable="false"/>
            </column>
            <column defaultValue="NA" name="parameter_type" type="VARCHAR(100)">
                <constraints nullable="false"/>
            </column>
            <column defaultValue="NA" name="parameter_name" type="VARCHAR(100)">
                <constraints nullable="false"/>
            </column>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-13">
        <createTable tableName="batch_step_execution">
            <column name="step_execution_id" type="BIGINT">
                <constraints nullable="false"/>
            </column>
            <column name="version" type="BIGINT">
                <constraints nullable="false"/>
            </column>
            <column name="step_name" type="VARCHAR(100)">
                <constraints nullable="false"/>
            </column>
            <column name="job_execution_id" type="BIGINT">
                <constraints nullable="false"/>
            </column>
            <column name="start_time" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_time" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="status" type="VARCHAR(10)"/>
            <column name="commit_count" type="BIGINT"/>
            <column name="read_count" type="BIGINT"/>
            <column name="filter_count" type="BIGINT"/>
            <column name="write_count" type="BIGINT"/>
            <column name="read_skip_count" type="BIGINT"/>
            <column name="write_skip_count" type="BIGINT"/>
            <column name="process_skip_count" type="BIGINT"/>
            <column name="rollback_count" type="BIGINT"/>
            <column name="exit_code" type="VARCHAR(2500)"/>
            <column name="exit_message" type="VARCHAR(2500)"/>
            <column name="last_updated" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column defaultValueDate="1970-01-01T00:00:00" name="create_time" type="TIMESTAMP WITHOUT TIME ZONE">
                <constraints nullable="false"/>
            </column>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-14">
        <createTable tableName="clause_contract_master">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="clause_contract_master_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="clause_category" type="VARCHAR(255)"/>
            <column name="clause_code" type="VARCHAR(255)"/>
            <column name="clause_description" type="TEXT"/>
            <column name="clause_sub_category" type="VARCHAR(255)"/>
            <column name="commodity" type="VARCHAR(255)"/>
            <column name="company" type="VARCHAR(255)"/>
            <column name="counter_party" type="VARCHAR(255)"/>
            <column name="country" type="VARCHAR(255)"/>
            <column name="incoterm" type="VARCHAR(255)"/>
            <column name="status" type="BOOLEAN"/>
            <column defaultValueBoolean="true" name="doc_gen_edit" type="BOOLEAN"/>
            <column name="payment_term" type="VARCHAR(255)"/>
            <column name="clause_heading" type="VARCHAR(255)"/>
            <column name="trade_transaction_type" type="INTEGER"/>
            <column name="contract_term" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-15">
        <createTable tableName="ctrm_audit_log_bkp_v_5_1">
            <column name="id" type="BIGINT"/>
            <column name="appended" type="TEXT"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="difference_list" type="JSONB"/>
            <column name="entity_id" type="VARCHAR(255)"/>
            <column name="entity_name" type="VARCHAR(255)"/>
            <column name="latest" type="BOOLEAN"/>
            <column name="modified" type="TEXT"/>
            <column name="payload" type="JSONB"/>
            <column name="removed" type="TEXT"/>
            <column name="summary" type="JSONB"/>
            <column name="table_name" type="VARCHAR(255)"/>
            <column name="parent_id" type="VARCHAR(100)"/>
            <column name="action" type="VARCHAR(255)"/>
            <column autoIncrement="true" name="new_seq" type="INTEGER">
                <constraints nullable="false"/>
            </column>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-16">
        <createTable tableName="ois_storage_location">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="ois_storage_location_pkey"/>
            </column>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="storage_id" type="VARCHAR(255)"/>
            <column name="storage_name" type="VARCHAR(255)"/>
            <column name="stored_capacity" type="JSONB"/>
            <column name="type" type="VARCHAR(255)"/>
            <column name="storage_facility" type="VARCHAR(255)"/>
            <column name="owner_name" type="VARCHAR(255)"/>
            <column name="comingle" type="VARCHAR(255)"/>
            <column name="location" type="JSONB"/>
            <column name="status" type="VARCHAR(50)"/>
            <column name="addrress" type="VARCHAR(255)"/>
            <column defaultValueNumeric="0.0" name="available_capacity" type="FLOAT8"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-17">
        <createTable tableName="restore_error_log">
            <column defaultValueComputed="now()" name="created_on" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="view_name" type="VARCHAR(255)"/>
            <column name="error_code" type="VARCHAR(10)"/>
            <column name="error_message" type="TEXT"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-18">
        <createTable tableName="treasury_credit_transaction">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="treasury_credit_transaction_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="facility_code" type="VARCHAR(255)"/>
            <column name="entity" type="VARCHAR(255)"/>
            <column name="interest_type" type="VARCHAR(255)"/>
            <column name="credit_product" type="VARCHAR(255)"/>
            <column name="amount" type="JSONB"/>
            <column name="outflow_bank_account_number" type="VARCHAR(255)"/>
            <column name="outflow_bank_code" type="VARCHAR(25)"/>
            <column name="transaction_approval_date" type="date"/>
            <column name="transaction_start_date" type="date"/>
            <column name="transaction_end_date" type="date"/>
            <column name="outflow_bank_name" type="TEXT"/>
            <column name="inflow_bank_name" type="TEXT"/>
            <column name="inflow_bank_account_number" type="VARCHAR(50)"/>
            <column name="inflow_bank_code" type="VARCHAR(50)"/>
            <column name="first_principal_repayment_date" type="date"/>
            <column name="calculation_bases" type="VARCHAR(255)"/>
            <column name="periodicity_type" type="VARCHAR(255)"/>
            <column name="interest_rate" type="TEXT"/>
            <column name="index_value" type="TEXT"/>
            <column name="margin_value" type="FLOAT8"/>
            <column name="index" type="VARCHAR(255)"/>
            <column name="calculation_method" type="VARCHAR(255)"/>
            <column name="attachments" type="JSONB"/>
            <column name="tenor" type="VARCHAR(50)"/>
            <column name="facility_calculation_method" type="VARCHAR(255)"/>
            <column name="credit_txn_id" type="VARCHAR(50)"/>
            <column defaultValue="APPROVED" name="credit_status" type="VARCHAR(50)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-19">
        <createTable tableName="xceler_actualizationservice_actualizedquantity">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_actualizationservice_actualizedquantity_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="actualization_id" type="VARCHAR(255)"/>
            <column name="actualized_on" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="planned_obligation_id" type="VARCHAR(255)"/>
            <column name="trade_id" type="VARCHAR(255)"/>
            <column name="actualized_quantity_id" type="VARCHAR(255)"/>
            <column name="brand" type="VARCHAR(255)"/>
            <column name="commodity" type="VARCHAR(255)"/>
            <column name="external_package" type="VARCHAR(255)"/>
            <column name="external_package_unit" type="FLOAT8"/>
            <column name="grade" type="VARCHAR(255)"/>
            <column name="internal_package" type="VARCHAR(255)"/>
            <column name="internal_package_unit" type="FLOAT8"/>
            <column name="load_quantity" type="FLOAT8"/>
            <column name="origin" type="VARCHAR(255)"/>
            <column name="package_type" type="VARCHAR(255)"/>
            <column name="planned_obligation_type" type="INTEGER"/>
            <column name="planned_quantity" type="FLOAT8"/>
            <column name="quantity_uom" type="VARCHAR(255)"/>
            <column name="unload_quantity" type="FLOAT8"/>
            <column name="purpose" type="TEXT"/>
            <column name="planned_internal_package_unit" type="FLOAT8"/>
            <column name="planned_external_package_unit" type="FLOAT8"/>
            <column defaultValueNumeric="0.0" name="split_sequence_number" type="FLOAT8"/>
            <column defaultValueNumeric="0.0" name="claimed_quantity" type="FLOAT8"/>
            <column defaultValueNumeric="0.0" name="adjusted" type="FLOAT8"/>
            <column defaultValueNumeric="0.0" name="loss_gain_quantity" type="FLOAT8"/>
            <column name="discharge_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column defaultValueNumeric="0.0" name="balance_allocate_quantity" type="FLOAT8"/>
            <column defaultValueNumeric="0.0" name="received_quantity" type="FLOAT8"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-20">
        <createTable tableName="xceler_actualizationservice_billoflanding">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_actualizationservice_billoflanding_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="actualization_id" type="VARCHAR(255)"/>
            <column name="bl_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="bl_number" type="VARCHAR(255)"/>
            <column name="consignee" type="VARCHAR(255)"/>
            <column name="contract_ref" type="VARCHAR(255)"/>
            <column name="forwarding_agent" type="BYTEA"/>
            <column name="notify_party" type="BYTEA"/>
            <column name="planned_obligation_id" type="VARCHAR(255)"/>
            <column name="self_to_order" type="VARCHAR(255)"/>
            <column name="shipper" type="VARCHAR(255)"/>
            <column name="split_sequence_number" type="FLOAT8"/>
            <column defaultValueNumeric="0.0" name="actual_quantity" type="FLOAT8"/>
            <column name="uom" type="VARCHAR(255)"/>
            <column defaultValueBoolean="false" name="surrendered" type="BOOLEAN"/>
            <column defaultValue="Draft" name="status" type="VARCHAR(255)"/>
            <column name="remarks" type="VARCHAR(255)"/>
            <column name="ship_onboard" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="trade_id" type="VARCHAR(255)"/>
            <column defaultValue="" name="stowage_no" type="VARCHAR(255)"/>
            <column name="custom_fields" type="JSONB"/>
            <column name="nor_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="assignment_surveyor" type="VARCHAR(255)"/>
            <column name="import_licence_no" type="VARCHAR(255)"/>
            <column name="consignment_no" type="VARCHAR(255)"/>
            <column name="flag" type="VARCHAR(255)"/>
            <column name="master" type="VARCHAR(255)"/>
            <column name="charter_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-21">
        <createTable tableName="xceler_futuretradeservice_futuretrade">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_futuretradeservice_futuretrade_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="brokerage_fee" type="FLOAT8"/>
            <column name="clearing_broker" type="VARCHAR(255)"/>
            <column name="clearing_broker_account" type="VARCHAR(255)"/>
            <column name="clearing_fee" type="FLOAT8"/>
            <column name="commodity" type="VARCHAR(255)"/>
            <column name="company" type="VARCHAR(255)"/>
            <column name="counterparty" type="VARCHAR(255)"/>
            <column name="currency" type="VARCHAR(255)"/>
            <column name="exchange" type="VARCHAR(255)"/>
            <column name="exchange_for" type="VARCHAR(255)"/>
            <column name="execution_broker" type="VARCHAR(255)"/>
            <column name="expired_status" type="VARCHAR(255)"/>
            <column name="expiry_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="expiry_month" type="VARCHAR(255)"/>
            <column name="future_index" type="VARCHAR(255)"/>
            <column name="lot" type="FLOAT8"/>
            <column name="lot_size" type="FLOAT8"/>
            <column name="netting_status" type="VARCHAR(255)"/>
            <column name="profitcenter" type="VARCHAR(255)"/>
            <column name="tag" type="VARCHAR(255)"/>
            <column name="trade_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="trade_id" type="VARCHAR(255)"/>
            <column name="trade_price" type="FLOAT8"/>
            <column name="trade_transaction_type" type="INTEGER"/>
            <column name="trade_type" type="VARCHAR(255)"/>
            <column name="trader_name" type="VARCHAR(255)"/>
            <column name="uom" type="VARCHAR(255)"/>
            <column name="cost" type="FLOAT8"/>
            <column name="initial_margin" type="FLOAT8"/>
            <column name="maintenance_margin" type="FLOAT8"/>
            <column name="rollover_status" type="BOOLEAN"/>
            <column name="rollover_spread" type="FLOAT8"/>
            <column name="parent_row_id" type="VARCHAR(255)"/>
            <column name="product_code" type="VARCHAR(255)"/>
            <column name="contract_month" type="VARCHAR(255)"/>
            <column defaultValueNumeric="0.0" name="match_lot" type="FLOAT8"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-22">
        <createTable tableName="xceler_physicaltradeservice_physicaltrade">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_physicaltradeservice_physicaltrade_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="brand" type="VARCHAR(255)"/>
            <column name="broker" type="VARCHAR(255)"/>
            <column name="comments" type="VARCHAR(2048)"/>
            <column name="commodity" type="VARCHAR(255)"/>
            <column name="company" type="VARCHAR(255)"/>
            <column name="contract_confirmation" type="VARCHAR(255)"/>
            <column name="counterparty" type="VARCHAR(255)"/>
            <column name="delivery_end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="delivery_start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="discharge_location" type="VARCHAR(255)"/>
            <column name="external_package" type="VARCHAR(255)"/>
            <column name="external_package_unit" type="FLOAT8"/>
            <column name="external_reference" type="VARCHAR(255)"/>
            <column name="factory" type="VARCHAR(255)"/>
            <column name="future_contract_month" type="VARCHAR(255)"/>
            <column name="future_index" type="VARCHAR(255)"/>
            <column name="fxrate" type="FLOAT8"/>
            <column name="grade" type="VARCHAR(255)"/>
            <column name="incoterm" type="VARCHAR(255)"/>
            <column name="internal_package" type="VARCHAR(255)"/>
            <column name="internal_package_unit" type="FLOAT8"/>
            <column name="internal_profit_center" type="VARCHAR(255)"/>
            <column name="is_internal_trade" type="BOOLEAN"/>
            <column name="is_provisional_pricing" type="BOOLEAN"/>
            <column name="load_location" type="VARCHAR(255)"/>
            <column name="location" type="VARCHAR(255)"/>
            <column name="long_contract" type="VARCHAR(255)"/>
            <column name="origin" type="VARCHAR(255)"/>
            <column name="package_type" type="VARCHAR(255)"/>
            <column name="paymentterm" type="VARCHAR(255)"/>
            <column name="percentage" type="FLOAT8"/>
            <column name="period_end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="period_start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="price_type" type="VARCHAR(255)"/>
            <column name="profitcenter" type="VARCHAR(255)"/>
            <column name="provisional_fx_rate" type="FLOAT8"/>
            <column name="provisional_price" type="FLOAT8"/>
            <column name="provisional_price_currency" type="VARCHAR(255)"/>
            <column name="provisional_price_type" type="VARCHAR(255)"/>
            <column name="provisional_price_uom" type="VARCHAR(255)"/>
            <column name="quantity" type="FLOAT8"/>
            <column name="quantity_periodicity" type="VARCHAR(255)"/>
            <column name="quantity_tolerance_type" type="VARCHAR(255)"/>
            <column name="quantity_uom" type="VARCHAR(255)"/>
            <column name="season" type="VARCHAR(255)"/>
            <column name="special_instructions" type="TEXT"/>
            <column name="tolerance_value" type="VARCHAR(255)"/>
            <column name="total_trade_qty" type="FLOAT8"/>
            <column name="trade_date_time" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="trade_id" type="VARCHAR(255)"/>
            <column name="trade_price" type="FLOAT8"/>
            <column name="trade_price_currency" type="VARCHAR(255)"/>
            <column name="trade_price_uom" type="VARCHAR(255)"/>
            <column name="trade_settlement_currency" type="VARCHAR(255)"/>
            <column name="trade_transaction_type" type="INTEGER"/>
            <column name="trader_name" type="VARCHAR(255)"/>
            <column name="load_location_type" type="VARCHAR(255)"/>
            <column name="location_type" type="VARCHAR(255)"/>
            <column name="mode_of_transport" type="VARCHAR(255)"/>
            <column name="total_units" type="FLOAT8"/>
            <column name="unload_location_type" type="VARCHAR(255)"/>
            <column name="weight_basis" type="VARCHAR(255)"/>
            <column name="delivery_terms_clause" type="VARCHAR(2048)"/>
            <column name="payment_terms_clause" type="VARCHAR(2048)"/>
            <column name="pricing_terms_clause" type="VARCHAR(2048)"/>
            <column name="quantity_terms_clause" type="VARCHAR(2048)"/>
            <column name="quotation_period_clause" type="VARCHAR(2048)"/>
            <column name="quality_terms_clause" type="VARCHAR(2048)"/>
            <column name="commodity_code" type="VARCHAR(255)"/>
            <column name="company_code" type="VARCHAR(255)"/>
            <column name="profitcenter_code" type="VARCHAR(255)"/>
            <column name="internal_profitcenter_code" type="VARCHAR(255)"/>
            <column name="counterparty_code" type="VARCHAR(255)"/>
            <column name="manual_trade_id" type="VARCHAR(255)"/>
            <column name="broker_reference" type="VARCHAR(255)"/>
            <column defaultValueBoolean="false" name="paper_trade" type="BOOLEAN"/>
            <column defaultValueNumeric="0.0" name="settlement_tolerance_percentage" type="FLOAT8"/>
            <column name="trade_type" type="VARCHAR(255)"/>
            <column name="total_trade_value" type="FLOAT8"/>
            <column name="contract_term" type="VARCHAR(255)"/>
            <column name="settlement_tolerance_value" type="VARCHAR(255)"/>
            <column name="trade_approval_status" type="VARCHAR(255)"/>
            <column name="delivery_schedule" type="JSONB"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-23">
        <createTable tableName="xceler_transportallocationservice_bookingmanagement">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_transportallocationservice_bookingmanagement_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="booking_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="booking_number" type="VARCHAR(255)"/>
            <column name="cargo_type" type="VARCHAR(255)"/>
            <column name="commodity" type="VARCHAR(255)"/>
            <column name="connected_vessel_load_port" type="VARCHAR(255)"/>
            <column name="connected_vessel_name" type="VARCHAR(255)"/>
            <column name="connected_vessel_unload_port" type="VARCHAR(255)"/>
            <column name="connected_vessel_eta" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="container_type" type="VARCHAR(255)"/>
            <column name="currency" type="VARCHAR(255)"/>
            <column name="destination_country" type="VARCHAR(255)"/>
            <column name="freight_forwarder" type="TEXT"/>
            <column name="freight_type" type="VARCHAR(255)"/>
            <column name="hs_code" type="VARCHAR(255)"/>
            <column name="incoterm" type="VARCHAR(255)"/>
            <column name="movement_type" type="VARCHAR(255)"/>
            <column name="no_of_containers" type="VARCHAR(255)"/>
            <column name="origin_country" type="VARCHAR(255)"/>
            <column name="port_cut_off_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="preferred_depo" type="VARCHAR(255)"/>
            <column name="shipping_mode" type="VARCHAR(255)"/>
            <column name="si_cut_off_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="vessel_load_port" type="VARCHAR(255)"/>
            <column name="vessel_name" type="VARCHAR(255)"/>
            <column name="vessel_unload_port" type="VARCHAR(255)"/>
            <column name="vessel_eta" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="vessel_etd" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="stowageplan" type="VARCHAR(255)"/>
            <column name="charterparty" type="VARCHAR(255)"/>
            <column name="laycanfrom" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="laycanto" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="loadport" type="VARCHAR(255)"/>
            <column name="unloadport" type="VARCHAR(255)"/>
            <column name="charter_party" type="TEXT"/>
            <column name="laycan_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="laycan_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="load_port" type="VARCHAR(255)"/>
            <column name="stowage_plan" type="VARCHAR(255)"/>
            <column name="unload_port" type="VARCHAR(255)"/>
            <column name="person_in_charge" type="VARCHAR(255)"/>
            <column defaultValueNumeric="0.0" name="vessel_capacity" type="FLOAT8"/>
            <column defaultValueBoolean="false" name="is_allocated" type="BOOLEAN"/>
            <column name="voyage_no" type="VARCHAR(255)"/>
            <column name="booking_reference_number" type="VARCHAR(255)"/>
            <column name="vessel_owner" type="TEXT"/>
            <column name="transport_operator" type="TEXT"/>
            <column name="freight_broker" type="TEXT"/>
            <column name="transport_service_provider" type="TEXT"/>
            <column name="load_location_type" type="VARCHAR(255)"/>
            <column name="un_load_location_type" type="VARCHAR(255)"/>
            <column name="truck_type" type="VARCHAR(255)"/>
            <column name="no_of_trucks" type="FLOAT8"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-24">
        <createTable tableName="xceler_configservice_location">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_configservice_location_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="description" type="TEXT"/>
            <column name="is_tradeable" type="BOOLEAN"/>
            <column name="location_type" type="VARCHAR(255)"/>
            <column name="name" type="VARCHAR(255)"/>
            <column name="origin" type="BOOLEAN"/>
            <column name="parent" type="VARCHAR(255)"/>
            <column name="status" type="BOOLEAN"/>
            <column name="time_zone" type="VARCHAR(255)"/>
            <column name="code" type="VARCHAR(255)"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column defaultValueBoolean="false" name="high_risk_zone" type="BOOLEAN"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-25">
        <createTable tableName="xceler_tradesettlementservice_tradeinvoice">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_tradesettlementservice_tradeinvoice_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="account_number" type="VARCHAR(255)"/>
            <column name="adjustment_amount" type="FLOAT8"/>
            <column name="amount" type="FLOAT8"/>
            <column name="attachment_name" type="VARCHAR(255)"/>
            <column name="bank_address" type="VARCHAR(255)"/>
            <column name="bank_name" type="VARCHAR(255)"/>
            <column name="bl_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="bl_number" type="VARCHAR(255)"/>
            <column name="commodity" type="VARCHAR(255)"/>
            <column name="company" type="VARCHAR(255)"/>
            <column name="company_address" type="VARCHAR(255)"/>
            <column name="contract_number" type="VARCHAR(255)"/>
            <column name="counterparty" type="VARCHAR(255)"/>
            <column name="counterparty_address" type="TEXT"/>
            <column name="counterparty_ref_number" type="VARCHAR(255)"/>
            <column name="currency" type="VARCHAR(255)"/>
            <column name="delivery_end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="delivery_terms" type="VARCHAR(255)"/>
            <column name="finance_approved_by" type="VARCHAR(255)"/>
            <column name="finance_approved_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="fx_rate" type="FLOAT8"/>
            <column name="incoterm" type="VARCHAR(255)"/>
            <column name="invoice_approved_by" type="VARCHAR(255)"/>
            <column name="invoice_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="invoice_document_url" type="TEXT"/>
            <column name="invoice_generated_by" type="VARCHAR(255)"/>
            <column name="invoice_number" type="VARCHAR(255)"/>
            <column name="invoice_type" type="VARCHAR(255)"/>
            <column name="limits_or_tolerance" type="VARCHAR(255)"/>
            <column name="notify_party_address" type="TEXT"/>
            <column name="notify_party_name" type="VARCHAR(255)"/>
            <column name="payment_amount" type="FLOAT8"/>
            <column name="payment_confirmed_by" type="VARCHAR(255)"/>
            <column name="payment_confirmed_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="payment_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="payment_due_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="payment_ref_number" type="VARCHAR(255)"/>
            <column name="port_of_discharging" type="VARCHAR(255)"/>
            <column name="port_of_loading" type="VARCHAR(255)"/>
            <column name="posting_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="purpose" type="VARCHAR(255)"/>
            <column name="quantity" type="FLOAT8"/>
            <column name="remit_to" type="VARCHAR(255)"/>
            <column name="settlement_amount" type="FLOAT8"/>
            <column name="shipment" type="VARCHAR(255)"/>
            <column name="status" type="VARCHAR(255)"/>
            <column name="swift_code" type="VARCHAR(255)"/>
            <column name="terms_of_payment" type="VARCHAR(255)"/>
            <column name="total" type="FLOAT8"/>
            <column name="trade_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="trade_id" type="VARCHAR(255)"/>
            <column name="trader_approval_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="trader_name" type="VARCHAR(255)"/>
            <column name="unit_price" type="FLOAT8"/>
            <column name="uom" type="VARCHAR(255)"/>
            <column name="planned_obligation_ids" type="JSONB"/>
            <column name="vessel_name" type="VARCHAR(255)"/>
            <column name="attachment_url" type="TEXT"/>
            <column name="attached_file_name" type="VARCHAR(255)"/>
            <column name="financial_amount_type" type="VARCHAR(255)"/>
            <column name="external_reference" type="VARCHAR(255)"/>
            <column name="account_code" type="VARCHAR(255)"/>
            <column name="external_system_invoice_id" type="VARCHAR(255)"/>
            <column name="counter_party_phone_number" type="VARCHAR(255)"/>
            <column name="total_in_words" type="VARCHAR(255)"/>
            <column name="invoice_document" type="BYTEA"/>
            <column name="final_invoice_type" type="VARCHAR(255)"/>
            <column name="old_invoice_id" type="VARCHAR(255)"/>
            <column name="full_invoice_type" type="VARCHAR(255)"/>
            <column name="counterparty_type" type="VARCHAR(255)"/>
            <column name="planned_obligation_id" type="VARCHAR(255)"/>
            <column name="unpost_reason" type="VARCHAR(255)"/>
            <column name="vessel_id" type="VARCHAR(255)"/>
            <column defaultValueNumeric="0.0" name="split_number" type="FLOAT8"/>
            <column name="trade_price_uom" type="VARCHAR(255)"/>
            <column name="parent_invoice_number" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-26">
        <createTable tableName="xceler_physicaltradeservice_internaldealticker">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_physicaltradeservice_internaldealticker_pkey"/>
            </column>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="idt_id" type="VARCHAR(255)"/>
            <column name="trade_date_time" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="commodity" type="VARCHAR(255)"/>
            <column name="brand" type="VARCHAR(255)"/>
            <column name="quantity" type="JSONB"/>
            <column name="to_profit_center" type="VARCHAR(255)"/>
            <column name="from_profit_center" type="VARCHAR(255)"/>
            <column name="to_trader_name" type="VARCHAR(255)"/>
            <column name="from_trader_name" type="VARCHAR(255)"/>
            <column name="counterparty" type="VARCHAR(255)"/>
            <column name="company" type="VARCHAR(255)"/>
            <column name="trade_price" type="JSONB"/>
            <column name="incoterm" type="VARCHAR(255)"/>
            <column name="port" type="VARCHAR(255)"/>
            <column name="price_type" type="VARCHAR(255)"/>
            <column name="shipment_month" type="VARCHAR(255)"/>
            <column name="paymentterm" type="VARCHAR(255)"/>
            <column name="remarks" type="VARCHAR(255)"/>
            <column name="available_qty" type="FLOAT8"/>
            <column defaultValueNumeric="0.0" name="planned_qty" type="FLOAT8"/>
            <column name="trade_type" type="VARCHAR(255)"/>
            <column defaultValue="confirmed" name="status" type="VARCHAR(255)"/>
            <column name="purchase_leg_ref" type="VARCHAR(255)"/>
            <column name="sell_leg_ref" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-27">
        <createTable tableName="xceler_tradeplanningservice_tradelink">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_tradeplanningservice_tradelink_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="planning_id" type="VARCHAR(255)"/>
            <column name="planned_obligation_id" type="VARCHAR(255)"/>
            <column name="linked_with" type="VARCHAR(255)"/>
            <column name="match_quantity" type="FLOAT8"/>
            <column defaultValue="active" name="link_status" type="VARCHAR(255)"/>
            <column name="buy_actualization_id" type="VARCHAR(255)"/>
            <column name="sell_actualization_id" type="VARCHAR(255)"/>
            <column name="allocated_quantity" type="FLOAT8"/>
            <column name="bl_no" type="VARCHAR(255)"/>
            <column defaultValueNumeric="0" name="split_sequence_number" type="INTEGER"/>
            <column defaultValue="matched" name="status" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-28">
        <createTable tableName="xceler_transportallocationservice_seafreightloaddetails">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_transportallocationservice_seafreightloaddetails_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="laycan_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="load_port" type="VARCHAR(255)"/>
            <column name="load_rate" type="FLOAT8"/>
            <column name="notes" type="VARCHAR(255)"/>
            <column name="sailing_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="vessel_id" type="VARCHAR(255)"/>
            <column name="barge" type="VARCHAR(255)"/>
            <column name="tugboat" type="VARCHAR(255)"/>
            <column name="laycanfrom" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="laycanto" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="laycan_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="laycan_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="agent_name" type="VARCHAR(255)"/>
            <column name="agent_address" type="VARCHAR(255)"/>
            <column defaultValue="0" name="agent_contact" type="VARCHAR(50)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-29">
        <createTable tableName="xceler_actualizationservice_actualizedcost">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_actualizationservice_actualizedcost_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="actualization_id" type="VARCHAR(255)"/>
            <column name="actualized_on" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="planned_obligation_id" type="VARCHAR(255)"/>
            <column name="trade_id" type="VARCHAR(255)"/>
            <column name="actualized_cost_id" type="VARCHAR(255)"/>
            <column name="additional_note" type="VARCHAR(255)"/>
            <column name="cost_currency" type="VARCHAR(255)"/>
            <column name="cost_group" type="VARCHAR(255)"/>
            <column name="cost_type" type="VARCHAR(255)"/>
            <column name="cost_value" type="FLOAT8"/>
            <column name="counterparty" type="VARCHAR(255)"/>
            <column name="description" type="VARCHAR(255)"/>
            <column name="effective_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="estimated_cost_id" type="VARCHAR(255)"/>
            <column name="input_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="maturity_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="name" type="VARCHAR(255)"/>
            <column name="payment_due_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="payment_term" type="VARCHAR(255)"/>
            <column name="payment_type" type="VARCHAR(255)"/>
            <column name="percentage_component" type="VARCHAR(255)"/>
            <column name="percentage_payable" type="FLOAT8"/>
            <column name="quantity_option" type="VARCHAR(255)"/>
            <column name="tax_applicable" type="BOOLEAN"/>
            <column name="type" type="VARCHAR(255)"/>
            <column name="uom" type="VARCHAR(255)"/>
            <column defaultValueNumeric="0.0" name="claimed_cost_value" type="FLOAT8"/>
            <column name="cost_for" type="VARCHAR(255)"/>
            <column name="link_to" type="VARCHAR(255)"/>
            <column defaultValue="cost" name="cost_charges_type" type="VARCHAR(255)"/>
            <column defaultValueNumeric="0.0" name="split_sequence_number" type="FLOAT8"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-30">
        <createTable tableName="xceler_actualizationservice_actualizedqualityspec">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_actualizationservice_actualizedqualityspec_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="actualization_id" type="VARCHAR(255)"/>
            <column name="actualized_on" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="planned_obligation_id" type="VARCHAR(255)"/>
            <column name="trade_id" type="VARCHAR(255)"/>
            <column name="actualized_quality_id" type="VARCHAR(255)"/>
            <column name="description" type="VARCHAR(255)"/>
            <column name="estimated_quality_spec_id" type="VARCHAR(255)"/>
            <column name="max" type="FLOAT4"/>
            <column name="min" type="FLOAT4"/>
            <column name="name" type="VARCHAR(255)"/>
            <column name="typical" type="VARCHAR(255)"/>
            <column name="unit" type="VARCHAR(255)"/>
            <column defaultValueNumeric="0.0" name="premium_discount" type="FLOAT8"/>
            <column defaultValueNumeric="0.0" name="claimed_basis" type="FLOAT8"/>
            <column defaultValueNumeric="0.0" name="claimed_premium_discount" type="FLOAT8"/>
            <column defaultValueNumeric="0.0" name="basis" type="FLOAT8"/>
            <column name="settlement_type" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-31">
        <createTable tableName="xceler_authservice_rolemaster">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_authservice_rolemaster_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="description" type="VARCHAR(255)"/>
            <column name="is_visible" type="BOOLEAN"/>
            <column name="number_of_users" type="INTEGER"/>
            <column name="policy" type="TEXT"/>
            <column name="role_name" type="VARCHAR(255)"/>
            <column name="status" type="BOOLEAN"/>
            <column defaultValueNumeric="-1" name="policy_version" type="INTEGER"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-32">
        <createTable tableName="xceler_authservice_usermasterinfo">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_authservice_usermasterinfo_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="master_type" type="VARCHAR(255)"/>
            <column name="master_type_value" type="VARCHAR(255)"/>
            <column name="user_id" type="VARCHAR(255)"/>
            <column defaultValueBoolean="false" name="tradeable" type="BOOLEAN"/>
            <column defaultValueBoolean="false" name="is_default" type="BOOLEAN"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-33">
        <createTable tableName="xceler_authservice_userviewpreference">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_authservice_userviewpreference_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="module_name" type="VARCHAR(255)"/>
            <column name="preferencejson" type="TEXT"/>
            <column name="preferencename" type="VARCHAR(255)"/>
            <column name="preferencetype" type="VARCHAR(255)"/>
            <column name="status" type="BOOLEAN"/>
            <column name="submodulename" type="VARCHAR(255)"/>
            <column name="userid" type="VARCHAR(255)"/>
            <column defaultValueBoolean="false" name="preferencedefault" type="BOOLEAN"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-34">
        <createTable tableName="xceler_configservice_transactionidformatmaster">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_configservice_transactionidformatmaster_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="name" type="VARCHAR(255)"/>
            <column name="number_of_digits" type="INTEGER"/>
            <column name="reference_format" type="VARCHAR(255)"/>
            <column name="reset_value" type="VARCHAR(255)"/>
            <column name="transaction_reference_description" type="VARCHAR(255)"/>
            <column name="transaction_status" type="INTEGER"/>
            <column name="transaction_type" type="VARCHAR(255)"/>
            <column defaultValueNumeric="0" name="periodicity" type="INTEGER"/>
            <column defaultValueNumeric="0" name="split_sequence" type="INTEGER"/>
            <column name="transaction_sequence_criteria" type="JSONB"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-35">
        <createTable tableName="xceler_eodservice_physicalobligationrawdata">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_eodservice_physicalobligationrawdata_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="actual_brand" type="VARCHAR(255)"/>
            <column name="actual_grade" type="VARCHAR(255)"/>
            <column name="actual_load_quantity" type="FLOAT8"/>
            <column name="actual_origin" type="VARCHAR(255)"/>
            <column name="actual_unload_quantity" type="FLOAT8"/>
            <column name="basis_market_settlement_price" type="FLOAT8"/>
            <column name="basis_mtm_index" type="VARCHAR(255)"/>
            <column name="brand" type="VARCHAR(255)"/>
            <column name="bulk_packed" type="VARCHAR(255)"/>
            <column name="commodity" type="VARCHAR(255)"/>
            <column name="company" type="VARCHAR(255)"/>
            <column name="company_currency" type="VARCHAR(255)"/>
            <column name="contract_month" type="VARCHAR(255)"/>
            <column name="counterparty" type="VARCHAR(255)"/>
            <column name="delivery_end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="delivery_start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="discharge_port" type="VARCHAR(255)"/>
            <column name="eod_currency" type="VARCHAR(255)"/>
            <column name="eod_id" type="VARCHAR(255)"/>
            <column name="eod_uom" type="VARCHAR(255)"/>
            <column name="eta_date" type="VARCHAR(255)"/>
            <column name="future_allocated_price" type="FLOAT8"/>
            <column name="future_allocated_quantity" type="FLOAT8"/>
            <column name="future_market_settlement_price" type="FLOAT8"/>
            <column name="future_mtm_index" type="VARCHAR(255)"/>
            <column name="fx_allocation_id" type="VARCHAR(255)"/>
            <column name="fx_allocation_status" type="BOOLEAN"/>
            <column name="fx_index_code" type="VARCHAR(255)"/>
            <column name="fx_index_name" type="VARCHAR(255)"/>
            <column name="fx_index_pair" type="VARCHAR(255)"/>
            <column name="fx_index_rate" type="FLOAT8"/>
            <column name="fx_pair" type="VARCHAR(255)"/>
            <column name="fx_rate" type="FLOAT8"/>
            <column name="fx_trade_id" type="VARCHAR(255)"/>
            <column name="grade" type="VARCHAR(255)"/>
            <column name="incoterm" type="VARCHAR(255)"/>
            <column name="invoice_id" type="VARCHAR(255)"/>
            <column name="invoiced_amount" type="VARCHAR(255)"/>
            <column name="laycan_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="load_port" type="VARCHAR(255)"/>
            <column name="location" type="VARCHAR(255)"/>
            <column name="market_lot_size" type="FLOAT8"/>
            <column name="market_settlement_price" type="FLOAT8"/>
            <column name="mtmindex" type="VARCHAR(255)"/>
            <column name="notional_amount" type="FLOAT8"/>
            <column name="obligation_id" type="VARCHAR(255)"/>
            <column name="obligation_status" type="VARCHAR(255)"/>
            <column name="obligation_uuid" type="VARCHAR(255)"/>
            <column name="origin" type="VARCHAR(255)"/>
            <column name="plan_id" type="VARCHAR(255)"/>
            <column name="planned_obligation_id" type="VARCHAR(255)"/>
            <column name="planned_obligation_uuid" type="VARCHAR(255)"/>
            <column name="planned_quantity" type="FLOAT8"/>
            <column name="price" type="FLOAT8"/>
            <column name="price_currency" type="VARCHAR(255)"/>
            <column name="price_settlement_currency" type="VARCHAR(255)"/>
            <column name="price_type" type="VARCHAR(255)"/>
            <column name="priceuom" type="VARCHAR(255)"/>
            <column name="profitcenter" type="VARCHAR(255)"/>
            <column name="prov_fx_rate" type="VARCHAR(255)"/>
            <column name="prov_price_currency" type="VARCHAR(255)"/>
            <column name="prov_priceuom" type="VARCHAR(255)"/>
            <column name="prov_trade_price" type="FLOAT8"/>
            <column name="quantityuom" type="VARCHAR(255)"/>
            <column name="realised_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="resource_name" type="VARCHAR(255)"/>
            <column name="season" type="VARCHAR(255)"/>
            <column name="stock_currency" type="VARCHAR(255)"/>
            <column name="stock_id" type="VARCHAR(255)"/>
            <column name="stock_price" type="VARCHAR(255)"/>
            <column name="stock_quantity" type="VARCHAR(255)"/>
            <column name="stock_type" type="VARCHAR(255)"/>
            <column name="stockuom" type="VARCHAR(255)"/>
            <column name="storage_id" type="VARCHAR(255)"/>
            <column name="storage_location" type="VARCHAR(255)"/>
            <column name="total_contract_qty" type="FLOAT8"/>
            <column name="total_price_allocated_quantity" type="FLOAT8"/>
            <column name="trade_discharge_location" type="VARCHAR(255)"/>
            <column name="trade_id" type="VARCHAR(255)"/>
            <column name="trade_load_location" type="VARCHAR(255)"/>
            <column name="trade_quantity" type="FLOAT8"/>
            <column name="trade_settlement_price" type="FLOAT8"/>
            <column name="trade_transaction_type" type="INTEGER"/>
            <column name="trade_type" type="VARCHAR(255)"/>
            <column name="trade_uuid" type="VARCHAR(255)"/>
            <column name="trade_date_time" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="trader_name" type="VARCHAR(255)"/>
            <column name="price_allocation_status" type="VARCHAR(255)"/>
            <column name="upload_for_date" type="date"/>
            <column defaultValue="INT" name="data_source" type="VARCHAR(255)"/>
            <column name="costs_to_add" type="JSONB"/>
            <column name="costs_to_net" type="JSONB"/>
            <column name="premium_discount" type="FLOAT4"/>
            <column name="prem_currency" type="VARCHAR(50)"/>
            <column name="prem_uom" type="VARCHAR(50)"/>
            <column name="mtm_index_period" type="VARCHAR(255)"/>
            <column name="basis_mtm_index_period" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-36">
        <createTable tableName="xceler_eodservice_publisheddata">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_eodservice_publisheddata_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="buy_open_position" type="FLOAT8"/>
            <column name="closed_pnl_today" type="FLOAT8"/>
            <column name="closed_position" type="FLOAT8"/>
            <column name="commodity" type="VARCHAR(255)"/>
            <column name="company" type="VARCHAR(255)"/>
            <column name="counterparty" type="VARCHAR(255)"/>
            <column name="eod_currency" type="VARCHAR(255)"/>
            <column name="eod_job_name" type="VARCHAR(255)"/>
            <column name="eod_run_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="eoduom" type="VARCHAR(255)"/>
            <column name="finance_cost" type="FLOAT8"/>
            <column name="freight_cost" type="FLOAT8"/>
            <column name="fx_exposure" type="FLOAT8"/>
            <column name="fx_exposure_currency" type="VARCHAR(255)"/>
            <column name="insurance_cost" type="FLOAT8"/>
            <column name="mtm_pnl" type="FLOAT8"/>
            <column name="mtm_settlement" type="FLOAT8"/>
            <column name="nbv" type="FLOAT8"/>
            <column name="obligationid" type="VARCHAR(255)"/>
            <column name="other_cost" type="FLOAT8"/>
            <column name="pnl_monthly" type="FLOAT8"/>
            <column name="pnl_yearly" type="FLOAT8"/>
            <column name="price_currency" type="VARCHAR(255)"/>
            <column name="price_exposure" type="FLOAT8"/>
            <column name="profitcenter" type="VARCHAR(255)"/>
            <column name="raw_data_id" type="INTEGER"/>
            <column name="realised_pnl_today" type="FLOAT8"/>
            <column name="realized_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="realized_position" type="FLOAT8"/>
            <column name="sell_open_position" type="FLOAT8"/>
            <column name="tax_cost" type="FLOAT8"/>
            <column name="total_cost" type="FLOAT8"/>
            <column name="trade_id" type="VARCHAR(255)"/>
            <column name="prev_mtm_pnl" type="FLOAT8"/>
            <column name="prev_open_buy_position" type="FLOAT8"/>
            <column name="prev_open_sell_position" type="FLOAT8"/>
            <column name="trade_value" type="FLOAT8"/>
            <column name="trader_name" type="VARCHAR(255)"/>
            <column name="prev_realised_pnl" type="FLOAT8"/>
            <column name="prev_realised_postion" type="FLOAT8"/>
            <column name="prev_closed_postion" type="FLOAT8"/>
            <column defaultValueNumeric="0.0" name="total_netted_cost" type="FLOAT8"/>
            <column defaultValueNumeric="0.0" name="total_added_cost" type="FLOAT8"/>
            <column defaultValueNumeric="0.0" name="total_premium_discount" type="FLOAT8"/>
            <column defaultValue="Physical" name="trade_type" type="VARCHAR(50)"/>
            <column name="price" type="FLOAT8"/>
            <column name="trade_transaction_type" type="INTEGER"/>
            <column name="price_type" type="VARCHAR(255)"/>
            <column name="trade_date_time" type="TIMESTAMP WITHOUT TIME ZONE"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-37">
        <createTable tableName="xceler_eodservice_futuretradeeodstaging">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_eodservice_futuretradeeodstaging_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="buy_open_position" type="FLOAT8"/>
            <column name="close_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column defaultValueNumeric="0.0" name="closed_pnl" type="FLOAT8"/>
            <column name="closed_positon" type="FLOAT8"/>
            <column name="commodity" type="VARCHAR(255)"/>
            <column name="company" type="VARCHAR(255)"/>
            <column name="counterparty" type="VARCHAR(255)"/>
            <column name="eod_currency" type="VARCHAR(255)"/>
            <column name="eod_job_name" type="VARCHAR(255)"/>
            <column name="eod_run_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="eoduom" type="VARCHAR(255)"/>
            <column defaultValueNumeric="0.0" name="mtm_pnl" type="FLOAT8"/>
            <column name="profitcenter" type="VARCHAR(255)"/>
            <column name="raw_data_id" type="VARCHAR(255)"/>
            <column name="sell_open_position" type="FLOAT8"/>
            <column name="trade_id" type="VARCHAR(255)"/>
            <column name="prev_mtm_pnl" type="FLOAT8"/>
            <column name="prev_open_buy_position" type="FLOAT8"/>
            <column name="prev_open_sell_position" type="FLOAT8"/>
            <column name="prev_realised_pnl" type="FLOAT8"/>
            <column name="prev_realised_postion" type="FLOAT8"/>
            <column name="prev_closed_postion" type="FLOAT8"/>
            <column name="prev_closed_pnl" type="FLOAT8"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-38">
        <createTable tableName="xceler_eodservice_fxstaging">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_eodservice_fxstaging_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="company" type="VARCHAR(255)"/>
            <column name="eod_currency" type="VARCHAR(255)"/>
            <column name="eod_job_name" type="VARCHAR(255)"/>
            <column name="eod_run_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="eoduom" type="VARCHAR(255)"/>
            <column name="fx_trade_id" type="VARCHAR(255)"/>
            <column defaultValueNumeric="0.0" name="mtm_pnl" type="FLOAT8"/>
            <column name="mtm_pnl_currency" type="VARCHAR(255)"/>
            <column name="profitcenter" type="VARCHAR(255)"/>
            <column defaultValueNumeric="0.0" name="realised_pnl" type="FLOAT8"/>
            <column name="realised_pnl_currency" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-39">
        <createTable tableName="xceler_eodservice_stagingdata">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_eodservice_stagingdata_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="buy_open_position" type="FLOAT8"/>
            <column name="closed_pnl_today" type="FLOAT8"/>
            <column name="commodity" type="VARCHAR(255)"/>
            <column name="company" type="VARCHAR(255)"/>
            <column name="counterparty" type="VARCHAR(255)"/>
            <column name="eod_currency" type="VARCHAR(255)"/>
            <column name="eod_job_name" type="VARCHAR(255)"/>
            <column name="eod_run_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="eoduom" type="VARCHAR(255)"/>
            <column name="finance_cost" type="FLOAT8"/>
            <column name="freight_cost" type="FLOAT8"/>
            <column name="fx_exposure" type="FLOAT8"/>
            <column name="fx_exposure_currency" type="VARCHAR(255)"/>
            <column name="insurance_cost" type="FLOAT8"/>
            <column name="mtm_pnl" type="FLOAT8"/>
            <column name="mtm_settlement" type="FLOAT8"/>
            <column name="nbv" type="FLOAT8"/>
            <column name="obligationid" type="VARCHAR(255)"/>
            <column name="other_cost" type="FLOAT8"/>
            <column name="pnl_monthly" type="FLOAT8"/>
            <column name="pnl_yearly" type="FLOAT8"/>
            <column name="price_currency" type="VARCHAR(255)"/>
            <column name="price_exposure" type="FLOAT8"/>
            <column name="profitcenter" type="VARCHAR(255)"/>
            <column name="raw_data_id" type="VARCHAR(255)"/>
            <column name="realised_pnl_today" type="FLOAT8"/>
            <column name="realized_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="realized_position" type="FLOAT8"/>
            <column name="sell_open_position" type="FLOAT8"/>
            <column name="tax_cost" type="FLOAT8"/>
            <column name="total_cost" type="FLOAT8"/>
            <column name="trade_id" type="VARCHAR(255)"/>
            <column name="prev_mtm_pnl" type="FLOAT8"/>
            <column name="prev_open_buy_position" type="FLOAT8"/>
            <column name="prev_open_sell_position" type="FLOAT8"/>
            <column name="prev_realised_pnl" type="FLOAT8"/>
            <column name="prev_realised_postion" type="FLOAT8"/>
            <column name="prev_closed_postion" type="FLOAT8"/>
            <column name="trade_value" type="FLOAT8"/>
            <column name="trader_name" type="VARCHAR(255)"/>
            <column name="closed_position" type="FLOAT8"/>
            <column defaultValueNumeric="0.0" name="total_netted_cost" type="FLOAT8"/>
            <column defaultValueNumeric="0.0" name="total_added_cost" type="FLOAT8"/>
            <column defaultValueNumeric="0.0" name="total_premium_discount" type="FLOAT8"/>
            <column defaultValue="Physical" name="trade_type" type="VARCHAR(50)"/>
            <column name="price" type="FLOAT8"/>
            <column name="trade_transaction_type" type="INTEGER"/>
            <column name="price_type" type="VARCHAR(255)"/>
            <column name="trade_date_time" type="TIMESTAMP WITHOUT TIME ZONE"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-40">
        <createTable tableName="xceler_eodservice_tradecostrawdata">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_eodservice_tradecostrawdata_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="actual_value" type="FLOAT8"/>
            <column name="cost_currency" type="VARCHAR(255)"/>
            <column name="cost_group" type="VARCHAR(255)"/>
            <column name="cost_id" type="VARCHAR(255)"/>
            <column name="cost_type" type="VARCHAR(255)"/>
            <column name="estimated_value" type="FLOAT8"/>
            <column name="obligation_id" type="VARCHAR(255)"/>
            <column name="percentage_payable" type="FLOAT8"/>
            <column name="quantity_option" type="VARCHAR(255)"/>
            <column name="stock_id" type="VARCHAR(255)"/>
            <column name="cost_for" type="VARCHAR(255)"/>
            <column name="link_to" type="VARCHAR(255)"/>
            <column name="actualized_cost_id" type="VARCHAR(255)"/>
            <column name="trade_id" type="VARCHAR(255)"/>
            <column defaultValueNumeric="0.0" name="split_sequence_number" type="FLOAT8"/>
            <column name="name" type="VARCHAR(255)"/>
            <column name="cost_charges_type" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-41">
        <createTable tableName="xceler_fxtradeservice_fxtrade">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_fxtradeservice_fxtrade_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="auto_rollover" type="BOOLEAN"/>
            <column name="broker" type="VARCHAR(255)"/>
            <column name="buy_amount" type="FLOAT8"/>
            <column name="buy_amount_currency" type="VARCHAR(255)"/>
            <column name="company" type="VARCHAR(255)"/>
            <column name="counterparty" type="VARCHAR(255)"/>
            <column name="external_ref" type="VARCHAR(255)"/>
            <column name="fx_pair" type="VARCHAR(255)"/>
            <column name="fx_trade_id" type="VARCHAR(255)"/>
            <column name="fx_trade_type" type="VARCHAR(255)"/>
            <column name="notional_amount" type="FLOAT8"/>
            <column name="planned_notional_value" type="FLOAT8"/>
            <column name="profitcenter" type="VARCHAR(255)"/>
            <column name="rate" type="FLOAT8"/>
            <column name="sell_amount" type="FLOAT8"/>
            <column name="sell_amount_currency" type="VARCHAR(255)"/>
            <column name="settlement_currency" type="VARCHAR(255)"/>
            <column name="settlement_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="settlement_type" type="VARCHAR(255)"/>
            <column name="status" type="VARCHAR(255)"/>
            <column name="trade_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="trade_transaction_type" type="INTEGER"/>
            <column name="trader_name" type="VARCHAR(255)"/>
            <column name="value_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="broker_account_no" type="VARCHAR(255)"/>
            <column name="initial_margin" type="VARCHAR(255)"/>
            <column name="tenor" type="INTEGER"/>
            <column name="maintenance_margin" type="VARCHAR(255)"/>
            <column name="reference_price" type="VARCHAR(255)"/>
            <column name="cost" type="VARCHAR(255)"/>
            <column defaultValue="NO" name="expiry_status" type="VARCHAR"/>
            <column defaultValue="NO" name="settlement_status" type="VARCHAR"/>
            <column name="parent_fx_trade_id" type="VARCHAR(50)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-42">
        <createTable tableName="xceler_idt_transaction">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_idt_transaction_pkey"/>
            </column>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="idt_id" type="VARCHAR(255)"/>
            <column name="trade_link_id" type="VARCHAR(255)"/>
            <column name="plan_id" type="VARCHAR(255)"/>
            <column name="buy_obligation_id" type="VARCHAR(255)"/>
            <column name="sell_obligation_id" type="VARCHAR(255)"/>
            <column defaultValueNumeric="0.0" name="quantity" type="FLOAT8"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-43">
        <createTable tableName="xceler_pricingservice_tradepriceline">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_pricingservice_tradepriceline_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="basis" type="FLOAT8"/>
            <column name="broker" type="VARCHAR(255)"/>
            <column name="contract_month" type="VARCHAR(255)"/>
            <column name="currency_type" type="VARCHAR(255)"/>
            <column name="fixed_future_price" type="FLOAT8"/>
            <column name="fixed_price" type="FLOAT8"/>
            <column name="future_contract" type="VARCHAR(255)"/>
            <column name="future_contract_month" type="VARCHAR(255)"/>
            <column name="future_expiry_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="future_price" type="FLOAT8"/>
            <column name="future_price_lots" type="FLOAT8"/>
            <column name="future_trade_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="future_trade_id" type="VARCHAR(255)"/>
            <column name="index_price_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="lots" type="FLOAT8"/>
            <column name="market_future_price" type="FLOAT8"/>
            <column name="price" type="FLOAT8"/>
            <column name="price_line_type" type="VARCHAR(255)"/>
            <column name="pricing_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="profit_center" type="VARCHAR(255)"/>
            <column name="quantitylot" type="FLOAT8"/>
            <column name="quantitymt" type="FLOAT8"/>
            <column name="trade_id" type="VARCHAR(255)"/>
            <column name="uom" type="VARCHAR(255)"/>
            <column defaultValueNumeric="0.0" name="freight" type="FLOAT8"/>
            <column defaultValueNumeric="0.0" name="insurance" type="FLOAT8"/>
            <column defaultValueNumeric="0.0" name="commission" type="FLOAT8"/>
            <column defaultValueNumeric="0.0" name="premium" type="FLOAT8"/>
            <column defaultValueNumeric="0.0" name="brokerage" type="FLOAT8"/>
            <column defaultValueNumeric="0.0" name="others" type="FLOAT8"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-44">
        <createTable tableName="xceler_stock_movement_1">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_stock_movement_pkey"/>
            </column>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="transfer_id" type="VARCHAR(255)"/>
            <column name="transfer_from" type="VARCHAR(255)"/>
            <column name="transfer_to" type="VARCHAR(255)"/>
            <column name="commodity" type="VARCHAR(255)"/>
            <column name="type" type="VARCHAR(255)"/>
            <column name="quantity" type="JSONB"/>
            <column name="price" type="JSONB"/>
            <column name="internal_packaging_type" type="VARCHAR(50)"/>
            <column name="max_number_of_package" type="INTEGER"/>
            <column name="status" type="VARCHAR(255)"/>
            <column name="stage" type="VARCHAR(255)"/>
            <column name="counterparty_approval" type="VARCHAR(255)"/>
            <column name="finance_approval" type="VARCHAR(255)"/>
            <column name="trader_approval" type="VARCHAR(255)"/>
            <column name="actual_received_qty" type="JSONB"/>
            <column name="plan_id" type="VARCHAR(255)"/>
            <column name="voyage_allocation_status" type="VARCHAR(255)"/>
            <column name="trade_package_type" type="VARCHAR(255)"/>
            <column name="purchase_id" type="VARCHAR(255)"/>
            <column name="vessel_plan_id" type="VARCHAR(255)"/>
            <column name="from_commodity" type="VARCHAR(255)"/>
            <column name="sell_stock_id" type="VARCHAR(255)"/>
            <column name="actualize_id" type="VARCHAR(255)"/>
            <column name="split_sequence_number" type="FLOAT8"/>
            <column name="grn_id" type="VARCHAR(255)"/>
            <column defaultValueBoolean="false" name="is_bl_split" type="BOOLEAN"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-45">
        <createTable tableName="xceler_tradesettlementservice_tradeinvoicelineitem">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_tradesettlementservice_tradeinvoicelineitem_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="allocation_id" type="VARCHAR(255)"/>
            <column name="brand" type="VARCHAR(255)"/>
            <column name="broker" type="VARCHAR(255)"/>
            <column name="cashflow_id" type="VARCHAR(255)"/>
            <column name="cashflow_type" type="VARCHAR(255)"/>
            <column name="commodity" type="VARCHAR(255)"/>
            <column name="company" type="VARCHAR(255)"/>
            <column name="cost_group" type="VARCHAR(255)"/>
            <column name="cost_name" type="VARCHAR(255)"/>
            <column name="advanced_invoice_id" type="VARCHAR(255)"/>
            <column name="cost_value" type="FLOAT8"/>
            <column name="invoiced_settlement_value" type="FLOAT8"/>
            <column name="counterparty" type="VARCHAR(255)"/>
            <column name="currency" type="VARCHAR(255)"/>
            <column name="delivery_end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="delivery_start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="financial_amount_type" type="VARCHAR(255)"/>
            <column name="fx_type" type="VARCHAR(255)"/>
            <column name="grade" type="VARCHAR(255)"/>
            <column name="incoterm" type="VARCHAR(255)"/>
            <column name="invoice_number" type="VARCHAR(255)"/>
            <column name="narration" type="TEXT"/>
            <column name="origin" type="VARCHAR(255)"/>
            <column name="payment_due_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="planned_obligation_id" type="VARCHAR(255)"/>
            <column name="price_currency" type="VARCHAR(255)"/>
            <column name="price_currency_uom" type="VARCHAR(255)"/>
            <column name="price_status" type="VARCHAR(255)"/>
            <column name="price_type" type="VARCHAR(255)"/>
            <column name="profitcenter" type="VARCHAR(255)"/>
            <column name="quantity" type="FLOAT8"/>
            <column name="quantity_status" type="VARCHAR(255)"/>
            <column name="quantity_uom" type="VARCHAR(255)"/>
            <column name="season" type="VARCHAR(255)"/>
            <column name="settlement_amount" type="FLOAT8"/>
            <column name="settlement_currency" type="VARCHAR(255)"/>
            <column name="stage" type="VARCHAR(255)"/>
            <column name="trade_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="trade_price" type="FLOAT8"/>
            <column name="trade_price_currency" type="VARCHAR(255)"/>
            <column name="trade_transaction_type" type="INTEGER"/>
            <column name="uom" type="VARCHAR(255)"/>
            <column defaultValueBoolean="false" name="adjusted" type="BOOLEAN"/>
            <column name="adjusted_in_invoice" type="VARCHAR(255)"/>
            <column name="trade_id" type="VARCHAR(255)"/>
            <column name="commodity_code" type="VARCHAR(255)"/>
            <column name="advance_in_percent" type="FLOAT8"/>
            <column name="delivery_term" type="VARCHAR(255)"/>
            <column name="item_category" type="VARCHAR(255)"/>
            <column name="gl_code" type="VARCHAR(255)"/>
            <column name="ship_doc_number" type="VARCHAR(255)"/>
            <column defaultValueBoolean="false" name="voided" type="BOOLEAN"/>
            <column defaultValueNumeric="0.0" name="split_number" type="FLOAT8"/>
            <column defaultValueNumeric="1" name="item_number" type="INTEGER"/>
            <column name="cashflow_id_list" type="TEXT"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-46">
        <createTable tableName="xceler_riskservice_mtmindexmap">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_riskservice_mtmindexmap_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="basis_mtm_index" type="VARCHAR(255)"/>
            <column name="brand" type="VARCHAR(255)"/>
            <column name="commodity" type="VARCHAR(255)"/>
            <column name="company" type="VARCHAR(255)"/>
            <column name="dischargelocation" type="VARCHAR(255)"/>
            <column defaultValueNumeric="0.0" name="premium_discount" type="FLOAT8"/>
            <column name="future_mtm_index" type="VARCHAR(255)"/>
            <column name="grade" type="VARCHAR(255)"/>
            <column name="incoterm" type="VARCHAR(255)"/>
            <column name="index_type" type="VARCHAR(255)"/>
            <column name="loadlocation" type="VARCHAR(255)"/>
            <column name="location" type="VARCHAR(255)"/>
            <column name="mtm_index" type="VARCHAR(255)"/>
            <column name="origin" type="VARCHAR(255)"/>
            <column name="prem_currency" type="VARCHAR(255)"/>
            <column name="prem_uom" type="VARCHAR(255)"/>
            <column name="season" type="VARCHAR(255)"/>
            <column name="trade_transaction_type" type="INTEGER"/>
            <column name="trade_type" type="VARCHAR(255)"/>
            <column name="transaction_type" type="VARCHAR(255)"/>
            <column name="costs_to_add" type="JSONB"/>
            <column name="costs_to_net" type="JSONB"/>
            <column name="mtm_index_period" type="VARCHAR(255)"/>
            <column name="basis_mtm_index_period" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-47">
        <createTable tableName="xceler_transportallocationservice_seafreightunloaddetails">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_transportallocationservice_seafreightunloaddetails_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="discharge_port" type="VARCHAR(255)"/>
            <column name="discharge_rate" type="FLOAT8"/>
            <column name="eta_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="eta_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="notes" type="VARCHAR(255)"/>
            <column name="vessel_id" type="VARCHAR(255)"/>
            <column name="agent_name" type="VARCHAR(255)"/>
            <column name="agent_address" type="VARCHAR(255)"/>
            <column defaultValue="0" name="agent_contact" type="VARCHAR(50)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-48">
        <createTable tableName="xceler_workflow_step_execution_log">
            <column autoIncrement="true" name="id" type="BIGINT">
                <constraints nullable="false"/>
            </column>
            <column defaultValueComputed="now()" name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="execution_id" type="UUID"/>
            <column name="step_id" type="VARCHAR(255)"/>
            <column name="input" type="JSONB"/>
            <column name="output" type="JSONB"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-49">
        <createTable tableName="xceler_purchase_stock">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_purchase_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="purchase_id" type="VARCHAR(255)"/>
            <column name="inventory_id" type="VARCHAR(255)"/>
            <column name="stock_in_quantity" type="FLOAT8"/>
            <column name="drown_quantity" type="FLOAT8"/>
            <column name="transfer_type" type="VARCHAR(255)"/>
            <column name="purchase_stock_id" type="VARCHAR(255)"/>
            <column defaultValueNumeric="0.0" name="reserved_quantity" type="FLOAT8"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-50">
        <createTable tableName="xceler_stock_movement">
            <column name="uuid" type="UUID"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="transfer_id" type="VARCHAR(255)"/>
            <column name="transfer_from" type="VARCHAR(255)"/>
            <column name="transfer_to" type="VARCHAR(255)"/>
            <column name="commodity" type="VARCHAR(255)"/>
            <column name="type" type="VARCHAR(255)"/>
            <column name="quantity" type="JSONB"/>
            <column name="price" type="JSONB"/>
            <column name="internal_packaging_type" type="VARCHAR(50)"/>
            <column name="max_number_of_package" type="INTEGER"/>
            <column name="status" type="VARCHAR(255)"/>
            <column name="stage" type="VARCHAR(255)"/>
            <column name="counterparty_approval" type="VARCHAR(255)"/>
            <column name="finance_approval" type="VARCHAR(255)"/>
            <column name="trader_approval" type="VARCHAR(255)"/>
            <column name="actual_received_qty" type="JSONB"/>
            <column name="plan_id" type="VARCHAR(255)"/>
            <column name="voyage_allocation_status" type="VARCHAR(255)"/>
            <column name="trade_package_type" type="VARCHAR(255)"/>
            <column name="purchase_id" type="VARCHAR(255)"/>
            <column name="vessel_plan_id" type="VARCHAR(255)"/>
            <column name="from_commodity" type="VARCHAR(255)"/>
            <column name="sell_stock_id" type="VARCHAR(255)"/>
            <column name="actualize_id" type="VARCHAR(255)"/>
            <column name="split_sequence_number" type="FLOAT8"/>
            <column name="grn_id" type="VARCHAR(255)"/>
            <column name="is_bl_split" type="BOOLEAN"/>
            <column defaultValueNumeric="1.0" name="conversion_factor" type="FLOAT8"/>
            <column defaultValue="MT" name="transfer_from_uom" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-51">
        <createTable tableName="taomish_db_lock">
            <column name="key" type="VARCHAR(100)">
                <constraints nullable="false" primaryKey="true" primaryKeyName="taomish_db_lock_pkey"/>
            </column>
            <column defaultValueComputed="now()" name="locked_at" type="TIMESTAMP WITHOUT TIME ZONE">
                <constraints nullable="false"/>
            </column>
            <column name="lock_until" type="TIMESTAMP WITHOUT TIME ZONE">
                <constraints nullable="false"/>
            </column>
            <column name="locked_by" type="VARCHAR(50)">
                <constraints nullable="false"/>
            </column>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-52">
        <createTable tableName="xceler_baseuploaderservice_baseuploaderrepository">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_baseuploaderservice_baseuploaderrepository_pkey"/>
            </column>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="uploader_config_category" type="VARCHAR(255)"/>
            <column name="uploader_config_name" type="VARCHAR(255)"/>
            <column name="document_content" type="BYTEA"/>
            <column name="document_name" type="VARCHAR(255)"/>
            <column name="description" type="TEXT"/>
            <column name="mime_type" type="VARCHAR(255)"/>
            <column defaultValueBoolean="true" name="status" type="BOOLEAN"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-53">
        <createTable tableName="xceler_authservice_usersession">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_authservice_usersession_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="access_policy_json" type="BYTEA"/>
            <column name="created_time" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="idle_time_out" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="user_name" type="VARCHAR(255)"/>
            <column name="user_type" type="VARCHAR(255)"/>
            <column name="last_access_time" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column defaultValueBoolean="false" name="status" type="BOOLEAN"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-54">
        <createTable tableName="xceler_delivery_order">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_delivery_order_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="do_id" type="VARCHAR(255)"/>
            <column name="do_number" type="VARCHAR(255)"/>
            <column name="do_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="load_location" type="VARCHAR(255)"/>
            <column name="buyer_name" type="VARCHAR(255)"/>
            <column name="planned_obligation_id" type="VARCHAR(255)"/>
            <column name="trade_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="commodity" type="VARCHAR(255)"/>
            <column name="planned_quantity" type="FLOAT8"/>
            <column name="draw_quantity" type="FLOAT8"/>
            <column name="quality" type="VARCHAR(255)"/>
            <column name="delivery_period" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="delivery_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="transport_service_provider" type="VARCHAR(255)"/>
            <column name="transporter_address" type="VARCHAR(255)"/>
            <column name="transport_type" type="VARCHAR(255)"/>
            <column name="booking_confirmation_number" type="VARCHAR(255)"/>
            <column name="incoterm" type="VARCHAR(255)"/>
            <column name="sell_stock_id" type="VARCHAR(255)"/>
            <column name="document_id" type="VARCHAR(255)"/>
            <column name="inventory_name" type="VARCHAR(255)"/>
            <column name="quantity_uom" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-55">
        <createTable tableName="xceler_inventory">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_inventory_pkey"/>
            </column>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="inventory_id" type="VARCHAR(255)"/>
            <column name="inventory_name" type="VARCHAR(255)"/>
            <column name="commodity" type="VARCHAR(255)"/>
            <column name="total_capacity" type="JSONB"/>
            <column name="inventory_uom" type="VARCHAR(255)"/>
            <column name="inventory_currency" type="VARCHAR(255)"/>
            <column name="grade" type="VARCHAR(255)"/>
            <column name="brand" type="VARCHAR(255)"/>
            <column name="mode_of_inventory" type="VARCHAR(255)"/>
            <column name="inventory_type" type="VARCHAR(255)"/>
            <column name="inventory_status" type="VARCHAR(255)"/>
            <column name="stocked_quantity" type="FLOAT8"/>
            <column name="available_capacity" type="FLOAT8"/>
            <column name="average_price" type="FLOAT8"/>
            <column name="valuation_method" type="VARCHAR(255)"/>
            <column name="eod_currency" type="VARCHAR(255)"/>
            <column name="eod_uom" type="VARCHAR(255)"/>
            <column name="status" type="VARCHAR(50)"/>
            <column name="storage_name" type="VARCHAR(255)"/>
            <column name="company_name" type="VARCHAR(255)"/>
            <column name="profit_center" type="VARCHAR(255)"/>
            <column name="blending" type="VARCHAR(20)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-56">
        <createTable tableName="xceler_sell_stock">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_sell_stock_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="sell_stock_id" type="VARCHAR(255)"/>
            <column name="transfer_from_id" type="VARCHAR(255)"/>
            <column name="transfer_to_id" type="VARCHAR(255)"/>
            <column name="transferred_quantity" type="FLOAT8"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-57">
        <createTable tableName="xceler_configservice_uomconversion">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_configservice_uomconversion_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="conversion_factor" type="FLOAT8"/>
            <column name="name" type="VARCHAR(255)"/>
            <column name="to_uom" type="VARCHAR(255)"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-58">
        <createTable tableName="xceler_authservice_usermaster">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_authservice_usermaster_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="address" type="VARCHAR(255)"/>
            <column name="city" type="VARCHAR(255)"/>
            <column name="commodity" type="VARCHAR(255)"/>
            <column name="contract_book" type="VARCHAR(255)"/>
            <column name="counter_party" type="VARCHAR(255)"/>
            <column name="country" type="VARCHAR(255)"/>
            <column name="email_address" type="VARCHAR(255)"/>
            <column name="fax" type="VARCHAR(255)"/>
            <column name="first_name" type="VARCHAR(255)"/>
            <column name="is_lock" type="BOOLEAN"/>
            <column name="language" type="VARCHAR(255)"/>
            <column name="last_name" type="VARCHAR(255)"/>
            <column name="legal_entity" type="VARCHAR(255)"/>
            <column name="middle_name" type="VARCHAR(255)"/>
            <column name="password" type="VARCHAR(255)"/>
            <column name="password_expiry_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="profile_center" type="VARCHAR(255)"/>
            <column name="role" type="VARCHAR(255)"/>
            <column name="telephone" type="VARCHAR(255)"/>
            <column name="time_zone" type="VARCHAR(255)"/>
            <column name="user_master_status" type="BOOLEAN"/>
            <column name="user_name" type="VARCHAR(255)"/>
            <column name="user_type" type="TEXT"/>
            <column name="product_subscription" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-59">
        <createTable tableName="xceler_costservice_tradecost">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_costservice_tradecost_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="additional_note" type="VARCHAR(255)"/>
            <column name="cost_currency" type="VARCHAR(255)"/>
            <column name="cost_group" type="VARCHAR(255)"/>
            <column name="cost_id" type="VARCHAR(255)"/>
            <column name="cost_type" type="VARCHAR(255)"/>
            <column name="cost_value" type="FLOAT8"/>
            <column name="counterparty" type="VARCHAR(255)"/>
            <column name="description" type="VARCHAR(255)"/>
            <column name="effective_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="input_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="maturity_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="name" type="VARCHAR(255)"/>
            <column name="payment_due_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="payment_term" type="VARCHAR(255)"/>
            <column name="payment_type" type="VARCHAR(255)"/>
            <column name="percentage_component" type="VARCHAR(255)"/>
            <column name="percentage_payable" type="FLOAT8"/>
            <column name="quantity_option" type="VARCHAR(255)"/>
            <column name="tax_applicable" type="BOOLEAN"/>
            <column name="trade_id" type="VARCHAR(255)"/>
            <column name="trade_uuid" type="VARCHAR(255)"/>
            <column name="type" type="VARCHAR(255)"/>
            <column name="uom" type="VARCHAR(255)"/>
            <column name="cost_for" type="VARCHAR(255)"/>
            <column name="link_to" type="VARCHAR(255)"/>
            <column name="cost_charges_type" type="VARCHAR(255)"/>
            <column name="cost_matrix_id" type="VARCHAR(50)"/>
            <column name="cost_matrix_workflow" type="JSONB"/>
            <column name="quantity" type="FLOAT8"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-60">
        <createTable tableName="treasury_statement_transaction">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="treasury_statement_transaction_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="amount" type="BIGINT"/>
            <column name="credit_debit" type="VARCHAR(255)"/>
            <column name="cs2" type="VARCHAR(255)"/>
            <column name="transaction_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="entry_date" type="VARCHAR(255)"/>
            <column name="account_number" type="VARCHAR(255)"/>
            <column name="info_to_account_owner" type="VARCHAR(255)"/>
            <column name="reference_institution" type="VARCHAR(255)"/>
            <column name="reference_owner" type="VARCHAR(255)"/>
            <column name="statement_line" type="VARCHAR(255)"/>
            <column name="supplementary_details" type="VARCHAR(255)"/>
            <column name="transaction_code" type="VARCHAR(255)"/>
            <column name="statement_id" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-61">
        <createTable tableName="xceler_business_master_bank_master">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="bank_account_details_pk"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="attachments" type="JSONB"/>
            <column name="bank_code" type="VARCHAR(255)"/>
            <column name="bank_description" type="TEXT"/>
            <column name="bank_name" type="VARCHAR(255)"/>
            <column name="city" type="VARCHAR(255)"/>
            <column name="country_of_bank" type="VARCHAR(255)"/>
            <column name="currency" type="JSONB"/>
            <column name="purpose_of_account" type="VARCHAR(255)"/>
            <column name="swift_code" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-62">
        <createTable tableName="treasury_cash_booking">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="treasury_cash_booking_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="account_currency" type="VARCHAR(255)"/>
            <column name="account_id" type="UUID"/>
            <column name="bank_id" type="UUID"/>
            <column name="booked_amount" type="FLOAT8"/>
            <column name="booked_currency" type="VARCHAR(255)"/>
            <column name="booking_id" type="VARCHAR(255)"/>
            <column name="company_id" type="UUID"/>
            <column name="conversion_rate" type="VARCHAR(255)"/>
            <column name="fx_pair" type="VARCHAR(255)"/>
            <column name="fx_rate" type="VARCHAR(255)"/>
            <column name="post_date" type="date"/>
            <column name="reference_number" type="VARCHAR(255)"/>
            <column name="transaction_currency" type="VARCHAR(255)"/>
            <column name="transaction_parent" type="VARCHAR(255)"/>
            <column name="transaction_purpose" type="VARCHAR(255)"/>
            <column name="transaction_source" type="VARCHAR(255)"/>
            <column name="transaction_source_id" type="VARCHAR(255)"/>
            <column name="transaction_source_sub_id" type="VARCHAR(255)"/>
            <column name="transaction_status" type="VARCHAR(255)"/>
            <column name="transaction_type" type="VARCHAR(255)"/>
            <column name="value_date" type="date"/>
            <column name="transaction_id" type="VARCHAR(255)"/>
            <column name="transaction_amount" type="JSONB"/>
            <column name="transaction_cost" type="JSONB"/>
            <column name="account_number" type="VARCHAR(30)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-63">
        <createTable tableName="treasury_account_statement">
            <column name="s_id" type="VARCHAR(255)">
                <constraints nullable="false" primaryKey="true" primaryKeyName="treasury_account_statement_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="account_currency" type="VARCHAR(255)"/>
            <column name="account_number" type="VARCHAR(255)"/>
            <column name="closing_available_balance" type="BIGINT"/>
            <column name="closing_balance" type="BIGINT"/>
            <column name="statement_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="forwarded_balance" type="BIGINT"/>
            <column name="info_to_acc_owner" type="VARCHAR(255)"/>
            <column name="opening_balance" type="BIGINT"/>
            <column name="related_reference" type="VARCHAR(255)"/>
            <column name="statement_number" type="VARCHAR(255)"/>
            <column name="trailer" type="VARCHAR(255)"/>
            <column name="transaction_reference_number" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-64">
        <createTable tableName="xceler_configservice_commodityexternalpackage">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_configservice_commodityexternalpackage_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="capacity" type="FLOAT8"/>
            <column name="capacity_uom" type="VARCHAR(255)"/>
            <column name="commodity_uuid" type="VARCHAR(255)"/>
            <column name="default_value" type="BOOLEAN"/>
            <column name="external_package_name" type="VARCHAR(255)"/>
            <column name="name" type="VARCHAR(255)"/>
            <column name="status" type="BOOLEAN"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-65">
        <createTable tableName="xceler_configservice_commoditypackage">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_configservice_commoditypackage_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="capacity" type="FLOAT8"/>
            <column name="capacity_uom" type="VARCHAR(255)"/>
            <column name="commodity_uuid" type="VARCHAR(255)"/>
            <column name="default_value" type="BOOLEAN"/>
            <column name="internal_package_name" type="VARCHAR(255)"/>
            <column name="name" type="VARCHAR(255)"/>
            <column name="status" type="BOOLEAN"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-66">
        <createTable tableName="treasury_account_balance">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="treasury_account_balance_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="account_number" type="VARCHAR(50)"/>
            <column name="bank_code" type="VARCHAR(50)"/>
            <column name="available_balance" type="FLOAT8"/>
            <column name="balance_date" type="date"/>
            <column name="account_currency" type="VARCHAR(50)"/>
            <column name="company_currency" type="VARCHAR(50)"/>
            <column name="balance_company" type="FLOAT8"/>
            <column name="prev_available_balance" type="FLOAT8"/>
            <column name="prev_balance_date" type="date"/>
            <column name="company_code" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-67">
        <createTable tableName="xceler_configservice_company">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_configservice_company_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="address" type="VARCHAR(255)"/>
            <column name="currency" type="VARCHAR(255)"/>
            <column name="day_light_saving" type="BOOLEAN"/>
            <column name="description" type="TEXT"/>
            <column name="fax" type="VARCHAR(255)"/>
            <column name="is_tradeable" type="BOOLEAN"/>
            <column name="logo" type="BYTEA"/>
            <column name="logo_file_name" type="VARCHAR(255)"/>
            <column name="logo_file_type" type="VARCHAR(255)"/>
            <column name="name" type="VARCHAR(255)"/>
            <column name="parent" type="VARCHAR(255)"/>
            <column name="status" type="BOOLEAN"/>
            <column name="telephone" type="VARCHAR(255)"/>
            <column name="time_zone" type="VARCHAR(255)"/>
            <column name="website" type="VARCHAR(255)"/>
            <column name="code" type="VARCHAR(255)"/>
            <column name="baseuom" type="VARCHAR(255)"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="external_company_code" type="VARCHAR(255)"/>
            <column name="external_company_code2" type="VARCHAR(255)"/>
            <column name="external_company_code3" type="VARCHAR(255)"/>
            <column name="external_company_code4" type="VARCHAR(255)"/>
            <column name="co_reg_no" type="VARCHAR(255)"/>
            <column name="service_tax_no" type="VARCHAR(255)"/>
            <column name="country_of_registration" type="VARCHAR(255)"/>
            <column name="tax_identification_number" type="VARCHAR(50)"/>
            <column name="identification_type" type="VARCHAR(255)"/>
            <column name="identification_issuing_authority" type="VARCHAR(255)"/>
            <column name="identification_no" type="VARCHAR(50)"/>
            <column name="business_activity_code" type="VARCHAR(50)"/>
            <column name="business_activity_description" type="TEXT"/>
            <column name="email" type="VARCHAR(50)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-68">
        <createTable tableName="xceler_eodservice_fxmarketdata">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_eodservice_fxmarketdata_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="fx_index_pair" type="VARCHAR(255)"/>
            <column name="fx_index_rate" type="FLOAT8"/>
            <column name="fx_trade_type" type="VARCHAR(255)"/>
            <column name="name" type="VARCHAR(255)"/>
            <column name="price_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="term_structure" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-69">
        <createTable tableName="xceler_approval_service_approval_workflow_config">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="pk_xceler_approval_service_approval_workflow_config"/>
            </column>
            <column name="username" type="VARCHAR(255)"/>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="workflow_name" type="VARCHAR(255)"/>
            <column name="trigger_event" type="VARCHAR(255)"/>
            <column name="approval_span" type="VARCHAR(255)"/>
            <column name="post_action" type="VARCHAR(255)"/>
            <column name="is_system" type="BOOLEAN"/>
            <column name="is_active" type="BOOLEAN"/>
            <column name="workflow_steps" type="JSONB"/>
            <column name="negative_post_action" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-70">
        <createTable tableName="xceler_approval_service_approval_workflow">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="pk_xceler_approval_service_approval_workflow"/>
            </column>
            <column name="username" type="VARCHAR(255)"/>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="workflow_config_id" type="UUID"/>
            <column name="reference_type" type="VARCHAR(255)"/>
            <column name="reference_id" type="VARCHAR(255)"/>
            <column name="current_status" type="VARCHAR(255)"/>
            <column name="current_step" type="INTEGER"/>
            <column name="role" type="VARCHAR(255)"/>
            <column name="workflow_steps" type="JSONB"/>
            <column name="is_void" type="BOOLEAN"/>
            <column name="workflow_name" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-71">
        <createTable tableName="xceler_physicaltrade_inter_company_trade">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_physicaltrade_inter_company_trade_pkey"/>
            </column>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="settlement_data" type="JSONB"/>
            <column name="settlement_type" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-72">
        <createTable tableName="xceler_configservice_counterparty">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_configservice_counterparty_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="address" type="VARCHAR(255)"/>
            <column name="counterparty_type_code" type="VARCHAR(255)"/>
            <column name="currency" type="VARCHAR(255)"/>
            <column name="day_light_saving" type="BOOLEAN"/>
            <column name="description" type="TEXT"/>
            <column name="fax" type="VARCHAR(255)"/>
            <column name="finance_controller_approval" type="BOOLEAN"/>
            <column name="financing_agent" type="VARCHAR(255)"/>
            <column name="is_tradeable" type="BOOLEAN"/>
            <column name="kyc_status" type="BOOLEAN"/>
            <column name="logo" type="BYTEA"/>
            <column name="logo_file_name" type="VARCHAR(255)"/>
            <column name="logo_file_type" type="VARCHAR(255)"/>
            <column name="name" type="VARCHAR(255)"/>
            <column name="parent" type="VARCHAR(255)"/>
            <column name="status" type="BOOLEAN"/>
            <column name="telephone" type="VARCHAR(255)"/>
            <column name="time_zone" type="VARCHAR(255)"/>
            <column name="website" type="VARCHAR(255)"/>
            <column name="code" type="VARCHAR(255)"/>
            <column name="country_of_registration" type="VARCHAR(255)"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="counterparty_external_reference" type="VARCHAR(255)"/>
            <column name="counterparty_external_reference2" type="VARCHAR(255)"/>
            <column name="counterparty_external_reference3" type="VARCHAR(255)"/>
            <column name="counterparty_external_reference4" type="VARCHAR(255)"/>
            <column name="request_type" type="VARCHAR(255)"/>
            <column name="tax_identification_number" type="VARCHAR(50)"/>
            <column name="business_activity_code" type="VARCHAR(50)"/>
            <column name="business_activity_description" type="TEXT"/>
            <column name="service_tax_no" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-73">
        <createTable tableName="xceler_tradeplanningservice_stockplan">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_tradeplanningservice_stockplan_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="planning_id" type="VARCHAR(255)"/>
            <column name="stock_created_on" type="TIMESTAMP WITHOUT TIME ZONE">
                <constraints nullable="false"/>
            </column>
            <column name="stock_plan_type" type="INTEGER"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-74">
        <createTable tableName="xceler_eodervice_futuretradeeodrawdata">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_eodervice_futuretradeeodrawdata_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="brokerage_fee" type="FLOAT8"/>
            <column name="clearing_broker" type="VARCHAR(255)"/>
            <column name="clearing_broker_account" type="VARCHAR(255)"/>
            <column name="clearing_fee" type="FLOAT8"/>
            <column name="commodity" type="VARCHAR(255)"/>
            <column name="company" type="VARCHAR(255)"/>
            <column name="counterparty" type="VARCHAR(255)"/>
            <column name="currency" type="VARCHAR(255)"/>
            <column name="exchange" type="VARCHAR(255)"/>
            <column name="exchange_for" type="VARCHAR(255)"/>
            <column name="execution_broker" type="VARCHAR(255)"/>
            <column name="expired_status" type="VARCHAR(255)"/>
            <column name="expiry_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="expiry_month" type="VARCHAR(255)"/>
            <column name="future_index" type="VARCHAR(255)"/>
            <column name="future_price" type="FLOAT8"/>
            <column name="future_price_lots" type="FLOAT8"/>
            <column name="lot" type="FLOAT8"/>
            <column name="lot_size" type="FLOAT8"/>
            <column name="market_price" type="FLOAT8"/>
            <column name="match_lot" type="FLOAT8"/>
            <column name="mtm_index" type="VARCHAR(255)"/>
            <column name="netted_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="netting_status" type="VARCHAR(255)"/>
            <column name="profitcenter" type="VARCHAR(255)"/>
            <column name="quantity_lot" type="FLOAT8"/>
            <column name="quantitymt" type="FLOAT8"/>
            <column name="tag" type="VARCHAR(255)"/>
            <column name="trade_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="trade_id" type="VARCHAR(255)"/>
            <column name="trade_price" type="FLOAT8"/>
            <column name="trade_transaction_type" type="INTEGER"/>
            <column name="trade_type" type="VARCHAR(255)"/>
            <column name="trader_name" type="VARCHAR(255)"/>
            <column name="uom" type="VARCHAR(255)"/>
            <column name="maxmtmpnl" type="FLOAT8"/>
            <column name="maxmtmpnl_update_on" type="TIMESTAMP WITHOUT TIME ZONE"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-75">
        <createTable tableName="xceler_eodservice_futuretradeeodpublished">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_eodservice_futuretradeeodpublished_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="buy_open_position" type="FLOAT8"/>
            <column name="close_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="closed_pnl" type="FLOAT8"/>
            <column name="closed_positon" type="FLOAT8"/>
            <column name="commodity" type="VARCHAR(255)"/>
            <column name="company" type="VARCHAR(255)"/>
            <column name="counterparty" type="VARCHAR(255)"/>
            <column name="eod_currency" type="VARCHAR(255)"/>
            <column name="eod_job_name" type="VARCHAR(255)"/>
            <column name="eod_run_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="eoduom" type="VARCHAR(255)"/>
            <column name="mtm_pnl" type="FLOAT8"/>
            <column name="profitcenter" type="VARCHAR(255)"/>
            <column name="raw_data_id" type="INTEGER"/>
            <column name="sell_open_position" type="FLOAT8"/>
            <column name="trade_id" type="VARCHAR(255)"/>
            <column name="prev_mtm_pnl" type="FLOAT8"/>
            <column name="prev_open_buy_position" type="FLOAT8"/>
            <column name="prev_open_sell_position" type="FLOAT8"/>
            <column name="prev_realised_pnl" type="FLOAT8"/>
            <column name="prev_realised_postion" type="FLOAT8"/>
            <column name="prev_closed_postion" type="FLOAT8"/>
            <column name="prev_closed_pnl" type="FLOAT8"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-76">
        <createTable tableName="xceler_futuretradeservice_futurenetting">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_futuretradeservice_futurenetting_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="broker" type="VARCHAR(255)"/>
            <column name="commodity" type="VARCHAR(255)"/>
            <column name="company" type="VARCHAR(255)"/>
            <column name="exchange" type="VARCHAR(255)"/>
            <column name="expiry_month" type="VARCHAR(255)"/>
            <column name="netted_lots" type="FLOAT8"/>
            <column name="netting_id" type="VARCHAR(255)"/>
            <column name="profitcenter" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-77">
        <createTable tableName="xceler_futuretradeservice_futurenettingdetails">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_futuretradeservice_futurenettingdetails_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="match_lots" type="FLOAT8"/>
            <column name="netted_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="netting_id" type="VARCHAR(255)"/>
            <column name="netting_price" type="FLOAT8"/>
            <column name="netting_uuid" type="VARCHAR(255)"/>
            <column name="trade_id" type="VARCHAR(255)"/>
            <column name="trade_transaction_type" type="INTEGER"/>
            <column name="trade_uuid" type="VARCHAR(255)"/>
            <column name="long_trade_id" type="VARCHAR(255)"/>
            <column name="short_trade_id" type="VARCHAR(255)"/>
            <column name="realized_pnl" type="FLOAT8"/>
            <column name="sequence" type="INTEGER"/>
            <column name="long_price" type="FLOAT8"/>
            <column name="short_price" type="FLOAT8"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-78">
        <createTable tableName="xceler_eodservice_physicaltraderawdata">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_eodservice_physicaltraderawdata_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="brand" type="VARCHAR(255)"/>
            <column name="broker" type="VARCHAR(255)"/>
            <column name="commodity" type="VARCHAR(255)"/>
            <column name="company" type="VARCHAR(255)"/>
            <column name="contract_term" type="VARCHAR(255)"/>
            <column name="counterparty" type="VARCHAR(255)"/>
            <column name="delivery_end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="delivery_start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="discharge_location" type="VARCHAR(255)"/>
            <column name="external_reference" type="VARCHAR(255)"/>
            <column name="factory" type="VARCHAR(255)"/>
            <column name="future_contract_month" type="VARCHAR(255)"/>
            <column name="future_index" type="VARCHAR(255)"/>
            <column name="fxrate" type="FLOAT8"/>
            <column name="grade" type="VARCHAR(255)"/>
            <column name="incoterm" type="VARCHAR(255)"/>
            <column name="load_location" type="VARCHAR(255)"/>
            <column name="location" type="VARCHAR(255)"/>
            <column name="origin" type="VARCHAR(255)"/>
            <column name="payment_term" type="VARCHAR(255)"/>
            <column name="percentage" type="FLOAT8"/>
            <column name="period_end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="period_start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="price" type="FLOAT8"/>
            <column name="price_currency" type="VARCHAR(255)"/>
            <column name="price_type" type="VARCHAR(255)"/>
            <column name="price_uom" type="VARCHAR(255)"/>
            <column name="profitcenter" type="VARCHAR(255)"/>
            <column name="prov_fx_rate" type="FLOAT8"/>
            <column name="prov_price" type="FLOAT8"/>
            <column name="prov_price_currency" type="VARCHAR(255)"/>
            <column name="prov_price_uom" type="VARCHAR(255)"/>
            <column name="provisional_price_type" type="VARCHAR(255)"/>
            <column name="provisional_pricing" type="BOOLEAN"/>
            <column name="quantity" type="FLOAT8"/>
            <column name="quantity_periodicity" type="VARCHAR(255)"/>
            <column name="quantity_tolerance_type" type="VARCHAR(255)"/>
            <column name="quantity_uom" type="VARCHAR(255)"/>
            <column name="season" type="VARCHAR(255)"/>
            <column name="sell_profit_center" type="VARCHAR(255)"/>
            <column name="settlement_currency" type="VARCHAR(255)"/>
            <column name="tolerance" type="VARCHAR(255)"/>
            <column name="total_contract_qty" type="FLOAT8"/>
            <column name="trade_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="trade_id" type="VARCHAR(255)"/>
            <column name="trade_transaction_type" type="INTEGER"/>
            <column name="trade_type" type="VARCHAR(255)"/>
            <column name="trader_name" type="VARCHAR(255)"/>
            <column name="commodity_code" type="VARCHAR(255)"/>
            <column name="company_code" type="VARCHAR(255)"/>
            <column name="profitcenter_code" type="VARCHAR(255)"/>
            <column name="internal_profitcenter_code" type="VARCHAR(255)"/>
            <column name="counterparty_code" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-79">
        <createTable tableName="xceler_basedata_uomconversionbase">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_basedata_uomconversionbase_pkey"/>
            </column>
            <column name="conversion_factor" type="FLOAT8"/>
            <column name="name" type="VARCHAR(255)"/>
            <column name="to_uom" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-80">
        <createTable tableName="xceler_pricingservice_advancedtradeprice">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_pricingservice_advancedtradeprice_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="price_line_id" type="VARCHAR(255)"/>
            <column name="obligation_id" type="VARCHAR(255)"/>
            <column name="trade_price_type" type="VARCHAR(255)"/>
            <column name="trade_quantity" type="FLOAT8"/>
            <column name="trade_quantity_uom" type="VARCHAR(255)"/>
            <column name="price_status" type="VARCHAR(255)"/>
            <column name="priced_quantity" type="FLOAT8"/>
            <column name="trade_price" type="FLOAT8"/>
            <column name="trade_price_currency" type="VARCHAR(255)"/>
            <column name="trade_price_uom" type="VARCHAR(255)"/>
            <column name="provisional_price" type="FLOAT8"/>
            <column name="fx_rate" type="FLOAT8"/>
            <column name="trade_settlement_currency" type="VARCHAR(255)"/>
            <column name="trade_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="balance_quantity" type="FLOAT8"/>
            <column name="average_price" type="FLOAT8"/>
            <column name="priced_lot" type="FLOAT8"/>
            <column name="balance_lot" type="FLOAT8"/>
            <column name="trade_type" type="VARCHAR(255)"/>
            <column name="commodity" type="VARCHAR(255)"/>
            <column name="trade_transaction_type" type="INTEGER"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-81">
        <createTable tableName="xceler_pricingservice_pricecomponent">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_pricingservice_pricecomponent_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="pricing_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="price_line_id" type="VARCHAR(255)"/>
            <column name="obligation_id" type="VARCHAR(255)"/>
            <column name="component" type="VARCHAR(255)"/>
            <column name="price_line_type" type="VARCHAR(255)"/>
            <column name="price_formula" type="VARCHAR(255)"/>
            <column name="price_index" type="BYTEA"/>
            <column name="price" type="FLOAT8"/>
            <column name="priced_quantity" type="FLOAT8"/>
            <column name="allocated_quantity" type="FLOAT8"/>
            <column name="pricing_currency" type="VARCHAR(255)"/>
            <column name="pricing_uom" type="VARCHAR(255)"/>
            <column name="fx_rate" type="FLOAT8"/>
            <column name="flexible_fx_rate" type="BOOLEAN"/>
            <column name="is_provisional" type="BOOLEAN"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-82">
        <createTable tableName="xceler_physicaltradeservice_tradeobligation">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_physicaltradeservice_tradeobligation_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="brand" type="VARCHAR(255)"/>
            <column name="broker" type="VARCHAR(255)"/>
            <column name="commodity" type="VARCHAR(255)"/>
            <column name="company" type="VARCHAR(255)"/>
            <column name="counterparty" type="VARCHAR(255)"/>
            <column name="crop_origin" type="VARCHAR(255)"/>
            <column name="delivery_end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="delivery_start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="grade" type="VARCHAR(255)"/>
            <column name="incoterm" type="VARCHAR(255)"/>
            <column name="internal_profitcenter" type="VARCHAR(255)"/>
            <column name="location" type="VARCHAR(255)"/>
            <column name="planned_quantity" type="FLOAT8"/>
            <column name="price_type" type="VARCHAR(255)"/>
            <column name="pricing_status" type="VARCHAR(255)"/>
            <column name="profitcenter" type="VARCHAR(255)"/>
            <column name="quantityuom" type="VARCHAR(255)"/>
            <column name="trade_date_time" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="trade_id" type="VARCHAR(255)"/>
            <column name="trade_obligation_id" type="VARCHAR(255)"/>
            <column name="trade_obligation_state" type="INTEGER"/>
            <column name="trade_price" type="FLOAT8"/>
            <column name="trade_price_currency" type="VARCHAR(255)"/>
            <column name="trade_price_uom" type="VARCHAR(255)"/>
            <column name="trade_quantity" type="FLOAT8"/>
            <column name="trade_status" type="VARCHAR(255)"/>
            <column name="trade_transaction_type" type="INTEGER"/>
            <column name="trade_uuid" type="VARCHAR(255)"/>
            <column name="no_of_units" type="FLOAT8"/>
            <column name="load_location" type="VARCHAR(255)"/>
            <column name="discharge_location" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-83">
        <createTable tableName="xceler_eodservice_dailypublishpnldrawdown">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_eodservice_dailypublishpnldrawdown_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="limit_id" type="VARCHAR(255)"/>
            <column name="maxmtmpnl" type="FLOAT8"/>
            <column name="maxmtmpnl_update_on" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="new_max_pnl" type="FLOAT8"/>
            <column name="pnl_chnage" type="FLOAT8"/>
            <column name="todaysmtmpnl" type="FLOAT8"/>
            <column name="value_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-84">
        <createTable tableName="xceler_eodservice_marketlimitrawdata">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_eodservice_marketlimitrawdata_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="commodity" type="VARCHAR(255)"/>
            <column name="drawdown_limits" type="VARCHAR(255)"/>
            <column name="limit_id" type="VARCHAR(255)"/>
            <column name="name" type="VARCHAR(255)"/>
            <column name="profitcenter" type="VARCHAR(255)"/>
            <column name="trade_type" type="VARCHAR(255)"/>
            <column name="trader_name" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-85">
        <createTable tableName="xceler_pricingservice_priceallocation">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_pricingservice_priceallocation_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="currency_uom" type="VARCHAR(255)"/>
            <column name="obligation_class_name" type="VARCHAR(255)"/>
            <column name="obligation_id" type="VARCHAR(255)"/>
            <column name="price" type="FLOAT8"/>
            <column name="price_allocation_id" type="VARCHAR(255)"/>
            <column name="price_currency" type="VARCHAR(255)"/>
            <column name="price_line_id" type="VARCHAR(255)"/>
            <column name="quantity" type="FLOAT8"/>
            <column name="quantity_uom" type="VARCHAR(255)"/>
            <column name="trade_id" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-86">
        <createTable tableName="xceler_riskservice_physicalcommodityprice">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_riskservice_physicalcommodityprice_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="name" type="VARCHAR(255)"/>
            <column name="physical_comm_end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="physical_comm_price_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="physical_comm_start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="px_high" type="FLOAT8"/>
            <column name="px_low" type="FLOAT8"/>
            <column name="px_open" type="FLOAT8"/>
            <column name="settlement_price" type="FLOAT8"/>
            <column name="shipment_month" type="VARCHAR(255)"/>
            <column name="uom" type="VARCHAR(255)"/>
            <column name="currency" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-87">
        <createTable tableName="xceler_physicaltradeservice_dealslip">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_physicaltradeservice_dealslip_pkey"/>
            </column>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="deal_id" type="VARCHAR(255)"/>
            <column name="trade_date_time" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="trade_id" type="VARCHAR(255)"/>
            <column name="trade_transaction_type" type="INTEGER"/>
            <column name="commodity" type="VARCHAR(255)"/>
            <column name="brand" type="VARCHAR(255)"/>
            <column name="grade" type="VARCHAR(255)"/>
            <column name="counterparty" type="VARCHAR(255)"/>
            <column name="quantity" type="JSONB"/>
            <column name="price_type" type="VARCHAR(255)"/>
            <column name="trade_price" type="JSONB"/>
            <column name="incoterm" type="VARCHAR(255)"/>
            <column name="shipment_month" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="port" type="VARCHAR(255)"/>
            <column name="company" type="VARCHAR(255)"/>
            <column name="profitcenter" type="VARCHAR(255)"/>
            <column name="trader_name" type="VARCHAR(255)"/>
            <column name="paymentterm" type="VARCHAR(255)"/>
            <column name="remarks" type="VARCHAR(255)"/>
            <column name="trade_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="fob" type="FLOAT8"/>
            <column name="frieght" type="FLOAT8"/>
            <column name="insurance" type="FLOAT8"/>
            <column name="commission" type="FLOAT8"/>
            <column name="premium_disc" type="FLOAT8"/>
            <column name="rollover" type="FLOAT8"/>
            <column name="others" type="FLOAT8"/>
            <column name="provisional_price" type="JSONB"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-88">
        <createTable tableName="xceler_configservice_companybankaccount">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_configservice_companybankaccount_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="account_currency" type="VARCHAR(255)"/>
            <column name="account_number" type="VARCHAR(255)"/>
            <column name="bank_address" type="VARCHAR(255)"/>
            <column name="bank_name" type="VARCHAR(255)"/>
            <column name="company_uuid" type="VARCHAR(255)"/>
            <column name="default_value" type="BOOLEAN"/>
            <column name="name" type="VARCHAR(255)"/>
            <column name="notice_of_assignment" type="TEXT"/>
            <column name="payment_method" type="VARCHAR(255)"/>
            <column name="remit_to_description" type="TEXT"/>
            <column name="status" type="BOOLEAN"/>
            <column name="swift_code" type="VARCHAR(255)"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-89">
        <createTable tableName="xceler_configservice_commodity">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_configservice_commodity_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="brand" type="BOOLEAN"/>
            <column name="description" type="TEXT"/>
            <column name="grade" type="BOOLEAN"/>
            <column name="hs_code" type="VARCHAR(255)"/>
            <column name="incoterm" type="VARCHAR(255)"/>
            <column name="is_tradeable" type="BOOLEAN"/>
            <column name="name" type="VARCHAR(255)"/>
            <column name="origin" type="BOOLEAN"/>
            <column name="packaging" type="BOOLEAN"/>
            <column name="parent" type="VARCHAR(255)"/>
            <column name="season" type="BOOLEAN"/>
            <column name="status" type="BOOLEAN"/>
            <column name="trade_type" type="VARCHAR(255)"/>
            <column name="uom" type="VARCHAR(255)"/>
            <column name="uom_to_mass_conversion" type="FLOAT8"/>
            <column name="uom_type" type="VARCHAR(255)"/>
            <column name="code" type="VARCHAR(255)"/>
            <column name="link_to" type="VARCHAR(255)"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="commodity_external_code" type="VARCHAR(255)"/>
            <column name="commodity_external_code2" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-90">
        <createTable tableName="xceler_future_pricing_link">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_future_pricing_link_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="obligation_id" type="VARCHAR(255)"/>
            <column name="priceline_id" type="VARCHAR(255)"/>
            <column name="future_trade_id" type="VARCHAR(255)"/>
            <column name="future_trade_transaction_type" type="INTEGER"/>
            <column name="priced_lots" type="FLOAT8"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-91">
        <createTable tableName="xceler_treasury_credit_utilization">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_treasury_credit_utilization_pkey"/>
            </column>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="facility_code" type="VARCHAR(255)"/>
            <column name="product_code" type="VARCHAR(255)"/>
            <column name="participant_code" type="VARCHAR(255)"/>
            <column name="utilization" type="FLOAT8"/>
            <column name="currency" type="VARCHAR(25)"/>
            <column name="utilization_date" type="date"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-92">
        <createTable tableName="ois_campaign">
            <column name="campaign_name" type="VARCHAR(255)"/>
            <column name="lot_number" type="VARCHAR(255)"/>
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="ois_campaign_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="comments" type="VARCHAR(255)"/>
            <column name="counterparty_approval" type="VARCHAR(255)"/>
            <column name="description" type="VARCHAR(255)"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="finance_approval" type="VARCHAR(255)"/>
            <column name="location" type="VARCHAR(255)"/>
            <column name="stage" type="VARCHAR(255)"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="status" type="BOOLEAN">
                <constraints nullable="false"/>
            </column>
            <column name="tag" type="VARCHAR(255)"/>
            <column name="trader_approval" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-93">
        <createTable tableName="xceler_configservice_simple_processing_strategy">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_configservice_simple_processing_strategy_pkey"/>
            </column>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="strategy_id" type="VARCHAR(255)">
                <constraints nullable="false"/>
            </column>
            <column name="strategy_name" type="VARCHAR(255)"/>
            <column name="strategy_type" type="VARCHAR(255)"/>
            <column name="strategy_data" type="JSONB"/>
            <column name="status" type="VARCHAR(50)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-94">
        <createTable tableName="xceler_e_invoice_tracking">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_e_invoice_tracking_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="invoice_details" type="JSONB"/>
            <column name="invoice_number" type="VARCHAR(100)"/>
            <column name="internal_request_id" type="VARCHAR(50)"/>
            <column name="status_history" type="JSONB"/>
            <column name="submission_id" type="VARCHAR(100)"/>
            <column name="submission_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="e_invoice_type_code" type="VARCHAR(100)"/>
            <column name="e_invoice_document_uuid" type="VARCHAR(100)"/>
            <column name="e_invoice_valid_long_id" type="VARCHAR(255)"/>
            <column name="e_invoice_validation_link" type="VARCHAR(255)"/>
            <column name="e_invoice_doc" type="BYTEA"/>
            <column name="lasteinvoice_validation_check_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="e_invoice_validation_success_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="e_invoice_document_generation_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="e_invoice_erp_update_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="e_invoice_cancellation_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="e_invoice_tracking_status" type="VARCHAR(50)"/>
            <column name="e_invoice_document_url" type="TEXT"/>
            <column name="company" type="VARCHAR(50)"/>
            <column name="counterparty" type="VARCHAR(50)"/>
            <column name="request_for_rejection_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="submission_channel" type="VARCHAR(255)"/>
            <column name="invoice_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="invoice_type" type="VARCHAR(255)"/>
            <column name="status" type="VARCHAR(255)"/>
            <column name="old_invoice_number" type="VARCHAR(255)"/>
            <column name="erp_posting_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="contract_id" type="VARCHAR(255)"/>
            <column name="gl_account_code" type="VARCHAR(255)"/>
            <column name="external_system_invoice_id" type="VARCHAR(255)"/>
            <column name="counterparty_tin_number" type="VARCHAR(255)"/>
            <column name="counterparty_country" type="VARCHAR(255)"/>
            <column name="incoterm" type="VARCHAR(255)"/>
            <column name="message_sap_doc" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-95">
        <createIndex indexName="account_details_account_no_idx" tableName="xceler_business_master_bank_account" unique="true">
            <column name="account_no"/>
            <column name="tenant_id"/>
        </createIndex>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-96">
        <createView fullDefinition="false" viewName="vw_bank_account">SELECT tst.uuid AS statement_uuid,
    ad.account_no AS account_number,
    tst.amount,
    tst.transaction_date,
    tst.credit_debit,
    tst.info_to_account_owner,
    tst.transaction_code,
    bad.bank_name
   FROM ((taomish.treasury_statement_transaction tst
     LEFT JOIN taomish.xceler_business_master_bank_account ad ON (((ad.account_no)::text = (tst.account_number)::text)))
     LEFT JOIN taomish.xceler_business_master_bank_master bad ON ((bad.uuid = (ad.bank_account_id)::uuid)))
  WHERE ((tst.account_number)::text IN ( SELECT DISTINCT tst.account_number
           FROM taomish.xceler_business_master_bank_account adt))
  ORDER BY tst.account_number;</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-97">
        <createView fullDefinition="false" viewName="vw_cb_and_transactions">SELECT a.source,
    a.account_number,
    a.amount,
    a.transaction_date,
    a.credit_debit,
    ad.account_currency,
    ad.bank_code
   FROM (( SELECT 'TXN'::text AS source,
            treasury_statement_transaction.account_number,
            treasury_statement_transaction.amount,
            treasury_statement_transaction.transaction_date,
            treasury_statement_transaction.credit_debit
           FROM taomish.treasury_statement_transaction
        UNION ALL
         SELECT 'CB'::text AS source,
            tcb.account_number,
            tcb.booked_amount,
            tcb.value_date,
            tcb.transaction_type
           FROM taomish.treasury_cash_booking tcb) a
     JOIN taomish.xceler_business_master_bank_account ad ON (((a.account_number)::text = (ad.account_no)::text)));</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-98">
        <createView fullDefinition="false" viewName="vw_latest_statements">SELECT a.account_number,
    a.account_currency,
    a.closing_available_balance,
    a.statement_date,
    a.bank_code,
    a.rn
   FROM ( SELECT tas.account_number,
            tas.account_currency,
            tas.closing_available_balance,
            tas.statement_date,
            ad.bank_code,
            row_number() OVER (PARTITION BY ad.account_no ORDER BY tas.statement_date DESC) AS rn
           FROM (taomish.treasury_account_statement tas
             JOIN taomish.xceler_business_master_bank_account ad ON (((tas.account_number)::text = (ad.account_no)::text)))) a
  WHERE (a.rn = 1);</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-99">
        <createView fullDefinition="false" viewName="vw_treasury_company_account_bank_balance">SELECT ad.account_no,
    xcc.code,
    bad.bank_name,
    bad.bank_code,
    tab.available_balance,
    xcc.currency,
    ad.account_currency,
    bad.currency AS bank_currency,
        CASE
            WHEN ((xcc.currency)::text = (ad.account_currency)::text) THEN (1)::double precision
            ELSE
            CASE
                WHEN (concat(ad.account_currency, '/', xcc.currency) = (xef.fx_index_pair)::text) THEN xef.fx_index_rate
                ELSE ((1)::double precision / xef.fx_index_rate)
            END
        END AS fx_index_rate,
    tab.prev_available_balance,
    tab.balance_company,
    tab.balance_date,
    xcc.tenant_id,
    row_number() OVER (ORDER BY ad.account_no) AS key
   FROM ((((taomish.xceler_configservice_company xcc
     LEFT JOIN taomish.xceler_business_master_bank_account ad ON ((((xcc.code)::text = (ad.company_code)::text) AND ((xcc.tenant_id)::text = (ad.tenant_id)::text))))
     LEFT JOIN taomish.xceler_business_master_bank_master bad ON ((((ad.bank_code)::text = (bad.bank_code)::text) AND ((ad.tenant_id)::text = (bad.tenant_id)::text))))
     LEFT JOIN taomish.treasury_account_balance tab ON ((((tab.account_number)::text = (ad.account_no)::text) AND ((tab.tenant_id)::text = (ad.tenant_id)::text))))
     LEFT JOIN ( SELECT DISTINCT ON (xefx.fx_index_pair) xefx.fx_index_pair,
            xefx.fx_index_rate,
            xefx.tenant_id
           FROM taomish.xceler_eodservice_fxmarketdata xefx
          ORDER BY xefx.fx_index_pair, xefx.price_date DESC) xef ON ((((concat(ad.account_currency, '/', xcc.currency) = (xef.fx_index_pair)::text) OR (concat(xcc.currency, '/', (ad.account_currency)::text) = (xef.fx_index_pair)::text)) AND ((xcc.tenant_id)::text = (xef.tenant_id)::text))))
  ORDER BY xcc.code;</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-100">
        <createView fullDefinition="false" viewName="vw_xceler_bank_company_account">SELECT account_company_fx.account_currency,
    account_company_fx.account_no,
    account_company_fx.company_currency,
    account_company_fx.company_code,
    account_company_fx.bank_code,
    account_company_fx.fx_index_pair,
    account_company_fx.bank_name,
    account_company_fx.fx_index_rate,
    account_company_fx.price_date,
    account_company_fx.tenant_id,
    account_company_fx.rn
   FROM ( SELECT acc.account_currency,
            acc.account_no,
            xcc.currency AS company_currency,
            xcc.code AS company_code,
            bad.bank_code,
            xef.fx_index_pair,
            bad.bank_name,
                CASE
                    WHEN ((xcc.currency)::text = (acc.account_currency)::text) THEN (1)::double precision
                    ELSE xef.fx_index_rate
                END AS fx_index_rate,
            xef.price_date,
            xcc.tenant_id,
            row_number() OVER (PARTITION BY acc.account_no, xef.fx_index_pair ORDER BY xef.price_date DESC) AS rn
           FROM (((taomish.xceler_business_master_bank_account acc
             JOIN taomish.xceler_configservice_company xcc ON (((acc.company_code)::text = (xcc.code)::text)))
             LEFT JOIN taomish.xceler_business_master_bank_master bad ON (((bad.bank_code)::text = (acc.bank_code)::text)))
             LEFT JOIN taomish.xceler_eodservice_fxmarketdata xef ON (((((acc.account_currency)::text || '/'::text) || (xcc.currency)::text) = (xef.fx_index_pair)::text)))) account_company_fx
  WHERE (account_company_fx.rn = 1);</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-101">
        <createIndex indexName="bank_limit_facility_code" tableName="xceler_business_master_bank_limit">
            <column name="facility_code"/>
        </createIndex>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-102">
        <createIndex indexName="bank_limit_product_info" tableName="xceler_business_master_bank_limit_product_info">
            <column name="product"/>
        </createIndex>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-103">
        <createIndex indexName="bank_limit_product_info_participant" tableName="xceler_business_master_product_info_participant_info">
            <column name="participant"/>
        </createIndex>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-104">
        <createIndex indexName="constraint_business_master_cost_matrix_template" tableName="xceler_configservice_cost_matrix" unique="true">
            <column computed="true" name="(level = 0)"/>
            <column computed="true" name="(level = 0)"/>
            <column computed="true" name="(level = 0)"/>
        </createIndex>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-105">
        <addUniqueConstraint columnNames="code, tenant_id" constraintName="constraint_business_master_cost_matrix_code" tableName="xceler_configservice_cost_matrix"/>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-106">
        <addUniqueConstraint columnNames="tenant_id, template_id, incoterm, trade_type, transaction_type, commodity, load_port, unload_port" constraintName="constraint_business_master_cost_matrix_rule" tableName="xceler_configservice_cost_matrix"/>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-107">
        <createIndex indexName="ctrm_audit_log_created_by" tableName="ctrm_audit_log">
            <column computed="true" name="((payload -&gt;&gt; 'createdBy'::text))"/>
        </createIndex>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-108">
        <createIndex indexName="ctrm_audit_log_trade_id" tableName="ctrm_audit_log">
            <column computed="true" name="((payload -&gt;&gt; 'tradeId'::text))"/>
        </createIndex>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-109">
        <createIndex indexName="idx_parent_id" tableName="ctrm_audit_log">
            <column name="parent_id"/>
        </createIndex>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-110">
        <createIndex indexName="ctrm_audit_log_upper_trade_idx" tableName="ctrm_audit_log">
            <column computed="true" name="upper((payload -&gt;&gt; 'tradeId'::text))"/>
        </createIndex>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-111">
        <createIndex indexName="fkp19sd7krxqsmuqu7k7gtkg4ni" tableName="xceler_stockservice_commoditystockbuildhistory">
            <column name="uuid"/>
        </createIndex>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-112">
        <addUniqueConstraint columnNames="commodity_history_uuid" constraintName="uk_k2thkpwqaeh48andqr8nh1svf" tableName="xceler_stockservice_commoditystockbuildhistory"/>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-113">
        <addUniqueConstraint columnNames="commodity_history_uuid" constraintName="xceler_stockservice_commoditystockbu_commodity_history_uuid_key" tableName="xceler_stockservice_commoditystockbuildhistory"/>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-114">
        <createIndex indexName="flyway_schema_history_s_idx" tableName="flyway_schema_history">
            <column name="success"/>
        </createIndex>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-115">
        <createIndex indexName="unique-view" tableName="db_dependant_object_ddl" unique="true">
            <column name="reference_id"/>
            <column name="view_name"/>
        </createIndex>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-116">
        <createView fullDefinition="false" viewName="xceler_actualization_record_view">SELECT planinfos.uuid,
    planinfos.updated_timestamp,
    planinfos.created_timestamp,
    planinfos.plan_id,
    planinfos.tenant_id,
    planinfos.match_type
   FROM ( SELECT xtp.uuid,
            xtp.updated_timestamp,
            xtp.created_timestamp,
            xtp.planning_id AS plan_id,
            xtp.tenant_id,
            xtp.match_type
           FROM taomish.xceler_tradeplanningservice_physicaltradeplan xtp
        UNION
         SELECT xts.uuid,
            xts.updated_timestamp,
            xts.created_timestamp,
            xts.planning_id AS plan_id,
            xts.tenant_id,
                CASE
                    WHEN (xts.stock_plan_type = 0) THEN 'BUILD'::text
                    ELSE 'DRAW'::text
                END AS match_type
           FROM taomish.xceler_tradeplanningservice_stockplan xts) planinfos;</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-117">
        <addUniqueConstraint columnNames="tenant_id, planning_id" constraintName="unique_tenant_plan_id" tableName="xceler_tradeplanningservice_physicaltradeplan"/>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-118">
        <createIndex indexName="xceler_transportallocationservice_seafreightdetails_plan_id_idx" tableName="xceler_transportallocationservice_seafreightdetails">
            <column name="tenant_id"/>
            <column name="plan_id"/>
        </createIndex>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-119">
        <createTable tableName="xceler_tradeplanningservice_plannedtradeobligation">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_tradeplanningservice_plannedtradeobligation_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="broker" type="VARCHAR(255)"/>
            <column name="circle_string_seq" type="INTEGER"/>
            <column name="commodity" type="VARCHAR(255)"/>
            <column name="company" type="VARCHAR(255)"/>
            <column name="counterparty" type="VARCHAR(255)"/>
            <column name="crop_origin" type="VARCHAR(255)"/>
            <column name="delivery_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="delivery_end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="delivery_start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="grade" type="VARCHAR(255)"/>
            <column name="incoterm" type="VARCHAR(255)"/>
            <column name="location" type="VARCHAR(255)"/>
            <column name="obligation_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="plan_id" type="VARCHAR(255)"/>
            <column name="plan_uuid" type="VARCHAR(255)"/>
            <column name="planned_obligation_id" type="VARCHAR(255)"/>
            <column name="planned_quantity" type="FLOAT8"/>
            <column name="price_type" type="VARCHAR(255)"/>
            <column name="profitcenter" type="VARCHAR(255)"/>
            <column name="quantityuom" type="VARCHAR(255)"/>
            <column name="reference_number" type="VARCHAR(255)"/>
            <column name="trade_date_time" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="trade_id" type="VARCHAR(255)"/>
            <column name="trade_obligation_id" type="VARCHAR(255)"/>
            <column name="trade_obligation_uuid" type="VARCHAR(255)"/>
            <column name="trade_price" type="FLOAT8"/>
            <column name="trade_price_currency" type="VARCHAR(255)"/>
            <column name="trade_price_uom" type="VARCHAR(255)"/>
            <column name="trade_quantity" type="FLOAT8"/>
            <column name="trade_transaction_type" type="INTEGER"/>
            <column name="trade_type" type="VARCHAR(255)"/>
            <column name="trade_uuid" type="VARCHAR(255)"/>
            <column defaultValueNumeric="0.0" name="no_of_units" type="FLOAT8"/>
            <column name="remarks" type="TEXT"/>
            <column name="brand" type="VARCHAR(255)"/>
            <column name="season" type="VARCHAR(255)"/>
            <column name="load_location" type="VARCHAR(255)"/>
            <column name="unload_location" type="VARCHAR(255)"/>
            <column name="payment_term" type="VARCHAR(255)"/>
            <column name="trader" type="VARCHAR(255)"/>
            <column name="fx_rate" type="FLOAT8"/>
            <column name="provisional_fx_rate" type="FLOAT8"/>
            <column name="provisional_price_percentage" type="FLOAT8"/>
            <column name="provisional_price_type" type="VARCHAR(255)"/>
            <column defaultValueNumeric="0.0" name="provisional_price" type="FLOAT8"/>
            <column name="tradesettlementcurrency" type="VARCHAR(255)"/>
            <column name="trade_settlement_currency" type="VARCHAR(255)"/>
            <column defaultValueNumeric="0.0" name="premiun_cost" type="FLOAT8"/>
            <column defaultValueNumeric="0.0" name="discount_cost" type="FLOAT8"/>
            <column defaultValueNumeric="0.0" name="total_trade_qty" type="FLOAT8"/>
            <column name="broker_reference_number" type="VARCHAR(255)"/>
            <column name="provisional_price_uom" type="VARCHAR(255)"/>
            <column name="provisional_price_currency" type="VARCHAR(255)"/>
            <column defaultValue="active" name="planned_obligation_status" type="VARCHAR(255)"/>
            <column name="parent_planned_obligation" type="VARCHAR(255)"/>
            <column name="shipment_month" type="VARCHAR(255)"/>
            <column defaultValueBoolean="false" name="external_record" type="BOOLEAN"/>
            <column name="delivery_term_clause" type="TEXT"/>
            <column name="payment_terms_clause" type="TEXT"/>
            <column name="quantity_terms_clause" type="TEXT"/>
            <column name="quality_terms_clause" type="TEXT"/>
            <column name="pricing_terms_clause" type="TEXT"/>
            <column name="broker_reference" type="TEXT"/>
            <column name="comments" type="TEXT"/>
            <column name="trade_settlement_reference" type="VARCHAR(255)"/>
            <column name="doc_by_pass_id" type="VARCHAR(255)"/>
            <column name="package_type" type="VARCHAR(255)"/>
            <column defaultValueNumeric="0.0" name="balance_quantity" type="FLOAT8"/>
            <column name="contract_term" type="VARCHAR(255)"/>
            <column name="external_package" type="VARCHAR(255)"/>
            <column defaultValueNumeric="0.0" name="external_package_unit" type="FLOAT8"/>
            <column defaultValueNumeric="0.0" name="internal_package_unit" type="FLOAT8"/>
            <column name="internal_package" type="VARCHAR(255)"/>
            <column name="provisional_pricing" type="BOOLEAN"/>
            <column name="weight_basis" type="VARCHAR(255)"/>
            <column name="tolerance_value" type="VARCHAR(255)"/>
            <column name="external_reference" type="VARCHAR(255)"/>
            <column name="price_ticker" type="VARCHAR(255)"/>
            <column name="special_instructions" type="TEXT"/>
            <column name="match_type" type="VARCHAR(255)"/>
            <column name="settlement_tolerance_value" type="VARCHAR(255)"/>
            <column name="obligation_state" type="JSONB"/>
            <column name="quotation_period_clause" type="VARCHAR(255)"/>
            <column name="commodity_code" type="VARCHAR(255)"/>
            <column name="location_type" type="VARCHAR(255)"/>
            <column name="load_location_type" type="VARCHAR(255)"/>
            <column name="unload_location_type" type="VARCHAR(255)"/>
            <column name="counterparty_name" type="VARCHAR(255)"/>
            <column name="company_code" type="VARCHAR(255)"/>
            <column name="profitcenter_code" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-120">
        <createTable tableName="xceler_cashflowservice_cashflowdata">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_cashflowservice_cashflowdata_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="actualization_object_id" type="VARCHAR(255)"/>
            <column name="cashflow_id" type="VARCHAR(255)"/>
            <column name="cashflow_status" type="TEXT"/>
            <column name="cost_id" type="VARCHAR(255)"/>
            <column name="creation_error_message" type="VARCHAR(255)"/>
            <column name="financial_amount_type" type="TEXT"/>
            <column name="invoice_amount" type="FLOAT8"/>
            <column name="invoice_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="invoice_due_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="invoice_number" type="VARCHAR(255)"/>
            <column name="invoice_remit_to" type="VARCHAR(255)"/>
            <column name="invoice_status" type="TEXT"/>
            <column name="obligation_id" type="VARCHAR(255)"/>
            <column name="original_invoice" type="VARCHAR(255)"/>
            <column name="payment_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="payment_due_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="plan_id" type="VARCHAR(255)"/>
            <column name="planned_obligation_id" type="VARCHAR(255)"/>
            <column name="price_status" type="TEXT"/>
            <column name="quantity_status" type="TEXT"/>
            <column name="settlement_currency" type="VARCHAR(255)"/>
            <column name="settlement_value" type="FLOAT8"/>
            <column name="stage" type="TEXT"/>
            <column name="trade_id" type="VARCHAR(255)"/>
            <column name="trade_price_currency" type="VARCHAR(255)"/>
            <column name="trade_price_value" type="numeric"/>
            <column name="type" type="TEXT"/>
            <column defaultValueNumeric="0.0" name="invoiced_settlement_value" type="FLOAT8"/>
            <column name="paid_invoice_list" type="BYTEA"/>
            <column defaultValueNumeric="0.0" name="split_sequence_number" type="FLOAT8"/>
            <column name="description" type="VARCHAR(255)"/>
            <column defaultValueNumeric="0.0" name="quantity" type="FLOAT8"/>
            <column defaultValueNumeric="0.0" name="trade_price" type="FLOAT8"/>
            <column name="trade_price_uom" type="VARCHAR(255)"/>
            <column name="trade_date_time" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="price_type" type="TEXT"/>
            <column name="commodity" type="VARCHAR(255)"/>
            <column name="counterparty" type="VARCHAR(255)"/>
            <column name="profitcenter" type="VARCHAR(255)"/>
            <column name="quantity_uom" type="VARCHAR(255)"/>
            <column name="company" type="VARCHAR(255)"/>
            <column name="cost_name" type="VARCHAR(255)"/>
            <column name="cost_group" type="VARCHAR(255)"/>
            <column name="doc_by_pass_id" type="VARCHAR(255)"/>
            <column name="allocation_id" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-121">
        <createTable tableName="xceler_configservice_brand">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_configservice_brand_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="description" type="TEXT"/>
            <column name="name" type="VARCHAR(255)"/>
            <column name="status" type="BOOLEAN"/>
            <column name="code" type="VARCHAR(255)"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-122">
        <createTable tableName="xceler_configservice_calendar">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_configservice_calendar_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="calendar_period" type="VARCHAR(255)"/>
            <column name="calendar_type" type="BOOLEAN"/>
            <column name="description" type="TEXT"/>
            <column name="name" type="VARCHAR(255)"/>
            <column name="status" type="BOOLEAN"/>
            <column name="code" type="VARCHAR(16)"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-123">
        <createTable tableName="xceler_configservice_cropseason">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_configservice_cropseason_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="description" type="TEXT"/>
            <column name="name" type="VARCHAR(255)"/>
            <column name="season_from" type="VARCHAR(255)"/>
            <column name="season_to" type="VARCHAR(255)"/>
            <column name="status" type="BOOLEAN"/>
            <column name="code" type="VARCHAR(16)"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-124">
        <createTable tableName="xceler_configservice_futureoptionsindex">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_configservice_futureoptionsindex_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="commodity" type="VARCHAR(255)"/>
            <column name="currency" type="VARCHAR(255)"/>
            <column name="description" type="VARCHAR(255)"/>
            <column name="exchange_name" type="VARCHAR(255)"/>
            <column name="index_type" type="VARCHAR(255)"/>
            <column name="location" type="VARCHAR(255)"/>
            <column name="lot_size" type="FLOAT8"/>
            <column name="name" type="VARCHAR(255)"/>
            <column name="rolling_month" type="BOOLEAN"/>
            <column name="status" type="BOOLEAN"/>
            <column name="trading_month" type="INTEGER"/>
            <column name="uom" type="VARCHAR(255)"/>
            <column name="code" type="VARCHAR(8)"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-125">
        <createTable tableName="xceler_configservice_fxirindex">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_configservice_fxirindex_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="currency_pair" type="VARCHAR(255)"/>
            <column name="description" type="TEXT"/>
            <column name="exchange_name" type="VARCHAR(255)"/>
            <column name="index_type" type="VARCHAR(255)"/>
            <column name="name" type="VARCHAR(255)"/>
            <column name="status" type="BOOLEAN"/>
            <column name="term_structure" type="FLOAT8"/>
            <column name="code" type="VARCHAR(16)"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-126">
        <createTable tableName="xceler_configservice_grade">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_configservice_grade_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="description" type="TEXT"/>
            <column name="name" type="VARCHAR(255)"/>
            <column name="status" type="BOOLEAN"/>
            <column name="code" type="VARCHAR(255)"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-127">
        <createTable tableName="xceler_configservice_internalpackage">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_configservice_internalpackage_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="capacity" type="FLOAT8"/>
            <column name="capacity_uom" type="VARCHAR(255)"/>
            <column name="name" type="VARCHAR(255)"/>
            <column name="status" type="BOOLEAN"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="external_reference" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-128">
        <createTable tableName="xceler_configservice_paymentterm">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_configservice_paymentterm_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="advance_offset_type" type="BOOLEAN"/>
            <column name="application" type="VARCHAR(255)"/>
            <column name="approval_status" type="BOOLEAN"/>
            <column name="approved_by" type="VARCHAR(255)"/>
            <column name="approved_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="description" type="TEXT"/>
            <column name="event" type="VARCHAR(255)"/>
            <column name="friday_rule" type="VARCHAR(255)"/>
            <column name="holiday_rule" type="VARCHAR(255)"/>
            <column name="lcbased" type="BOOLEAN"/>
            <column name="lctype" type="VARCHAR(255)"/>
            <column name="monday_rule" type="VARCHAR(255)"/>
            <column name="name" type="VARCHAR(255)"/>
            <column name="payment_against" type="VARCHAR(255)"/>
            <column name="settle" type="INTEGER"/>
            <column name="status" type="BOOLEAN"/>
            <column name="weekend_rule" type="VARCHAR(255)"/>
            <column name="code" type="VARCHAR(255)"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="advance_payment" type="BOOLEAN"/>
            <column name="days_after_invoice" type="INTEGER"/>
            <column name="days_after_tender" type="INTEGER"/>
            <column name="payment_external_code" type="VARCHAR(255)"/>
            <column name="approval_stage_status" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-129">
        <createTable tableName="xceler_configservice_physicalbasisindex">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_configservice_physicalbasisindex_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="commodity" type="VARCHAR(255)"/>
            <column name="currency" type="VARCHAR(255)"/>
            <column name="description" type="TEXT"/>
            <column name="exchange_name" type="VARCHAR(255)"/>
            <column name="index_type" type="VARCHAR(255)"/>
            <column name="location" type="VARCHAR(255)"/>
            <column name="location_type" type="VARCHAR(255)"/>
            <column name="name" type="VARCHAR(255)"/>
            <column name="rolling_month" type="BOOLEAN"/>
            <column name="status" type="BOOLEAN"/>
            <column name="trading_month" type="INTEGER"/>
            <column name="uom" type="VARCHAR(255)"/>
            <column name="code" type="VARCHAR(255)"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-130">
        <createTable tableName="xceler_tradeplanningservice_plannedtradeobligation_1376">
            <column name="uuid" type="UUID"/>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="broker" type="VARCHAR(255)"/>
            <column name="circle_string_seq" type="INTEGER"/>
            <column name="commodity" type="VARCHAR(255)"/>
            <column name="company" type="VARCHAR(255)"/>
            <column name="counterparty" type="VARCHAR(255)"/>
            <column name="crop_origin" type="VARCHAR(255)"/>
            <column name="delivery_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="delivery_end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="delivery_start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="grade" type="VARCHAR(255)"/>
            <column name="incoterm" type="VARCHAR(255)"/>
            <column name="location" type="VARCHAR(255)"/>
            <column name="obligation_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="plan_id" type="VARCHAR(255)"/>
            <column name="plan_uuid" type="VARCHAR(255)"/>
            <column name="planned_obligation_id" type="VARCHAR(255)"/>
            <column name="planned_quantity" type="FLOAT8"/>
            <column name="price_type" type="VARCHAR(255)"/>
            <column name="profitcenter" type="VARCHAR(255)"/>
            <column name="quantityuom" type="VARCHAR(255)"/>
            <column name="reference_number" type="VARCHAR(255)"/>
            <column name="trade_date_time" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="trade_id" type="VARCHAR(255)"/>
            <column name="trade_obligation_id" type="VARCHAR(255)"/>
            <column name="trade_obligation_uuid" type="VARCHAR(255)"/>
            <column name="trade_price" type="FLOAT8"/>
            <column name="trade_price_currency" type="VARCHAR(255)"/>
            <column name="trade_price_uom" type="VARCHAR(255)"/>
            <column name="trade_quantity" type="FLOAT8"/>
            <column name="trade_transaction_type" type="INTEGER"/>
            <column name="trade_type" type="VARCHAR(255)"/>
            <column name="trade_uuid" type="VARCHAR(255)"/>
            <column name="no_of_units" type="FLOAT8"/>
            <column name="remarks" type="TEXT"/>
            <column name="brand" type="VARCHAR(255)"/>
            <column name="season" type="VARCHAR(255)"/>
            <column name="load_location" type="VARCHAR(255)"/>
            <column name="unload_location" type="VARCHAR(255)"/>
            <column name="payment_term" type="VARCHAR(255)"/>
            <column name="trader" type="VARCHAR(255)"/>
            <column name="fx_rate" type="FLOAT8"/>
            <column name="provisional_fx_rate" type="FLOAT8"/>
            <column name="provisional_price_percentage" type="FLOAT8"/>
            <column name="provisional_price_type" type="VARCHAR(255)"/>
            <column name="provisional_price" type="FLOAT8"/>
            <column name="tradesettlementcurrency" type="VARCHAR(255)"/>
            <column name="trade_settlement_currency" type="VARCHAR(255)"/>
            <column name="premiun_cost" type="FLOAT8"/>
            <column name="discount_cost" type="FLOAT8"/>
            <column name="total_trade_qty" type="FLOAT8"/>
            <column name="broker_reference_number" type="VARCHAR(255)"/>
            <column name="provisional_price_uom" type="VARCHAR(255)"/>
            <column name="provisional_price_currency" type="VARCHAR(255)"/>
            <column name="planned_obligation_status" type="VARCHAR(255)"/>
            <column name="parent_planned_obligation" type="VARCHAR(255)"/>
            <column name="shipment_month" type="VARCHAR(255)"/>
            <column name="external_record" type="BOOLEAN"/>
            <column name="delivery_term_clause" type="TEXT"/>
            <column name="payment_terms_clause" type="TEXT"/>
            <column name="quantity_terms_clause" type="TEXT"/>
            <column name="quality_terms_clause" type="TEXT"/>
            <column name="pricing_terms_clause" type="TEXT"/>
            <column name="broker_reference" type="TEXT"/>
            <column name="comments" type="TEXT"/>
            <column name="trade_settlement_reference" type="VARCHAR(255)"/>
            <column name="doc_by_pass_id" type="VARCHAR(255)"/>
            <column name="package_type" type="VARCHAR(255)"/>
            <column name="balance_quantity" type="FLOAT8"/>
            <column name="contract_term" type="VARCHAR(255)"/>
            <column name="external_package" type="VARCHAR(255)"/>
            <column name="external_package_unit" type="FLOAT8"/>
            <column name="internal_package_unit" type="FLOAT8"/>
            <column name="internal_package" type="VARCHAR(255)"/>
            <column name="provisional_pricing" type="BOOLEAN"/>
            <column name="weight_basis" type="VARCHAR(255)"/>
            <column name="tolerance_value" type="VARCHAR(255)"/>
            <column name="external_reference" type="VARCHAR(255)"/>
            <column name="price_ticker" type="VARCHAR(255)"/>
            <column name="special_instructions" type="TEXT"/>
            <column name="match_type" type="VARCHAR(255)"/>
            <column name="settlement_tolerance_value" type="VARCHAR(255)"/>
            <column name="obligation_state" type="JSONB"/>
            <column name="quotation_period_clause" type="VARCHAR(255)"/>
            <column name="commodity_code" type="VARCHAR(255)"/>
            <column name="location_type" type="VARCHAR(255)"/>
            <column name="load_location_type" type="VARCHAR(255)"/>
            <column name="unload_location_type" type="VARCHAR(255)"/>
            <column name="counterparty_name" type="VARCHAR(255)"/>
            <column name="company_code" type="VARCHAR(255)"/>
            <column name="profitcenter_code" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-131">
        <createView fullDefinition="false" viewName="vw_transport_allocation_list_items">SELECT gen_random_uuid() AS uuid,
    xtp.created_by,
    xtp.created_timestamp,
    xts.tenant_id,
    xtp.updated_by,
    xtp.updated_timestamp,
    xtp.broker,
    xtp.circle_string_seq,
    xtp.commodity,
    xtp.trader,
    xtp.company,
    xtp.counterparty,
    xtp.crop_origin,
    xtp.delivery_date,
    xtp.delivery_end_date,
    xtp.delivery_start_date,
    xtp.grade,
    xtp.incoterm,
    xtp.location,
    xtp.obligation_date,
    xtp.plan_uuid,
    xtp.planned_obligation_id,
    xtp.planned_quantity,
    xtp.price_type,
    xtp.profitcenter,
    xtp.quantityuom,
    xtp.reference_number,
    xtp.trade_date_time,
    xtp.trade_id,
    xtp.trade_obligation_id,
    xtp.trade_obligation_uuid,
    xtp.trade_price,
    xtp.trade_price_currency,
    xtp.trade_price_uom,
    xtp.trade_quantity,
    xtp.trade_transaction_type,
    xtp.trade_type,
    xtp.trade_uuid,
    xtp.no_of_units,
    xtp.remarks,
    xtp.brand,
    xtp.season,
    xtp.load_location,
    xtp.unload_location,
    xtp.payment_term,
    xtp.trader AS trader_name,
    xtp.fx_rate,
    xtp.provisional_fx_rate,
    xtp.provisional_price_percentage,
    xtp.provisional_price_type,
    xtp.provisional_price,
    xtp.tradesettlementcurrency,
    xtp.trade_settlement_currency,
    xtp.premiun_cost,
    xtp.discount_cost,
    xtp.total_trade_qty,
    xtp.broker_reference_number,
    xtp.provisional_price_uom,
    xtp.provisional_price_currency,
    xtp.planned_obligation_status,
    xtp.parent_planned_obligation,
    xtp.shipment_month,
    xtp.external_record,
    xtp.delivery_term_clause,
    xtp.comments,
    xtp.payment_terms_clause,
    xtp.quantity_terms_clause,
    xtp.quality_terms_clause,
    xtp.pricing_terms_clause,
    xtp.broker_reference,
    xtp.doc_by_pass_id,
    xtp.trade_settlement_reference,
    xtp.package_type,
    xtp.balance_quantity,
    xtp.contract_term,
    xtp.external_package,
    xtp.external_package_unit,
    xtp.internal_package_unit,
    xtp.internal_package,
    xtp.provisional_pricing,
    xtp.weight_basis,
    xtp.tolerance_value,
    xtp.external_reference,
    xtp.price_ticker,
    xtp.special_instructions,
    xaa.actualize_quantity_rows,
    xts.plan_id,
        CASE
            WHEN ((xtp.package_type)::text = 'Container'::text) THEN xtp.external_package
            WHEN ((xtp.package_type)::text = 'Unit'::text) THEN xtp.internal_package
            ELSE NULL::character varying
        END AS package_name,
        CASE
            WHEN ((xtp.package_type)::text = 'Container'::text) THEN COALESCE(xcc2.capacity, (0)::double precision)
            WHEN ((xtp.package_type)::text = 'Unit'::text) THEN COALESCE(xcc.capacity, (0)::double precision)
            ELSE (0)::double precision
        END AS package_capacity,
        CASE
            WHEN ((xtp.package_type)::text = 'Container'::text) THEN xcc2.capacity_uom
            WHEN ((xtp.package_type)::text = 'Unit'::text) THEN xcc.capacity_uom
            ELSE NULL::character varying
        END AS package_uom,
    xtp2.match_type,
    'Fixed'::text AS quantity_tolerance_type,
    state.obligation_state,
    lcd.lc_details,
    (EXISTS ( SELECT xcc_1.status
           FROM taomish.xceler_tradesettlementservice_tradeinvoice xcc_1
          WHERE (((xts.tenant_id)::text = (xcc_1.tenant_id)::text) AND ((xaa.planned_obligation_id)::text = (xcc_1.planned_obligation_id)::text) AND ((xts.trade_id)::text = (xcc_1.trade_id)::text) AND ((xcc_1.status)::text = ANY (ARRAY[('Settled'::character varying)::text, ('INVOICED'::character varying)::text, ('POSTED'::character varying)::text]))))) AS final_invoiced
   FROM (((((((taomish.xceler_transportallocationservice_seafreightdetails xts
     LEFT JOIN taomish.xceler_tradeplanningservice_physicaltradeplan xtp2 ON ((((xtp2.tenant_id)::text = (xts.tenant_id)::text) AND ((xtp2.planning_id)::text = (xts.plan_id)::text))))
     JOIN taomish.xceler_tradeplanningservice_plannedtradeobligation xtp ON ((((xtp.plan_id)::text = (xtp2.planning_id)::text) AND ((xtp.tenant_id)::text = (xtp2.tenant_id)::text))))
     LEFT JOIN taomish.xceler_configservice_commoditypackage xcc ON ((((xcc.tenant_id)::text = (xtp.tenant_id)::text) AND ((xcc.name)::text = (xtp.commodity)::text) AND ((xcc.internal_package_name)::text = (xtp.internal_package)::text))))
     LEFT JOIN taomish.xceler_configservice_commodityexternalpackage xcc2 ON ((((xcc2.tenant_id)::text = (xtp.tenant_id)::text) AND ((xcc2.name)::text = (xtp.commodity)::text) AND ((xcc2.name)::text = (xtp.external_package)::text))))
     LEFT JOIN LATERAL taomish.get_actualized_quantities(xts.tenant_id, xts.planned_obligation_ids) xaa(planned_obligation_id, actualize_quantity_rows) ON (((xaa.planned_obligation_id)::text = (xtp.planned_obligation_id)::text)))
     LEFT JOIN LATERAL taomish.get_planned_obligation_states(xts.tenant_id, xts.planned_obligation_ids) state(planned_obligation_id, obligation_state) ON (((state.planned_obligation_id)::text = (xtp.planned_obligation_id)::text)))
     LEFT JOIN LATERAL taomish.get_lc_details_for_planned_obligation_ids(xts.tenant_id, xts.planned_obligation_ids) lcd(planned_obligation_id, lc_details) ON (((lcd.planned_obligation_id)::text = (xtp.planned_obligation_id)::text)));</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-132">
        <createView fullDefinition="false" viewName="xceler_stockservice_sell_stockplannedobligation">SELECT xtp.uuid,
    xtp.created_by,
    xtp.created_timestamp,
    xtp.tenant_id,
    xtp.updated_by,
    xtp.updated_timestamp,
    xtp.broker,
    xtp.circle_string_seq,
    xtp.commodity,
    xtp.company,
    xtp.counterparty,
    xtp.crop_origin,
    xtp.delivery_date,
    xtp.delivery_end_date,
    xtp.delivery_start_date,
    xtp.grade,
    xtp.incoterm,
    xtp.location,
    xtp.obligation_date,
    xtp.plan_id,
    xtp.plan_uuid,
    xtp.planned_obligation_id,
    xtp.planned_quantity,
    xtp.price_type,
    xtp.profitcenter,
    xtp.quantityuom,
    xtp.reference_number,
    xtp.trade_date_time,
    xtp.trade_id,
    xtp.trade_obligation_id,
    xtp.trade_obligation_uuid,
    xtp.trade_price,
    xtp.trade_price_currency,
    xtp.trade_price_uom,
    xtp.trade_quantity,
    xtp.trade_transaction_type,
    xtp.trade_uuid,
    xtp.no_of_units,
    xtp.remarks,
    xtp.brand,
    xtp.season,
    xtp.load_location,
    xtp.unload_location,
    xtp.payment_term,
    xtp.trader,
    xtp.fx_rate,
    xtp.provisional_fx_rate,
    xtp.provisional_price_percentage,
    xtp.provisional_price_type,
    xtp.provisional_price,
    xtp.tradesettlementcurrency,
    xtp.trade_settlement_currency,
    xtp.premiun_cost,
    xtp.discount_cost,
    xtp.total_trade_qty,
    xtp.broker_reference_number,
    xtp.provisional_price_uom,
    xtp.provisional_price_currency,
    xtp.planned_obligation_status,
    xtp.parent_planned_obligation,
    xtp.shipment_month,
    xtp.external_record,
    xtp.delivery_term_clause,
    xtp.payment_terms_clause,
    xtp.quantity_terms_clause,
    xtp.quality_terms_clause,
    xtp.pricing_terms_clause,
    xtp.broker_reference,
    xtp.comments,
    xtp.doc_by_pass_id,
    xtp.trade_settlement_reference,
    xpp.quantity_tolerance_type,
    xpp.tolerance_value,
    xpp.trade_type,
    xtp.balance_quantity
   FROM (taomish.xceler_tradeplanningservice_plannedtradeobligation xtp
     JOIN taomish.xceler_physicaltradeservice_physicaltrade xpp ON ((((xpp.tenant_id)::text = (xtp.tenant_id)::text) AND ((xpp.trade_id)::text = (xtp.trade_id)::text))))
  WHERE ((xtp.trade_transaction_type = 1) AND ((xtp.planned_obligation_status)::text = 'active'::text) AND (xtp.balance_quantity &gt; (0)::double precision) AND ((xtp.trade_type)::text = ANY (ARRAY[('Physical'::character varying)::text, ('Paper'::character varying)::text])));</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-133">
        <createView fullDefinition="false" viewName="xceler_pricingservice_pricelinefilter">SELECT taomish.uuid_generate_v4() AS uuid,
    xpp.quantityuom AS tradequantityuom,
    xpp.trade_id AS tradeid,
    xpp.planned_obligation_id AS obligationid,
    xpp.delivery_start_date AS periodstartdate,
    xpp.delivery_end_date AS periodenddate,
    xpp.trade_date_time AS tradedatetime,
    xpp.counterparty,
    xpp.incoterm,
    xpp.commodity,
    xpp.price_type AS pricetype,
    xpp.trader AS tradername,
    xpp.crop_origin AS origin,
    xpp.shipment_month AS futureindex,
    xpp.profitcenter,
    xpp.trade_price_currency AS tradepricecurrency,
    xpp.trade_price_uom AS tradepriceuom,
    xpp.trade_settlement_currency AS tradesettlementcurrency,
    xpp.location,
        CASE
            WHEN (xpt.balance_lot IS NULL) THEN (0)::double precision
            ELSE xpt.balance_lot
        END AS balancelot,
        CASE
            WHEN ((xpt.balance_quantity IS NULL) AND ((xpt.priced_quantity IS NULL) OR (xpt.priced_quantity = (0)::double precision))) THEN xpp.planned_quantity
            ELSE xpt.balance_quantity
        END AS balancequantity,
        CASE
            WHEN (xpt.priced_lot IS NULL) THEN (0)::double precision
            ELSE xpt.priced_lot
        END AS pricedlot,
        CASE
            WHEN (xpt.priced_quantity IS NULL) THEN (0)::double precision
            ELSE xpt.priced_quantity
        END AS pricedquantity,
        CASE
            WHEN (xpp.total_trade_qty IS NULL) THEN (0)::double precision
            ELSE xpp.total_trade_qty
        END AS totaltradeqty,
        CASE
            WHEN (xpt.average_price IS NULL) THEN (0)::double precision
            ELSE xpt.average_price
        END AS averageprice,
        CASE
            WHEN (xpp.trade_transaction_type = 1) THEN 'sell'::text
            ELSE 'buy'::text
        END AS tradetransactiontype,
        CASE
            WHEN (xpt.price_status IS NULL) THEN
            CASE
                WHEN (((xpp.price_type)::text = 'PTBF'::text) AND (xpp.provisional_pricing = true)) THEN 'Provisional Priced'::text
                ELSE 'Not Priced'::text
            END
            ELSE (xpt.price_status)::text
        END AS pricestatus,
        CASE
            WHEN (xpt.tenant_id IS NULL) THEN (xpp.tenant_id)::text
            ELSE (xpt.tenant_id)::text
        END AS tenantid
   FROM (taomish.xceler_tradeplanningservice_plannedtradeobligation xpp
     FULL JOIN taomish.xceler_pricingservice_advancedtradeprice xpt ON ((((xpt.obligation_id)::text = (xpp.planned_obligation_id)::text) AND ((xpp.tenant_id)::text = (xpt.tenant_id)::text))))
  WHERE (((xpp.planned_obligation_status)::text = 'active'::text) AND (lower((xpp.price_type)::text) = ANY (ARRAY['ptbf'::text, 'differential'::text])));</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-134">
        <createView fullDefinition="false" viewName="xceler_settlementservice_settlementgriddata">WITH docbypass AS (
         WITH doc_by_pass AS (
                 SELECT xcc2.planned_obligation_id,
                    xcc2.split_sequence_number,
                    xcc2.tenant_id,
                        CASE
                            WHEN (lower((xtt.final_invoice_type)::text) = 'final against claim'::text) THEN
                            CASE
                                WHEN (lower((xtt.full_invoice_type)::text) = 'final invoice docbypass'::text) THEN xtt.invoice_type
                                ELSE 'Purchase'::character varying
                            END
                            ELSE xtt.invoice_type
                        END AS invoice_type,
                    xcc2.trade_price,
                    ( SELECT xtp.settlement_price
                           FROM taomish.xceler_tradeplanningservice_physicaltradeplan xtp
                          WHERE (((xtp.planning_id)::text = (xcc2.doc_by_pass_id)::text) AND ((xtp.tenant_id)::text = (xcc2.tenant_id)::text))) AS doc_by_pass_price,
                        CASE
                            WHEN ((xaa.claimed_quantity IS NULL) OR (xaa.claimed_quantity = (0)::double precision)) THEN false
                            ELSE true
                        END AS is_claimed,
                        CASE
                            WHEN (lower((xtt.final_invoice_type)::text) = 'final against claim'::text) THEN true
                            ELSE false
                        END AS claim_generated
                   FROM ((taomish.xceler_cashflowservice_cashflowdata xcc2
                     JOIN taomish.xceler_tradesettlementservice_tradeinvoice xtt ON ((((xtt.planned_obligation_id)::text = (xcc2.planned_obligation_id)::text) AND ((xtt.tenant_id)::text = (xcc2.tenant_id)::text) AND (lower((xtt.final_invoice_type)::text) = ANY (ARRAY['normal invoice'::text, 'final against claim'::text])) AND (xtt.split_number = xcc2.split_sequence_number) AND (lower((xtt.status)::text) &lt;&gt; 'void'::text))))
                     JOIN taomish.xceler_actualizationservice_actualizedquantity xaa ON ((((xaa.tenant_id)::text = (xcc2.tenant_id)::text) AND ((xaa.planned_obligation_id)::text = (xcc2.planned_obligation_id)::text) AND (xaa.split_sequence_number = xcc2.split_sequence_number))))
                  WHERE (((COALESCE(xcc2.doc_by_pass_id, ''::character varying))::text &lt;&gt; ''::text) AND (xcc2.stage = 'Planned'::text))
                )
         SELECT xcc.planned_obligation_id,
            xcc.split_sequence_number,
                CASE
                    WHEN (xcc.financial_amount_type = 'payable'::text) THEN 'BUY'::text
                    ELSE 'SELL'::text
                END AS buysell,
            xcc.tenant_id,
            (count(dbp.planned_obligation_id) &gt; 0) AS is_doc_by_pass,
            (count(
                CASE
                    WHEN dbp.is_claimed THEN
                    CASE
                        WHEN (((dbp.invoice_type)::text = ANY (ARRAY[('Credit Note'::character varying)::text, ('Debit Note'::character varying)::text])) AND dbp.claim_generated) THEN dbp.planned_obligation_id
                        ELSE NULL::character varying
                    END
                    ELSE
                    CASE
                        WHEN ((dbp.invoice_type)::text = ANY (ARRAY[('Credit Note'::character varying)::text, ('Debit Note'::character varying)::text])) THEN dbp.planned_obligation_id
                        ELSE NULL::character varying
                    END
                END) &gt; 0) AS cndn_generated,
            (count(
                CASE
                    WHEN dbp.is_claimed THEN ''::character varying
                    ELSE
                    CASE
                        WHEN ((dbp.invoice_type)::text &lt;&gt; ALL (ARRAY[('Credit Note'::character varying)::text, ('Debit Note'::character varying)::text])) THEN dbp.planned_obligation_id
                        ELSE NULL::character varying
                    END
                END) &gt; 0) AS commercial_generated,
                CASE
                    WHEN (count(dbp.planned_obligation_id) &gt; 0) THEN
                    CASE
                        WHEN (xcc.financial_amount_type = 'payable'::text) THEN true
                        ELSE ((max(dbp.trade_price) - max(dbp.doc_by_pass_price)) &lt;&gt; (0)::double precision)
                    END
                    ELSE false
                END AS can_generate_both
           FROM (taomish.xceler_cashflowservice_cashflowdata xcc
             LEFT JOIN doc_by_pass dbp ON ((((dbp.tenant_id)::text = (xcc.tenant_id)::text) AND ((dbp.planned_obligation_id)::text = (xcc.planned_obligation_id)::text) AND (dbp.split_sequence_number = xcc.split_sequence_number))))
          WHERE (xcc.stage &lt;&gt; ALL (ARRAY['Planned'::text, 'Estimated'::text]))
          GROUP BY xcc.planned_obligation_id, xcc.split_sequence_number, xcc.tenant_id, xcc.financial_amount_type
        )
 SELECT taomish.uuid_generate_v4() AS uuid,
    ft.created_by,
    ft.created_timestamp,
    ft.tenant_id,
    ft.updated_by,
    ft.updated_timestamp,
    ft.broker,
    ft.circle_string_seq,
    ft.commodity,
    ft.company,
    ft.counterparty,
    ft.crop_origin,
    ft.delivery_date,
    ft.delivery_end_date,
    ft.delivery_start_date,
    ft.grade,
    ft.incoterm,
    ft.location,
    ft.obligation_date,
    ft.plan_id,
    ft.plan_uuid,
    ft.planned_obligation_id,
        CASE
            WHEN ((ft.aq_planned_quantity IS NULL) OR (ft.aq_planned_quantity = (0)::double precision)) THEN ft.planned_quantity
            ELSE ft.aq_planned_quantity
        END AS planned_quantity,
    ft.price_type,
    ft.profitcenter,
    ft.quantityuom,
    ft.reference_number,
    ft.trade_date_time,
    ft.trade_id,
    ft.trade_obligation_id,
    ft.trade_obligation_uuid,
    ft.trade_price,
    ft.trade_price_currency,
    ft.trade_price_uom,
    ft.trade_quantity,
    ft.trade_transaction_type,
    ft.trade_type,
    ft.trade_uuid,
    ft.no_of_units,
    ft.remarks,
    ft.brand,
    ft.season,
    ft.load_location,
    ft.unload_location,
    ft.payment_term,
    ft.trader,
    ft.fx_rate,
    ft.provisional_fx_rate,
    ft.provisional_price_percentage,
    ft.provisional_price_type,
    ft.provisional_price,
    ft.trade_settlement_currency,
    ft.premiun_cost,
    ft.discount_cost,
    ft.total_trade_qty,
    ft.broker_reference_number,
    ft.provisional_price_uom,
    ft.provisional_price_currency,
    ft.planned_obligation_status,
    ft.parent_planned_obligation,
    ft.shipment_month,
    ft.external_record,
    ft.delivery_term_clause,
    ft.comments,
    ft.payment_terms_clause,
    ft.quantity_terms_clause,
    ft.quality_terms_clause,
    ft.pricing_terms_clause,
    ft.broker_reference,
    ft.aq_tenant_id,
    ft.aq_planned_obligation_id,
    ft.split_sequence_number,
    ft.planid,
    ft.match_type,
    ft.tenantid,
    xtassd.voyage_no AS vessel_id,
    xtassd.vessel_name,
    ft.doc_by_pass_id
   FROM ((( SELECT tb1.uuid,
            tb1.created_by,
            tb1.created_timestamp,
            tb1.tenant_id,
            tb1.updated_by,
            tb1.updated_timestamp,
            tb1.broker,
            tb1.circle_string_seq,
            tb1.commodity,
            tb1.company,
            tb1.counterparty,
            tb1.crop_origin,
            tb1.delivery_date,
            tb1.delivery_end_date,
            tb1.delivery_start_date,
            tb1.grade,
            tb1.incoterm,
            tb1.location,
            tb1.obligation_date,
            tb1.plan_id,
            tb1.plan_uuid,
            tb1.planned_obligation_id,
            tb1.planned_quantity,
            tb1.price_type,
            tb1.profitcenter,
            tb1.quantityuom,
            tb1.reference_number,
            tb1.trade_date_time,
            tb1.trade_id,
            tb1.trade_obligation_id,
            tb1.trade_obligation_uuid,
            tb1.trade_price,
            tb1.trade_price_currency,
            tb1.trade_price_uom,
            tb1.trade_quantity,
            tb1.trade_transaction_type,
            tb1.trade_type,
            tb1.trade_uuid,
            tb1.no_of_units,
            tb1.remarks,
            tb1.brand,
            tb1.season,
            tb1.load_location,
            tb1.unload_location,
            tb1.payment_term,
            tb1.trader,
            tb1.fx_rate,
            tb1.provisional_fx_rate,
            tb1.provisional_price_percentage,
            tb1.provisional_price_type,
            tb1.provisional_price,
            tb1.tradesettlementcurrency,
            tb1.trade_settlement_currency,
            tb1.premiun_cost,
            tb1.discount_cost,
            tb1.total_trade_qty,
            tb1.broker_reference_number,
            tb1.provisional_price_uom,
            tb1.provisional_price_currency,
            tb1.planned_obligation_status,
            tb1.parent_planned_obligation,
            tb1.shipment_month,
            tb1.external_record,
            tb1.delivery_term_clause,
            tb1.comments,
            tb1.payment_terms_clause,
            tb1.quantity_terms_clause,
            tb1.quality_terms_clause,
            tb1.pricing_terms_clause,
            tb1.broker_reference,
            tb1.doc_by_pass_id,
            tb1.trade_settlement_reference,
            tb1.aq_tenant_id,
            tb1.aq_planned_obligation_id,
            tb1.aq_planned_quantity,
            tb1.split_sequence_number,
            tb1.planid,
            tb1.match_type,
            tb1.tenantid
           FROM (( SELECT xtp.uuid,
                    xtp.created_by,
                    xtp.created_timestamp,
                    xtp.tenant_id,
                    xtp.updated_by,
                    xtp.updated_timestamp,
                    xtp.broker,
                    xtp.circle_string_seq,
                    xtp.commodity,
                    xtp.company,
                    xtp.counterparty,
                    xtp.crop_origin,
                    xtp.delivery_date,
                    xtp.delivery_end_date,
                    xtp.delivery_start_date,
                    xtp.grade,
                    xtp.incoterm,
                    xtp.location,
                    xtp.obligation_date,
                    xtp.plan_id,
                    xtp.plan_uuid,
                    xtp.planned_obligation_id,
                    xtp.planned_quantity,
                    xtp.price_type,
                    xtp.profitcenter,
                    xtp.quantityuom,
                    xtp.reference_number,
                    xtp.trade_date_time,
                    xtp.trade_id,
                    xtp.trade_obligation_id,
                    xtp.trade_obligation_uuid,
                    xtp.trade_price,
                    xtp.trade_price_currency,
                    xtp.trade_price_uom,
                    xtp.trade_quantity,
                    xtp.trade_transaction_type,
                    xtp.trade_type,
                    xtp.trade_uuid,
                    xtp.no_of_units,
                    xtp.remarks,
                    xtp.brand,
                    xtp.season,
                    xtp.load_location,
                    xtp.unload_location,
                    xtp.payment_term,
                    xtp.trader,
                    xtp.fx_rate,
                    xtp.provisional_fx_rate,
                    xtp.provisional_price_percentage,
                    xtp.provisional_price_type,
                    xtp.provisional_price,
                    xtp.tradesettlementcurrency,
                    xtp.trade_settlement_currency,
                    xtp.premiun_cost,
                    xtp.discount_cost,
                    xtp.total_trade_qty,
                    xtp.broker_reference_number,
                    xtp.provisional_price_uom,
                    xtp.provisional_price_currency,
                    xtp.planned_obligation_status,
                    xtp.parent_planned_obligation,
                    xtp.shipment_month,
                    xtp.external_record,
                    xtp.delivery_term_clause,
                    xtp.comments,
                    xtp.payment_terms_clause,
                    xtp.quantity_terms_clause,
                    xtp.quality_terms_clause,
                    xtp.pricing_terms_clause,
                    xtp.broker_reference,
                    xtp.doc_by_pass_id,
                    xtp.trade_settlement_reference,
                    xaa.aq_tenant_id,
                    xaa.aq_planned_obligation_id,
                    xaa.aq_planned_quantity,
                    xaa.split_sequence_number,
                    plan.planid,
                    plan.match_type,
                    plan.tenantid
                   FROM ((( SELECT obl.uuid,
                            obl.created_by,
                            obl.created_timestamp,
                            obl.tenant_id,
                            obl.updated_by,
                            obl.updated_timestamp,
                            obl.broker,
                            obl.circle_string_seq,
                            obl.commodity,
                            obl.company,
                            obl.counterparty,
                            obl.crop_origin,
                            obl.delivery_date,
                            obl.delivery_end_date,
                            obl.delivery_start_date,
                            obl.grade,
                            obl.incoterm,
                            obl.location,
                            obl.obligation_date,
                            obl.plan_id,
                            obl.plan_uuid,
                            obl.planned_obligation_id,
                            obl.planned_quantity,
                            obl.price_type,
                            obl.profitcenter,
                            obl.quantityuom,
                            obl.reference_number,
                            obl.trade_date_time,
                            obl.trade_id,
                            obl.trade_obligation_id,
                            obl.trade_obligation_uuid,
                            obl.trade_price,
                            obl.trade_price_currency,
                            obl.trade_price_uom,
                            obl.trade_quantity,
                            obl.trade_transaction_type,
                            obl.trade_type,
                            obl.trade_uuid,
                            obl.no_of_units,
                            obl.remarks,
                            obl.brand,
                            obl.season,
                            obl.load_location,
                            obl.unload_location,
                            obl.payment_term,
                            obl.trader,
                            obl.fx_rate,
                            obl.provisional_fx_rate,
                            obl.provisional_price_percentage,
                            obl.provisional_price_type,
                            obl.provisional_price,
                            obl.tradesettlementcurrency,
                            obl.trade_settlement_currency,
                            obl.premiun_cost,
                            obl.discount_cost,
                            obl.total_trade_qty,
                            obl.broker_reference_number,
                            obl.provisional_price_uom,
                            obl.provisional_price_currency,
                            obl.planned_obligation_status,
                            obl.parent_planned_obligation,
                            obl.shipment_month,
                            obl.external_record,
                            obl.delivery_term_clause,
                            obl.comments,
                            obl.payment_terms_clause,
                            obl.quantity_terms_clause,
                            obl.quality_terms_clause,
                            obl.pricing_terms_clause,
                            obl.broker_reference,
                            obl.doc_by_pass_id,
                            obl.trade_settlement_reference
                           FROM taomish.xceler_tradeplanningservice_plannedtradeobligation obl
                          WHERE (obl.external_record = false)) xtp
                     JOIN ( SELECT ac.tenant_id AS aq_tenant_id,
                            ac.planned_obligation_id AS aq_planned_obligation_id,
                            ac.planned_quantity AS aq_planned_quantity,
                            ac.split_sequence_number
                           FROM taomish.xceler_actualizationservice_actualizedquantity ac) xaa ON ((((xaa.aq_planned_obligation_id)::text = (xtp.planned_obligation_id)::text) AND ((xaa.aq_tenant_id)::text = (xtp.tenant_id)::text))))
                     JOIN ( SELECT xtp_1.planning_id AS planid,
                            xtp_1.match_type,
                            xtp_1.tenant_id AS tenantid
                           FROM taomish.xceler_tradeplanningservice_physicaltradeplan xtp_1
                        UNION
                         SELECT DISTINCT ON (xtp_1.planned_obligation_id) xtp_1.plan_id AS planning_id,
                                CASE
                                    WHEN ((xsm.type)::text = 'Build'::text) THEN 'BUILD'::text
                                    WHEN ((xsm.type)::text = 'Sales-Draw'::text) THEN 'DRAW'::text
                                    ELSE NULL::text
                                END AS "case",
                            xtp_1.tenant_id AS plan_tenant_id
                           FROM (taomish.xceler_stock_movement xsm
                             JOIN taomish.xceler_tradeplanningservice_plannedtradeobligation xtp_1 ON (
                                CASE
                                    WHEN ((xsm.type)::text = 'Build'::text) THEN (((xtp_1.tenant_id)::text = (xsm.tenant_id)::text) AND ((xtp_1.planned_obligation_id)::text = (xsm.transfer_from)::text) AND ((xtp_1.plan_id)::text = (xsm.plan_id)::text) AND ((xsm.status)::text = ANY (ARRAY[('Initiated'::character varying)::text, ('Completed'::character varying)::text])) AND (xtp_1.balance_quantity = (0)::double precision))
                                    WHEN ((xsm.type)::text = 'Sales-Draw'::text) THEN (((xtp_1.tenant_id)::text = (xsm.tenant_id)::text) AND ((xtp_1.planned_obligation_id)::text = (xsm.transfer_to)::text) AND ((xtp_1.plan_id)::text = (xsm.plan_id)::text) AND ((xsm.status)::text = ANY (ARRAY[('Initiated'::character varying)::text, ('Completed'::character varying)::text])))
                                    ELSE NULL::boolean
                                END))) plan ON ((((plan.planid)::text = (xtp.plan_id)::text) AND (lower((plan.match_type)::text) &lt;&gt; ALL (ARRAY['washout'::text, 'washout - string'::text, 'washout - circle'::text])) AND ((plan.tenantid)::text = (xtp.tenant_id)::text))))) tb1
             JOIN ( SELECT DISTINCT xcc.planned_obligation_id,
                    xcc.tenant_id,
                    xcc.split_sequence_number
                   FROM (taomish.xceler_cashflowservice_cashflowdata xcc
                     JOIN docbypass dbp ON ((((dbp.tenant_id)::text = (xcc.tenant_id)::text) AND ((dbp.planned_obligation_id)::text = (xcc.planned_obligation_id)::text) AND (dbp.split_sequence_number = xcc.split_sequence_number))))
                  WHERE (((xcc.stage = ANY (ARRAY['Accrued'::text, 'Accrued Provisional'::text])) AND (lower(xcc.type) = ANY (ARRAY['trade'::text, 'provisional'::text])) AND (xcc.cashflow_status = 'active'::text) AND ((xcc.invoice_number IS NULL) OR ((xcc.invoice_number)::text = ''::text) OR (round((xcc.settlement_value)::numeric, 2) &gt; round((xcc.invoiced_settlement_value)::numeric, 2)))) OR (dbp.can_generate_both AND ((dbp.cndn_generated = false) OR (dbp.commercial_generated = false))))) cashflow ON ((((cashflow.tenant_id)::text = (tb1.tenant_id)::text) AND ((cashflow.planned_obligation_id)::text = (tb1.planned_obligation_id)::text) AND (cashflow.split_sequence_number = tb1.split_sequence_number))))
        UNION
         SELECT tb1.uuid,
            tb1.created_by,
            tb1.created_timestamp,
            tb1.tenant_id,
            tb1.updated_by,
            tb1.updated_timestamp,
            tb1.broker,
            tb1.circle_string_seq,
            tb1.commodity,
            tb1.company,
            tb1.counterparty,
            tb1.crop_origin,
            tb1.delivery_date,
            tb1.delivery_end_date,
            tb1.delivery_start_date,
            tb1.grade,
            tb1.incoterm,
            tb1.location,
            tb1.obligation_date,
            tb1.plan_id,
            tb1.plan_uuid,
            tb1.planned_obligation_id,
            tb1.planned_quantity,
            tb1.price_type,
            tb1.profitcenter,
            tb1.quantityuom,
            tb1.reference_number,
            tb1.trade_date_time,
            tb1.trade_id,
            tb1.trade_obligation_id,
            tb1.trade_obligation_uuid,
            tb1.trade_price,
            tb1.trade_price_currency,
            tb1.trade_price_uom,
            tb1.trade_quantity,
            tb1.trade_transaction_type,
            tb1.trade_type,
            tb1.trade_uuid,
            tb1.no_of_units,
            tb1.remarks,
            tb1.brand,
            tb1.season,
            tb1.load_location,
            tb1.unload_location,
            tb1.payment_term,
            tb1.trader,
            tb1.fx_rate,
            tb1.provisional_fx_rate,
            tb1.provisional_price_percentage,
            tb1.provisional_price_type,
            tb1.provisional_price,
            tb1.tradesettlementcurrency,
            tb1.trade_settlement_currency,
            tb1.premiun_cost,
            tb1.discount_cost,
            tb1.total_trade_qty,
            tb1.broker_reference_number,
            tb1.provisional_price_uom,
            tb1.provisional_price_currency,
            tb1.planned_obligation_status,
            tb1.parent_planned_obligation,
            tb1.shipment_month,
            tb1.external_record,
            tb1.delivery_term_clause,
            tb1.comments,
            tb1.payment_terms_clause,
            tb1.quantity_terms_clause,
            tb1.quality_terms_clause,
            tb1.pricing_terms_clause,
            tb1.broker_reference,
            tb1.doc_by_pass_id,
            tb1.trade_settlement_reference,
            tb1.aq_tenant_id,
            tb1.aq_planned_obligation_id,
            tb1.aq_planned_quantity,
            tb1.split_sequence_number,
            tb1.planid,
            tb1.match_type,
            tb1.tenantid
           FROM (( SELECT xtp.uuid,
                    xtp.created_by,
                    xtp.created_timestamp,
                    xtp.tenant_id,
                    xtp.updated_by,
                    xtp.updated_timestamp,
                    xtp.broker,
                    xtp.circle_string_seq,
                    xtp.commodity,
                    xtp.company,
                    xtp.counterparty,
                    xtp.crop_origin,
                    xtp.delivery_date,
                    xtp.delivery_end_date,
                    xtp.delivery_start_date,
                    xtp.grade,
                    xtp.incoterm,
                    xtp.location,
                    xtp.obligation_date,
                    xtp.plan_id,
                    xtp.plan_uuid,
                    xtp.planned_obligation_id,
                    xtp.planned_quantity,
                    xtp.price_type,
                    xtp.profitcenter,
                    xtp.quantityuom,
                    xtp.reference_number,
                    xtp.trade_date_time,
                    xtp.trade_id,
                    xtp.trade_obligation_id,
                    xtp.trade_obligation_uuid,
                    xtp.trade_price,
                    xtp.trade_price_currency,
                    xtp.trade_price_uom,
                    xtp.trade_quantity,
                    xtp.trade_transaction_type,
                    xtp.trade_type,
                    xtp.trade_uuid,
                    xtp.no_of_units,
                    xtp.remarks,
                    xtp.brand,
                    xtp.season,
                    xtp.load_location,
                    xtp.unload_location,
                    xtp.payment_term,
                    xtp.trader,
                    xtp.fx_rate,
                    xtp.provisional_fx_rate,
                    xtp.provisional_price_percentage,
                    xtp.provisional_price_type,
                    xtp.provisional_price,
                    xtp.tradesettlementcurrency,
                    xtp.trade_settlement_currency,
                    xtp.premiun_cost,
                    xtp.discount_cost,
                    xtp.total_trade_qty,
                    xtp.broker_reference_number,
                    xtp.provisional_price_uom,
                    xtp.provisional_price_currency,
                    xtp.planned_obligation_status,
                    xtp.parent_planned_obligation,
                    xtp.shipment_month,
                    xtp.external_record,
                    xtp.delivery_term_clause,
                    xtp.comments,
                    xtp.payment_terms_clause,
                    xtp.quantity_terms_clause,
                    xtp.quality_terms_clause,
                    xtp.pricing_terms_clause,
                    xtp.broker_reference,
                    xtp.doc_by_pass_id,
                    xtp.trade_settlement_reference,
                    xtp.aq_tenant_id,
                    xtp.aq_planned_obligation_id,
                    xtp.aq_planned_quantity,
                    xtp.split_sequence_number,
                    plan.planid,
                    plan.match_type,
                    plan.tenantid
                   FROM (( SELECT obl.uuid,
                            obl.created_by,
                            obl.created_timestamp,
                            obl.tenant_id,
                            obl.updated_by,
                            obl.updated_timestamp,
                            obl.broker,
                            obl.circle_string_seq,
                            obl.commodity,
                            obl.company,
                            obl.counterparty,
                            obl.crop_origin,
                            obl.delivery_date,
                            obl.delivery_end_date,
                            obl.delivery_start_date,
                            obl.grade,
                            obl.incoterm,
                            obl.location,
                            obl.obligation_date,
                            obl.plan_id,
                            obl.plan_uuid,
                            obl.planned_obligation_id,
                            obl.planned_quantity,
                            obl.price_type,
                            obl.profitcenter,
                            obl.quantityuom,
                            obl.reference_number,
                            obl.trade_date_time,
                            obl.trade_id,
                            obl.trade_obligation_id,
                            obl.trade_obligation_uuid,
                            obl.trade_price,
                            obl.trade_price_currency,
                            obl.trade_price_uom,
                            obl.trade_quantity,
                            obl.trade_transaction_type,
                            obl.trade_type,
                            obl.trade_uuid,
                            obl.no_of_units,
                            obl.remarks,
                            obl.brand,
                            obl.season,
                            obl.load_location,
                            obl.unload_location,
                            obl.payment_term,
                            obl.trader,
                            obl.fx_rate,
                            obl.provisional_fx_rate,
                            obl.provisional_price_percentage,
                            obl.provisional_price_type,
                            obl.provisional_price,
                            obl.tradesettlementcurrency,
                            obl.trade_settlement_currency,
                            obl.premiun_cost,
                            obl.discount_cost,
                            obl.total_trade_qty,
                            obl.broker_reference_number,
                            obl.provisional_price_uom,
                            obl.provisional_price_currency,
                            obl.planned_obligation_status,
                            obl.parent_planned_obligation,
                            obl.shipment_month,
                            obl.external_record,
                            obl.delivery_term_clause,
                            obl.comments,
                            obl.payment_terms_clause,
                            obl.quantity_terms_clause,
                            obl.quality_terms_clause,
                            obl.pricing_terms_clause,
                            obl.broker_reference,
                            obl.doc_by_pass_id,
                            obl.trade_settlement_reference,
                            ''::text AS aq_tenant_id,
                            ''::text AS aq_planned_obligation_id,
                            0 AS aq_planned_quantity,
                            0 AS split_sequence_number
                           FROM taomish.xceler_tradeplanningservice_plannedtradeobligation obl
                          WHERE (obl.external_record = false)) xtp
                     JOIN ( SELECT xtp_1.planning_id AS planid,
                            xtp_1.match_type,
                            xtp_1.tenant_id AS tenantid
                           FROM taomish.xceler_tradeplanningservice_physicaltradeplan xtp_1
                        UNION
                         SELECT DISTINCT ON (xtp_1.planned_obligation_id) xtp_1.plan_id AS planning_id,
                                CASE
                                    WHEN ((xsm.type)::text = 'Build'::text) THEN 'BUILD'::text
                                    WHEN ((xsm.type)::text = 'Sales-Draw'::text) THEN 'DRAW'::text
                                    ELSE NULL::text
                                END AS "case",
                            xtp_1.tenant_id AS plan_tenant_id
                           FROM (taomish.xceler_stock_movement xsm
                             JOIN taomish.xceler_tradeplanningservice_plannedtradeobligation xtp_1 ON (
                                CASE
                                    WHEN ((xsm.type)::text = 'Build'::text) THEN (((xtp_1.tenant_id)::text = (xsm.tenant_id)::text) AND ((xtp_1.planned_obligation_id)::text = (xsm.transfer_from)::text) AND ((xtp_1.plan_id)::text = (xsm.plan_id)::text) AND ((xsm.status)::text = ANY (ARRAY[('Initiated'::character varying)::text, ('Completed'::character varying)::text])) AND (xtp_1.balance_quantity = (0)::double precision))
                                    WHEN ((xsm.type)::text = 'Sales-Draw'::text) THEN (((xtp_1.tenant_id)::text = (xsm.tenant_id)::text) AND ((xtp_1.planned_obligation_id)::text = (xsm.transfer_to)::text) AND ((xtp_1.plan_id)::text = (xsm.plan_id)::text) AND ((xsm.status)::text = ANY (ARRAY[('Initiated'::character varying)::text, ('Completed'::character varying)::text])))
                                    ELSE NULL::boolean
                                END))) plan ON ((((plan.planid)::text = (xtp.plan_id)::text) AND (lower((plan.match_type)::text) = ANY (ARRAY['washout'::text, 'washout - string'::text, 'washout - circle'::text])) AND ((plan.tenantid)::text = (xtp.tenant_id)::text))))) tb1
             JOIN ( SELECT DISTINCT xcc.planned_obligation_id,
                    xcc.tenant_id,
                    xcc.quantity_status
                   FROM taomish.xceler_cashflowservice_cashflowdata xcc
                  WHERE ((xcc.stage = ANY (ARRAY['Planned'::text, 'Invoice Final'::text, 'Accrued'::text])) AND (lower(xcc.type) = ANY (ARRAY['trade'::text, 'provisional'::text])) AND (xcc.cashflow_status = 'active'::text) AND ((xcc.invoice_number IS NULL) OR ((xcc.invoice_number)::text = ''::text)))) cashflow ON ((((cashflow.tenant_id)::text = (tb1.tenant_id)::text) AND ((cashflow.planned_obligation_id)::text = (tb1.planned_obligation_id)::text) AND (cashflow.quantity_status = 'Actual'::text))))) ft
     LEFT JOIN taomish.xceler_transportallocationservice_seafreightdetails xtassd ON ((((xtassd.tenant_id)::text = (ft.tenant_id)::text) AND ((xtassd.plan_id)::text = (ft.plan_id)::text))))
     LEFT JOIN taomish.xceler_transportallocationservice_bookingmanagement xtb ON ((((xtb.tenant_id)::text = (ft.tenant_id)::text) AND ((xtb.booking_number)::text = (xtassd.vessel_id)::text))));</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-135">
        <createView fullDefinition="false" viewName="xceler_vessel_plan_allocation_view">WITH allocate_data AS (
         SELECT xtp_ab.created_by,
            xtp_ab.created_timestamp,
            xtp_ab.tenant_id,
            xtp_ab.updated_by,
            xtp_ab.updated_timestamp,
            xtp_ab.broker,
            xtp_ab.company,
            xtp_ab.planned_obligation_id,
            xtp_ab.trade_obligation_id,
            xtp_ab.trade_obligation_uuid,
            xtp_ab.plan_id,
            xtp_ab.doc_by_pass_id,
            xtp_ab.plan_uuid,
            xtp_ab.trade_id,
            xtp_ab.trade_uuid,
            xtp_ab.trade_transaction_type,
            xtp_ab.circle_string_seq,
            xtp_ab.commodity,
            xtp_ab.counterparty,
            xtp_ab.crop_origin,
            xtp_ab.delivery_date,
            xtp_ab.delivery_end_date,
            xtp_ab.delivery_start_date,
            xtp_ab.grade,
            xtp_ab.incoterm,
            xtp_ab.location,
            xtp_ab.obligation_date,
            xtp_ab.planned_quantity,
            xtp_ab.price_type,
            xtp_ab.profitcenter,
            xtp_ab.quantityuom,
            xtp_ab.reference_number,
            xtp_ab.trade_date_time,
            xtp_ab.trade_price,
            xtp_ab.trade_price_currency,
            xtp_ab.trade_price_uom,
            xtp_ab.trade_quantity,
            xtp_ab.trade_type,
            xtp_ab.no_of_units,
            xtp_ab.remarks,
            xtp_ab.brand,
            xtp_ab.season,
            xtp_ab.load_location,
            xtp_ab.unload_location,
            xtp_ab.payment_term,
            xtp_ab.trader,
            xtp_ab.fx_rate,
            xtp_ab.provisional_fx_rate,
            xtp_ab.provisional_price_percentage,
            xtp_ab.provisional_price_type,
            xtp_ab.provisional_price,
            xtp_ab.tradesettlementcurrency,
            xtp_ab.trade_settlement_currency,
            xtp_ab.premiun_cost,
            xtp_ab.discount_cost,
            xtp_ab.total_trade_qty,
            xtp_ab.broker_reference_number,
            xtp_ab.provisional_price_uom,
            xtp_ab.provisional_price_currency,
            xtp_ab.planned_obligation_status,
            xtp_ab.parent_planned_obligation,
            xtp_ab.shipment_month,
            xtp_ab.external_record,
            xtp_ab.delivery_term_clause,
            xtp_ab.comments,
            xtp_ab.payment_terms_clause,
            xtp_ab.quantity_terms_clause,
            xtp_ab.quality_terms_clause,
            xtp_ab.pricing_terms_clause,
            xtp_ab.broker_reference,
            xtp_ab.trade_settlement_reference,
            xtp_ab.package_type,
            xtp_ab.contract_term,
            xtp_ab.external_package,
            xtp_ab.external_package_unit,
            xtp_ab.internal_package_unit,
            xtp_ab.internal_package,
            xtp_ab.provisional_pricing,
            xtp_ab.weight_basis,
            xtp_ab.tolerance_value,
            xtp_ab.external_reference,
            xaa.balance_allocate_quantity AS balance_quantity,
            xaa.actualization_id,
            xaa.split_sequence_number,
            xaa.balance_allocate_quantity,
            xaa.load_quantity,
            xaa.unload_quantity,
            xaa.load_quantity AS actualized_quantity,
            xaa.balance_allocate_quantity AS text_data
           FROM (taomish.xceler_tradeplanningservice_plannedtradeobligation xtp_ab
             JOIN taomish.xceler_actualizationservice_actualizedquantity xaa ON ((((xaa.tenant_id)::text = (xtp_ab.tenant_id)::text) AND ((xaa.planned_obligation_id)::text = (xtp_ab.planned_obligation_id)::text))))
          WHERE ((xaa.balance_allocate_quantity &gt; (0)::double precision) AND (xtp_ab.trade_transaction_type = 0) AND (xtp_ab.balance_quantity &gt; (0)::double precision))
        UNION ALL
         SELECT xtp2_as.created_by,
            xtp2_as.created_timestamp,
            xtp2_as.tenant_id,
            xtp2_as.updated_by,
            xtp2_as.updated_timestamp,
            xtp2_as.broker,
            xtp2_as.company,
            xtp2_as.planned_obligation_id,
            xtp2_as.trade_obligation_id,
            xtp2_as.trade_obligation_uuid,
            xtp2_as.plan_id,
            xtp2_as.doc_by_pass_id,
            xtp2_as.plan_uuid,
            xtp2_as.trade_id,
            xtp2_as.trade_uuid,
            xtp2_as.trade_transaction_type,
            xtp2_as.circle_string_seq,
            xtp2_as.commodity,
            xtp2_as.counterparty,
            xtp2_as.crop_origin,
            xtp2_as.delivery_date,
            xtp2_as.delivery_end_date,
            xtp2_as.delivery_start_date,
            xtp2_as.grade,
            xtp2_as.incoterm,
            xtp2_as.location,
            xtp2_as.obligation_date,
            xtp2_as.planned_quantity,
            xtp2_as.price_type,
            xtp2_as.profitcenter,
            xtp2_as.quantityuom,
            xtp2_as.reference_number,
            xtp2_as.trade_date_time,
            xtp2_as.trade_price,
            xtp2_as.trade_price_currency,
            xtp2_as.trade_price_uom,
            xtp2_as.trade_quantity,
            xtp2_as.trade_type,
            xtp2_as.no_of_units,
            xtp2_as.remarks,
            xtp2_as.brand,
            xtp2_as.season,
            xtp2_as.load_location,
            xtp2_as.unload_location,
            xtp2_as.payment_term,
            xtp2_as.trader,
            xtp2_as.fx_rate,
            xtp2_as.provisional_fx_rate,
            xtp2_as.provisional_price_percentage,
            xtp2_as.provisional_price_type,
            xtp2_as.provisional_price,
            xtp2_as.tradesettlementcurrency,
            xtp2_as.trade_settlement_currency,
            xtp2_as.premiun_cost,
            xtp2_as.discount_cost,
            xtp2_as.total_trade_qty,
            xtp2_as.broker_reference_number,
            xtp2_as.provisional_price_uom,
            xtp2_as.provisional_price_currency,
            xtp2_as.planned_obligation_status,
            xtp2_as.parent_planned_obligation,
            xtp2_as.shipment_month,
            xtp2_as.external_record,
            xtp2_as.delivery_term_clause,
            xtp2_as.comments,
            xtp2_as.payment_terms_clause,
            xtp2_as.quantity_terms_clause,
            xtp2_as.quality_terms_clause,
            xtp2_as.pricing_terms_clause,
            xtp2_as.broker_reference,
            xtp2_as.trade_settlement_reference,
            xtp2_as.package_type,
            xtp2_as.contract_term,
            xtp2_as.external_package,
            xtp2_as.external_package_unit,
            xtp2_as.internal_package_unit,
            xtp2_as.internal_package,
            xtp2_as.provisional_pricing,
            xtp2_as.weight_basis,
            xtp2_as.tolerance_value,
            xtp2_as.external_reference,
            xaa2.balance_allocate_quantity AS balance_quantity,
            xaa2.actualization_id,
            xaa2.split_sequence_number,
            xaa2.balance_allocate_quantity,
            xaa2.load_quantity,
            xaa2.unload_quantity,
            xaa2.load_quantity AS actualized_quantity,
            xaa2.balance_allocate_quantity AS text_data
           FROM (taomish.xceler_tradeplanningservice_plannedtradeobligation xtp2_as
             JOIN taomish.xceler_actualizationservice_actualizedquantity xaa2 ON ((((xaa2.tenant_id)::text = (xtp2_as.tenant_id)::text) AND ((xaa2.planned_obligation_id)::text = (xtp2_as.planned_obligation_id)::text))))
          WHERE ((xaa2.balance_allocate_quantity &gt; (0)::double precision) AND (xtp2_as.trade_transaction_type = 1) AND (xtp2_as.balance_quantity &gt; (0)::double precision))
        UNION ALL
         SELECT xtp3.created_by,
            xtp3.created_timestamp,
            xtp3.tenant_id,
            xtp3.updated_by,
            xtp3.updated_timestamp,
            xtp3.broker,
            xtp3.company,
            xtp3.planned_obligation_id,
            xtp3.trade_obligation_id,
            xtp3.trade_obligation_uuid,
            xtp3.plan_id,
            xtp3.doc_by_pass_id,
            xtp3.plan_uuid,
            xtp3.trade_id,
            xtp3.trade_uuid,
            xtp3.trade_transaction_type,
            xtp3.circle_string_seq,
            xtp3.commodity,
            xtp3.counterparty,
            xtp3.crop_origin,
            xtp3.delivery_date,
            xtp3.delivery_end_date,
            xtp3.delivery_start_date,
            xtp3.grade,
            xtp3.incoterm,
            xtp3.location,
            xtp3.obligation_date,
            xtp3.planned_quantity,
            xtp3.price_type,
            xtp3.profitcenter,
            xtp3.quantityuom,
            xtp3.reference_number,
            xtp3.trade_date_time,
            xtp3.trade_price,
            xtp3.trade_price_currency,
            xtp3.trade_price_uom,
            xtp3.trade_quantity,
            xtp3.trade_type,
            xtp3.no_of_units,
            xtp3.remarks,
            xtp3.brand,
            xtp3.season,
            xtp3.load_location,
            xtp3.unload_location,
            xtp3.payment_term,
            xtp3.trader,
            xtp3.fx_rate,
            xtp3.provisional_fx_rate,
            xtp3.provisional_price_percentage,
            xtp3.provisional_price_type,
            xtp3.provisional_price,
            xtp3.tradesettlementcurrency,
            xtp3.trade_settlement_currency,
            xtp3.premiun_cost,
            xtp3.discount_cost,
            xtp3.total_trade_qty,
            xtp3.broker_reference_number,
            xtp3.provisional_price_uom,
            xtp3.provisional_price_currency,
            xtp3.planned_obligation_status,
            xtp3.parent_planned_obligation,
            xtp3.shipment_month,
            xtp3.external_record,
            xtp3.delivery_term_clause,
            xtp3.comments,
            xtp3.payment_terms_clause,
            xtp3.quantity_terms_clause,
            xtp3.quality_terms_clause,
            xtp3.pricing_terms_clause,
            xtp3.broker_reference,
            xtp3.trade_settlement_reference,
            xtp3.package_type,
            xtp3.contract_term,
            xtp3.external_package,
            xtp3.external_package_unit,
            xtp3.internal_package_unit,
            xtp3.internal_package,
            xtp3.provisional_pricing,
            xtp3.weight_basis,
            xtp3.tolerance_value,
            xtp3.external_reference,
            xtp3.balance_quantity,
            NULL::character varying AS actualization_id,
            0 AS split_sequence_number,
            NULL::double precision AS balance_allocate_quantity,
            NULL::double precision AS load_quantity,
            NULL::double precision AS unload_quantity,
            NULL::double precision AS actualized_quantity,
            xtp3.balance_quantity AS text_data
           FROM taomish.xceler_tradeplanningservice_plannedtradeobligation xtp3
          WHERE ((((xtp3.obligation_state -&gt;&gt; 'ACTUALIZED'::text))::boolean = false) AND (xtp3.balance_quantity &gt; (0)::double precision) AND (xtp3.trade_transaction_type = 1))
        )
 SELECT taomish.uuid_generate_v4() AS uuid,
    allocate_data.created_by,
    allocate_data.created_timestamp,
    allocate_data.tenant_id,
    allocate_data.updated_by,
    allocate_data.updated_timestamp,
    allocate_data.broker,
    allocate_data.company,
    allocate_data.planned_obligation_id,
    allocate_data.trade_obligation_id,
    allocate_data.trade_obligation_uuid,
    allocate_data.plan_id,
    allocate_data.doc_by_pass_id,
    allocate_data.plan_uuid,
    allocate_data.trade_id,
    allocate_data.trade_uuid,
    allocate_data.trade_transaction_type,
    allocate_data.circle_string_seq,
    allocate_data.commodity,
    allocate_data.counterparty,
    allocate_data.crop_origin,
    allocate_data.delivery_date,
    allocate_data.delivery_end_date,
    allocate_data.delivery_start_date,
    allocate_data.grade,
    allocate_data.incoterm,
    allocate_data.location,
    allocate_data.obligation_date,
    allocate_data.planned_quantity,
    allocate_data.price_type,
    allocate_data.profitcenter,
    allocate_data.quantityuom,
    allocate_data.reference_number,
    allocate_data.trade_date_time,
    allocate_data.trade_price,
    allocate_data.trade_price_currency,
    allocate_data.trade_price_uom,
    allocate_data.trade_quantity,
    allocate_data.trade_type,
    allocate_data.no_of_units,
    allocate_data.remarks,
    allocate_data.brand,
    allocate_data.season,
    allocate_data.load_location,
    allocate_data.unload_location,
    allocate_data.payment_term,
    allocate_data.trader,
    allocate_data.fx_rate,
    allocate_data.provisional_fx_rate,
    allocate_data.provisional_price_percentage,
    allocate_data.provisional_price_type,
    allocate_data.provisional_price,
    allocate_data.tradesettlementcurrency,
    allocate_data.trade_settlement_currency,
    allocate_data.premiun_cost,
    allocate_data.discount_cost,
    allocate_data.total_trade_qty,
    allocate_data.broker_reference_number,
    allocate_data.provisional_price_uom,
    allocate_data.provisional_price_currency,
    allocate_data.planned_obligation_status,
    allocate_data.parent_planned_obligation,
    allocate_data.shipment_month,
    allocate_data.external_record,
    allocate_data.delivery_term_clause,
    allocate_data.comments,
    allocate_data.payment_terms_clause,
    allocate_data.quantity_terms_clause,
    allocate_data.quality_terms_clause,
    allocate_data.pricing_terms_clause,
    allocate_data.broker_reference,
    allocate_data.trade_settlement_reference,
    allocate_data.package_type,
    allocate_data.contract_term,
    allocate_data.external_package,
    allocate_data.external_package_unit,
    allocate_data.internal_package_unit,
    allocate_data.internal_package,
    allocate_data.provisional_pricing,
    allocate_data.weight_basis,
    allocate_data.tolerance_value,
    allocate_data.external_reference,
    allocate_data.balance_quantity,
    allocate_data.actualization_id,
    allocate_data.split_sequence_number,
    allocate_data.balance_allocate_quantity,
    xab.bl_number,
    allocate_data.load_quantity,
    allocate_data.unload_quantity,
    allocate_data.load_quantity AS actualized_quantity,
    allocate_data.text_data
   FROM (allocate_data
     LEFT JOIN taomish.xceler_actualizationservice_billoflanding xab ON ((((allocate_data.tenant_id)::text = (xab.tenant_id)::text) AND ((allocate_data.planned_obligation_id)::text = (xab.planned_obligation_id)::text) AND (allocate_data.split_sequence_number = xab.split_sequence_number))))
  ORDER BY allocate_data.updated_timestamp DESC;</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-136">
        <createView fullDefinition="false" viewName="xceler_stockservice_stockplannedobligation">WITH inter AS (
         SELECT xtp_1.tenant_id,
            xtp_1.planned_obligation_id
           FROM taomish.xceler_tradeplanningservice_plannedtradeobligation xtp_1
          WHERE ((xtp_1.plan_id IS NOT NULL) AND (xtp_1.trade_transaction_type = 0) AND (xtp_1.balance_quantity = (0)::double precision))
        INTERSECT
         SELECT xtt.tenant_id,
            xtt.planned_obligation_id
           FROM taomish.xceler_tradeplanningservice_tradelink xtt
        ), trade_link AS (
         SELECT xceler_tradeplanningservice_tradelink.tenant_id,
            xceler_tradeplanningservice_tradelink.planned_obligation_id,
            row_number() OVER (PARTITION BY xceler_tradeplanningservice_tradelink.planned_obligation_id) AS rn
           FROM taomish.xceler_tradeplanningservice_tradelink
        )
 SELECT taomish.uuid_generate_v4() AS uuid,
    ft.obligation_uuid,
    ft.created_by,
    ft.created_timestamp,
    ft.tenant_id,
    ft.updated_by,
    ft.updated_timestamp,
    ft.broker,
    ft.circle_string_seq,
    ft.commodity,
    ft.company,
    ft.counterparty,
    ft.crop_origin,
    ft.delivery_date,
    ft.delivery_end_date,
    ft.delivery_start_date,
    ft.grade,
    ft.incoterm,
    ft.location,
    ft.obligation_date,
    ft.plan_id,
    ft.plan_uuid,
    ft.planned_obligation_id,
    ft.price_type,
    ft.profitcenter,
    ft.quantityuom,
    ft.reference_number,
    ft.trade_date_time,
    ft.trade_id,
    ft.trade_obligation_id,
    ft.trade_obligation_uuid,
    ft.trade_price,
    ft.trade_price_currency,
    ft.trade_price_uom,
    ft.trade_quantity,
    ft.trade_transaction_type,
    ft.trade_type,
    ft.trade_uuid,
    ft.no_of_units,
    ft.remarks,
    ft.brand,
    ft.season,
    ft.load_location,
    ft.unload_location,
    ft.payment_term,
    ft.trader,
    ft.fx_rate,
    ft.provisional_fx_rate,
    ft.provisional_price_percentage,
    ft.provisional_price_type,
    ft.provisional_price,
    ft.tradesettlementcurrency,
    ft.trade_settlement_currency,
    ft.premiun_cost,
    ft.discount_cost,
    ft.total_trade_qty,
    ft.broker_reference_number,
    ft.provisional_price_uom,
    ft.provisional_price_currency,
    ft.planned_obligation_status,
    ft.parent_planned_obligation,
    ft.shipment_month,
    ft.external_record,
    ft.delivery_term_clause,
    ft.payment_terms_clause,
    ft.quantity_terms_clause,
    ft.quality_terms_clause,
    ft.pricing_terms_clause,
    ft.broker_reference,
    ft.comments,
    ft.load_quantity,
    ft.unload_quantity,
    ft.planned_quantity,
    ft.balance_quantity,
    ft.vessel_id,
    ft.vessel_name,
    ft.split_sequence_number,
    ft.bl_number,
    ft.tolerance_value,
    ft.quantity_tolerance_type,
    ft.linked_with_sell
   FROM ( SELECT row_number() OVER (PARTITION BY xtp.planned_obligation_id) AS rn,
            inter.planned_obligation_id AS inter_id,
            xtp.uuid AS obligation_uuid,
            xtp.created_by,
            xtp.created_timestamp,
            xtp.tenant_id,
            xtp.updated_by,
            xtp.updated_timestamp,
            xtp.broker,
            xtp.circle_string_seq,
            xtp.commodity,
            xtp.company,
            xtp.counterparty,
            xtp.crop_origin,
            xtp.delivery_date,
            xtp.delivery_end_date,
            xtp.delivery_start_date,
            xtp.grade,
            xtp.incoterm,
            xtp.location,
            xtp.obligation_date,
            xtp.plan_id,
            xtp.plan_uuid,
            xtp.planned_obligation_id,
            xtp.price_type,
            xtp.profitcenter,
            xtp.quantityuom,
            xtp.reference_number,
            xtp.trade_date_time,
            xtp.trade_id,
            xtp.trade_obligation_id,
            xtp.trade_obligation_uuid,
            xtp.trade_price,
            xtp.trade_price_currency,
            xtp.trade_price_uom,
            xtp.trade_quantity,
            xtp.trade_transaction_type,
            xtp.trade_type,
            xtp.trade_uuid,
            xtp.no_of_units,
            xtp.remarks,
            xtp.brand,
            xtp.season,
            xtp.load_location,
            xtp.unload_location,
            xtp.payment_term,
            xtp.trader,
            xtp.fx_rate,
            xtp.provisional_fx_rate,
            xtp.provisional_price_percentage,
            xtp.provisional_price_type,
            xtp.provisional_price,
            xtp.tradesettlementcurrency,
            xtp.trade_settlement_currency,
            xtp.premiun_cost,
            xtp.discount_cost,
            xtp.total_trade_qty,
            xtp.broker_reference_number,
            xtp.provisional_price_uom,
            xtp.provisional_price_currency,
            xtp.planned_obligation_status,
            xtp.parent_planned_obligation,
            xtp.shipment_month,
            xtp.external_record,
            xtp.delivery_term_clause,
            xtp.payment_terms_clause,
            xtp.quantity_terms_clause,
            xtp.quality_terms_clause,
            xtp.pricing_terms_clause,
            xtp.broker_reference,
            xtp.comments,
            xpp.tolerance_value,
            xpp.quantity_tolerance_type,
            xaa.load_quantity,
            xaa.unload_quantity,
            COALESCE(xtp.planned_quantity, (0)::double precision) AS planned_quantity,
                CASE
                    WHEN (xas.planned_obligation_id IS NOT NULL) THEN xaa.balance_allocate_quantity
                    WHEN (xas.planned_obligation_id IS NULL) THEN xtp.balance_quantity
                    ELSE NULL::double precision
                END AS balance_quantity,
            xts.vessel_id,
            xts.vessel_name,
            xas.split_sequence_number,
            xas.bl_number,
            (xtt2.planned_obligation_id IS NOT NULL) AS linked_with_sell
           FROM ((((((taomish.xceler_tradeplanningservice_plannedtradeobligation xtp
             LEFT JOIN taomish.xceler_actualizationservice_actualizedquantity xaa ON ((((xaa.tenant_id)::text = (xtp.tenant_id)::text) AND ((xaa.planned_obligation_id)::text = (xtp.planned_obligation_id)::text) AND (xtp.balance_quantity &gt; (0)::double precision))))
             LEFT JOIN taomish.xceler_transportallocationservice_seafreightdetails xts ON ((((xts.tenant_id)::text = (xtp.tenant_id)::text) AND ((xts.plan_id)::text = (xtp.plan_id)::text))))
             LEFT JOIN taomish.xceler_actualizationservice_billoflanding xas ON ((((xas.tenant_id)::text = (xtp.tenant_id)::text) AND ((xas.actualization_id)::text = (xaa.actualization_id)::text))))
             LEFT JOIN inter ON ((((inter.planned_obligation_id)::text = (xtp.planned_obligation_id)::text) AND ((inter.tenant_id)::text = (xtp.tenant_id)::text))))
             JOIN taomish.xceler_physicaltradeservice_physicaltrade xpp ON ((((xpp.tenant_id)::text = (xtp.tenant_id)::text) AND ((xpp.trade_id)::text = (xtp.trade_id)::text))))
             LEFT JOIN trade_link xtt2 ON ((((xtt2.tenant_id)::text = (xtp.tenant_id)::text) AND ((xtt2.planned_obligation_id)::text = (xtp.planned_obligation_id)::text) AND (xtt2.rn = 1))))
          WHERE (xtp.trade_transaction_type = 0)) ft
  WHERE ((ft.inter_id IS NULL) AND
        CASE
            WHEN (ft.bl_number IS NULL) THEN (ft.rn = 1)
            WHEN (ft.bl_number IS NOT NULL) THEN (ft.rn = ft.rn)
            ELSE NULL::boolean
        END AND (ft.balance_quantity &gt; (0)::double precision))
  ORDER BY ft.created_timestamp DESC;</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-137">
        <createView fullDefinition="false" viewName="xceler_stockservice_stockplannedobligation_obligation_state">SELECT xss.uuid,
    xss.obligation_uuid,
    xss.created_by,
    xss.created_timestamp,
    xss.tenant_id,
    xss.updated_by,
    xss.updated_timestamp,
    xss.broker,
    xss.circle_string_seq,
    xss.commodity,
    xss.company,
    xss.counterparty,
    xss.crop_origin,
    xss.delivery_date,
    xss.delivery_end_date,
    xss.delivery_start_date,
    xss.grade,
    xss.incoterm,
    xss.location,
    xss.obligation_date,
    xss.plan_id,
    xss.plan_uuid,
    xss.planned_obligation_id,
    xss.price_type,
    xss.profitcenter,
    xss.quantityuom,
    xss.reference_number,
    xss.trade_date_time,
    xss.trade_id,
    xss.trade_obligation_id,
    xss.trade_obligation_uuid,
    xss.trade_price,
    xss.trade_price_currency,
    xss.trade_price_uom,
    xss.trade_quantity,
    xss.trade_transaction_type,
    xss.trade_type,
    xss.trade_uuid,
    xss.no_of_units,
    xss.remarks,
    xss.brand,
    xss.season,
    xss.load_location,
    xss.unload_location,
    xss.payment_term,
    xss.trader,
    xss.fx_rate,
    xss.provisional_fx_rate,
    xss.provisional_price_percentage,
    xss.provisional_price_type,
    xss.provisional_price,
    xss.tradesettlementcurrency,
    xss.trade_settlement_currency,
    xss.premiun_cost,
    xss.discount_cost,
    xss.total_trade_qty,
    xss.broker_reference_number,
    xss.provisional_price_uom,
    xss.provisional_price_currency,
    xss.planned_obligation_status,
    xss.parent_planned_obligation,
    xss.shipment_month,
    xss.external_record,
    xss.delivery_term_clause,
    xss.payment_terms_clause,
    xss.quantity_terms_clause,
    xss.quality_terms_clause,
    xss.pricing_terms_clause,
    xss.broker_reference,
    xss.comments,
    xss.load_quantity,
    xss.unload_quantity,
    xss.planned_quantity,
    xss.balance_quantity,
    xss.vessel_id,
    xss.vessel_name,
    xss.split_sequence_number,
    xss.bl_number,
    xss.tolerance_value,
    xss.quantity_tolerance_type,
    xss.linked_with_sell,
    xtp.obligation_state
   FROM (taomish.xceler_stockservice_stockplannedobligation xss
     LEFT JOIN ( SELECT xceler_tradeplanningservice_plannedtradeobligation.obligation_state,
            xceler_tradeplanningservice_plannedtradeobligation.uuid
           FROM taomish.xceler_tradeplanningservice_plannedtradeobligation) xtp ON ((xss.obligation_uuid = xtp.uuid)))
  GROUP BY xss.uuid, xss.tolerance_value, xss.linked_with_sell, xtp.obligation_state, xss.obligation_uuid, xss.created_by, xss.created_timestamp, xss.tenant_id, xss.updated_by, xss.updated_timestamp, xss.broker, xss.circle_string_seq, xss.commodity, xss.company, xss.counterparty, xss.crop_origin, xss.delivery_date, xss.delivery_end_date, xss.delivery_start_date, xss.grade, xss.incoterm, xss.location, xss.obligation_date, xss.plan_id, xss.plan_uuid, xss.planned_obligation_id, xss.price_type, xss.profitcenter, xss.quantityuom, xss.reference_number, xss.trade_date_time, xss.trade_id, xss.trade_obligation_id, xss.trade_obligation_uuid, xss.trade_price, xss.trade_price_currency, xss.trade_price_uom, xss.trade_quantity, xss.trade_transaction_type, xss.trade_type, xss.trade_uuid, xss.no_of_units, xss.remarks, xss.brand, xss.season, xss.load_location, xss.unload_location, xss.payment_term, xss.trader, xss.fx_rate, xss.provisional_fx_rate, xss.provisional_price_percentage, xss.provisional_price_type, xss.provisional_price, xss.tradesettlementcurrency, xss.trade_settlement_currency, xss.premiun_cost, xss.discount_cost, xss.total_trade_qty, xss.broker_reference_number, xss.provisional_price_uom, xss.provisional_price_currency, xss.planned_obligation_status, xss.parent_planned_obligation, xss.shipment_month, xss.external_record, xss.delivery_term_clause, xss.payment_terms_clause, xss.quantity_terms_clause, xss.quality_terms_clause, xss.pricing_terms_clause, xss.broker_reference, xss.comments, xss.load_quantity, xss.unload_quantity, xss.planned_quantity, xss.balance_quantity, xss.vessel_id, xss.vessel_name, xss.split_sequence_number, xss.bl_number, xss.quantity_tolerance_type;</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-138">
        <createView fullDefinition="false" viewName="xceler_allocated_details_in_vessel_plan">SELECT taomish.uuid_generate_v4() AS uuid,
    xtp2.tenant_id,
    xtt.created_timestamp,
    xtp2.plan_id,
    xab.split_sequence_number,
    xtp2.planned_obligation_id AS sell_planned_obligation_id,
    xtp2.counterparty AS sell_counterparty,
    xtp2.commodity AS sell_commodity,
    xtp2.crop_origin AS sell_crop_origin,
    xtp2.shipment_month AS sell_shipment_month,
    xtp2.planned_quantity AS sell_planned_quantity,
    xtp2.trade_price AS sell_trade_price,
    xtp2.trade_price_currency AS sell_price_currency,
    xtp2.trade_price_uom AS sell_price_uom,
    xtp2.created_timestamp AS sell_created_timestamp,
    xtp1.counterparty AS buy_counterparty,
    xtp1.planned_quantity AS buy_planned_quantity,
    xtp1.quantityuom AS buy_quantityuom,
    xtp1.crop_origin AS buy_crop_origin,
    xtp1.shipment_month AS buy_shipment_month,
    xtp1.trade_price AS buy_trade_price,
    xtp1.trade_price_currency AS buy_price_currency,
    xtp1.trade_price_uom AS buy_price_uom,
    xtp1.created_timestamp AS buy_created_timestamp,
    xts2.load_port,
    xtp1.planned_obligation_id AS buy_planned_obligation_id,
    xtt.match_quantity,
    xtt.allocated_quantity,
    xab.stowage_no AS buy_stowage_no,
    xab.bl_number,
    xab.bl_date,
    xtt.status
   FROM (((((taomish.xceler_tradeplanningservice_tradelink xtt
     LEFT JOIN taomish.xceler_tradeplanningservice_plannedtradeobligation xtp1 ON ((((xtp1.tenant_id)::text = (xtt.tenant_id)::text) AND ((xtp1.planned_obligation_id)::text = (xtt.planned_obligation_id)::text))))
     LEFT JOIN taomish.xceler_tradeplanningservice_plannedtradeobligation xtp2 ON ((((xtp2.tenant_id)::text = (xtt.tenant_id)::text) AND ((xtp2.planned_obligation_id)::text = (xtt.linked_with)::text))))
     LEFT JOIN taomish.xceler_actualizationservice_billoflanding xab ON ((((xtp1.tenant_id)::text = (xab.tenant_id)::text) AND ((xtp1.planned_obligation_id)::text = (xab.planned_obligation_id)::text) AND (xab.split_sequence_number = (xtt.split_sequence_number)::double precision))))
     LEFT JOIN taomish.xceler_transportallocationservice_seafreightdetails xts ON ((((xts.tenant_id)::text = (xts.tenant_id)::text) AND ((xts.plan_id)::text = (xtt.planning_id)::text))))
     LEFT JOIN taomish.xceler_transportallocationservice_seafreightloaddetails xts2 ON ((((xts2.tenant_id)::text = (xtt.tenant_id)::text) AND ((xts2.vessel_id)::text = (xts.vessel_id)::text))));</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-139">
        <createView fullDefinition="false" viewName="xceler_pricingservice_pricelineallocationview">SELECT taomish.uuid_generate_v4() AS uuid,
    pa.created_by,
    pa.created_timestamp,
    pa.tenant_id,
    pa.updated_by,
    pa.updated_timestamp,
    pa.price_line_id,
    pa.price_allocation_id AS allocation_id,
    pa.obligation_id,
    pa.trade_id,
    pa.quantity AS allocated_quantity,
    pa.price,
    pa.price_currency,
    pa.quantity_uom,
    cf.trade_price_uom,
    cf.stage AS invoice_status,
        CASE
            WHEN (cf.invoice_number IS NOT NULL) THEN 'Yes'::text
            ELSE 'No'::text
        END AS is_invoice_final
   FROM (taomish.xceler_pricingservice_priceallocation pa
     JOIN taomish.xceler_cashflowservice_cashflowdata cf ON ((((pa.obligation_id)::text = (cf.planned_obligation_id)::text) AND ((pa.price_allocation_id)::text = (cf.allocation_id)::text))));</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-140">
        <createView fullDefinition="false" viewName="xceler_shipment_with_vessel_report">SELECT taomish.uuid_generate_v4() AS uuid,
    xtp.tenant_id,
    xtp.profitcenter,
    xtp.commodity,
    xtp.price_type,
    xtp.trade_id,
    xtp.trade_date_time,
    xtp.trade_type,
    xtp.company,
        CASE
            WHEN ((xtp.obligation_state -&gt;&gt; 'ACTUALIZED'::text))::boolean THEN 'Actualized'::text
            ELSE 'Confirmed'::text
        END AS trade_status,
    xtp.shipment_month,
    xtp.counterparty,
    xtp.trade_price,
    xtp.planned_quantity AS quantity,
    xtp.quantityuom AS uom,
    xaa.load_quantity AS matched_quantity,
    xtp.broker,
    xtp.broker_reference_number,
    xtp.incoterm,
    xptt.price_status,
    xtp.trade_price_currency,
    xtp.unload_location AS location,
    xtp.load_location,
    xtp.unload_location,
    xtp.payment_term,
    xtt1.parent AS country_of_receipt,
    xtt2.parent AS country_of_delivery,
    xtp.delivery_start_date AS load_start_date,
    xtp.delivery_end_date AS load_end_date,
    xtp.trader,
    xab.bl_number,
    xts.voyage_no,
    xts.vessel_name
   FROM ((((((( SELECT xtp_1.uuid,
            xtp_1.created_by,
            xtp_1.created_timestamp,
            xtp_1.tenant_id,
            xtp_1.updated_by,
            xtp_1.updated_timestamp,
            xtp_1.broker,
            xtp_1.circle_string_seq,
            xtp_1.commodity,
            xtp_1.company,
            xtp_1.counterparty,
            xtp_1.crop_origin,
            xtp_1.delivery_date,
            xtp_1.delivery_end_date,
            xtp_1.delivery_start_date,
            xtp_1.grade,
            xtp_1.incoterm,
            xtp_1.location,
            xtp_1.obligation_date,
            xtp_1.plan_id,
            xtp_1.plan_uuid,
            xtp_1.planned_obligation_id,
            xtp_1.planned_quantity,
            xtp_1.price_type,
            xtp_1.profitcenter,
            xtp_1.quantityuom,
            xtp_1.reference_number,
            xtp_1.trade_date_time,
            xtp_1.trade_id,
            xtp_1.trade_obligation_id,
            xtp_1.trade_obligation_uuid,
            xtp_1.trade_price,
            xtp_1.trade_price_currency,
            xtp_1.trade_price_uom,
            xtp_1.trade_quantity,
            xtp_1.trade_transaction_type,
            xtp_1.trade_type,
            xtp_1.trade_uuid,
            xtp_1.no_of_units,
            xtp_1.remarks,
            xtp_1.brand,
            xtp_1.season,
            xtp_1.load_location,
            xtp_1.unload_location,
            xtp_1.payment_term,
            xtp_1.trader,
            xtp_1.fx_rate,
            xtp_1.provisional_fx_rate,
            xtp_1.provisional_price_percentage,
            xtp_1.provisional_price_type,
            xtp_1.provisional_price,
            xtp_1.tradesettlementcurrency,
            xtp_1.trade_settlement_currency,
            xtp_1.premiun_cost,
            xtp_1.discount_cost,
            xtp_1.total_trade_qty,
            xtp_1.broker_reference_number,
            xtp_1.provisional_price_uom,
            xtp_1.provisional_price_currency,
            xtp_1.planned_obligation_status,
            xtp_1.parent_planned_obligation,
            xtp_1.shipment_month,
            xtp_1.external_record,
            xtp_1.delivery_term_clause,
            xtp_1.payment_terms_clause,
            xtp_1.quantity_terms_clause,
            xtp_1.quality_terms_clause,
            xtp_1.pricing_terms_clause,
            xtp_1.broker_reference,
            xtp_1.comments,
            xtp_1.trade_settlement_reference,
            xtp_1.doc_by_pass_id,
            xtp_1.package_type,
            xtp_1.balance_quantity,
            xtp_1.contract_term,
            xtp_1.external_package,
            xtp_1.external_package_unit,
            xtp_1.internal_package_unit,
            xtp_1.internal_package,
            xtp_1.provisional_pricing,
            xtp_1.weight_basis,
            xtp_1.tolerance_value,
            xtp_1.external_reference,
            xtp_1.price_ticker,
            xtp_1.special_instructions,
            xtp_1.match_type,
            xtp_1.settlement_tolerance_value,
            xtp_1.obligation_state,
            xtp_1.quotation_period_clause,
            xtp_1.commodity_code,
            xtp_1.location_type,
            xtp_1.load_location_type,
            xtp_1.unload_location_type,
            xtp_1.counterparty_name,
            xtp_1.company_code,
            xtp_1.profitcenter_code
           FROM taomish.xceler_tradeplanningservice_plannedtradeobligation xtp_1
          WHERE (((xtp_1.trade_type)::text = ANY (ARRAY[('Physical'::character varying)::text, ('Paper'::character varying)::text])) AND ((xtp_1.planned_obligation_status)::text = 'active'::text) AND (xtp_1.external_record = false))) xtp
     LEFT JOIN taomish.xceler_pricingservice_advancedtradeprice xptt ON ((((xtp.tenant_id)::text = (xptt.tenant_id)::text) AND ((xtp.trade_id)::text = (xptt.obligation_id)::text))))
     LEFT JOIN taomish.xceler_configservice_location xtt1 ON ((((xtt1.name)::text = (xtp.load_location)::text) AND ((xtp.tenant_id)::text = (xtt1.tenant_id)::text))))
     LEFT JOIN taomish.xceler_configservice_location xtt2 ON ((((xtt2.name)::text = (xtp.unload_location)::text) AND ((xtp.tenant_id)::text = (xtt2.tenant_id)::text))))
     LEFT JOIN taomish.xceler_actualizationservice_actualizedquantity xaa ON ((((xtp.planned_obligation_id)::text = (xaa.planned_obligation_id)::text) AND ((xtp.tenant_id)::text = (xaa.tenant_id)::text))))
     LEFT JOIN taomish.xceler_actualizationservice_billoflanding xab ON ((((xaa.planned_obligation_id)::text = (xab.planned_obligation_id)::text) AND ((xaa.tenant_id)::text = (xab.tenant_id)::text) AND (xaa.split_sequence_number = xab.split_sequence_number))))
     LEFT JOIN ( SELECT xceler_transportallocationservice_seafreightdetails.tenant_id,
            xceler_transportallocationservice_seafreightdetails.vessel_name,
            xceler_transportallocationservice_seafreightdetails.voyage_no,
            jsonb_array_elements_text(xceler_transportallocationservice_seafreightdetails.planned_obligation_ids) AS id
           FROM taomish.xceler_transportallocationservice_seafreightdetails) xts ON ((((xtp.planned_obligation_id)::text = xts.id) AND ((xtp.tenant_id)::text = (xts.tenant_id)::text))));</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-141">
        <createView fullDefinition="false" viewName="xceler_invoice_report">SELECT taomish.uuid_generate_v4() AS uuid,
    invoice.tenant_id,
    invoice.invoice_number,
    invoice.external_reference,
    invoice.counterparty_ref_number,
    invoice.invoice_type,
    invoice.invoice_date,
    invoice.created_timestamp AS created_at,
    invoice.company,
    invoice.status,
    invoice.unit_price AS price,
    invoice.commodity,
    NULL::text AS settle_counterparty_country,
    invoice.quantity,
    invoice.currency,
    invoice.uom,
    invoice.vessel_name,
    invoice.port_of_loading,
    invoice.port_of_discharging,
    invoice.trade_id,
    invoice.total AS total_amount,
    phy.payment_term,
    invoice.incoterm,
    phy.trader,
    invoice.settlement_amount AS invoice_amount,
    invoice.remit_to,
    invoice.payment_due_date,
    invoice.invoice_generated_by AS generated_by,
    invoice.bank_name AS b_name,
    invoice.delivery_end_date,
    phy.shipment_month,
    invoice.bl_date,
    invoice.vessel_id AS voyage_number,
    invoice.purpose AS remark,
    invoice.planned_obligation_id,
    invoice.counterparty AS contract_counterparty,
    phy.trade_type,
    invoice.trade_date,
    invoice.bl_number AS broker_ref,
    phy.match_type AS plan_match_type,
    NULL::text AS load_country,
    NULL::text AS unload_country,
    NULL::text AS contract_counterparty_country,
    NULL::text AS settle_counterparty,
    NULL::text AS bank_name
   FROM (( SELECT inv.uuid,
            inv.created_by,
            inv.created_timestamp,
            inv.tenant_id,
            inv.updated_by,
            inv.updated_timestamp,
            inv.account_number,
            inv.adjustment_amount,
            inv.amount,
            inv.attachment_name,
            inv.bank_address,
            inv.bank_name,
            inv.bl_date,
            inv.bl_number,
            inv.commodity,
            inv.company,
            inv.company_address,
            inv.contract_number,
            inv.counterparty,
            inv.counterparty_address,
            inv.counterparty_ref_number,
            inv.currency,
            inv.delivery_end_date,
            inv.delivery_terms,
            inv.finance_approved_by,
            inv.finance_approved_date,
            inv.fx_rate,
            inv.incoterm,
            inv.invoice_approved_by,
            inv.invoice_date,
            inv.invoice_document_url,
            inv.invoice_generated_by,
            inv.invoice_number,
            inv.invoice_type,
            inv.limits_or_tolerance,
            inv.notify_party_address,
            inv.notify_party_name,
            inv.payment_amount,
            inv.payment_confirmed_by,
            inv.payment_confirmed_date,
            inv.payment_date,
            inv.payment_due_date,
            inv.payment_ref_number,
            inv.port_of_discharging,
            inv.port_of_loading,
            inv.posting_date,
            inv.purpose,
            inv.quantity,
            inv.remit_to,
            inv.settlement_amount,
            inv.shipment,
            inv.status,
            inv.swift_code,
            inv.terms_of_payment,
            inv.total,
            inv.trade_date,
            inv.trade_id,
            inv.trader_approval_date,
            inv.trader_name,
            inv.unit_price,
            inv.uom,
            inv.planned_obligation_ids,
            inv.vessel_name,
            inv.attachment_url,
            inv.attached_file_name,
            inv.financial_amount_type,
            inv.external_reference,
            inv.account_code,
            inv.external_system_invoice_id,
            inv.counter_party_phone_number,
            inv.total_in_words,
            inv.invoice_document,
            inv.final_invoice_type,
            inv.old_invoice_id,
            inv.full_invoice_type,
            inv.counterparty_type,
            inv.planned_obligation_id,
            inv.unpost_reason,
            inv.vessel_id,
            inv.split_number,
            inv.trade_price_uom,
            inv.parent_invoice_number
           FROM taomish.xceler_tradesettlementservice_tradeinvoice inv
          WHERE (lower((inv.status)::text) &lt;&gt; 'void'::text)) invoice
     LEFT JOIN taomish.xceler_tradeplanningservice_plannedtradeobligation phy ON ((((invoice.planned_obligation_id)::text = (phy.planned_obligation_id)::text) AND ((invoice.tenant_id)::text = (phy.tenant_id)::text))));</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-142">
        <createView fullDefinition="false" remarks="VIEW" viewName="xceler_physical_paper_daily_trade_report">SELECT taomish.uuid_generate_v4() AS uuid,
    xtp.tenant_id,
    xtp.profitcenter,
    xtp.commodity,
    xtp.price_type,
    xtp.trade_id,
    xtp.trade_date_time,
    xtp.trade_type,
    xtp.company,
    'Confirmed'::text AS trade_status,
    xtp.shipment_month,
    xtp.counterparty,
    xtp.trade_price,
    xtp.planned_quantity AS quantity,
    xtp.quantityuom AS uom,
    (xtp.planned_quantity - xtp.balance_quantity) AS matched_quantity,
    xtp.broker,
    xtp.broker_reference_number,
    xtp.incoterm,
    xptt.price_status,
    xtp.trade_price_currency,
    xtp.location,
    xtp.load_location,
    xtp.unload_location,
    xtt1.parent AS country_of_receipt,
    xtt2.parent AS country_of_delivery,
    xtp.delivery_start_date AS load_start_date,
    xtp.delivery_end_date AS load_end_date,
    xtp.trader,
    xtp.payment_term
   FROM (((( SELECT xtp_1.uuid,
            xtp_1.created_by,
            xtp_1.created_timestamp,
            xtp_1.tenant_id,
            xtp_1.updated_by,
            xtp_1.updated_timestamp,
            xtp_1.broker,
            xtp_1.circle_string_seq,
            xtp_1.commodity,
            xtp_1.company,
            xtp_1.counterparty,
            xtp_1.crop_origin,
            xtp_1.delivery_date,
            xtp_1.delivery_end_date,
            xtp_1.delivery_start_date,
            xtp_1.grade,
            xtp_1.incoterm,
            xtp_1.location,
            xtp_1.obligation_date,
            xtp_1.plan_id,
            xtp_1.plan_uuid,
            xtp_1.planned_obligation_id,
            xtp_1.planned_quantity,
            xtp_1.price_type,
            xtp_1.profitcenter,
            xtp_1.quantityuom,
            xtp_1.reference_number,
            xtp_1.trade_date_time,
            xtp_1.trade_id,
            xtp_1.trade_obligation_id,
            xtp_1.trade_obligation_uuid,
            xtp_1.trade_price,
            xtp_1.trade_price_currency,
            xtp_1.trade_price_uom,
            xtp_1.trade_quantity,
            xtp_1.trade_transaction_type,
            xtp_1.trade_type,
            xtp_1.trade_uuid,
            xtp_1.no_of_units,
            xtp_1.remarks,
            xtp_1.brand,
            xtp_1.season,
            xtp_1.load_location,
            xtp_1.unload_location,
            xtp_1.payment_term,
            xtp_1.trader,
            xtp_1.fx_rate,
            xtp_1.provisional_fx_rate,
            xtp_1.provisional_price_percentage,
            xtp_1.provisional_price_type,
            xtp_1.provisional_price,
            xtp_1.tradesettlementcurrency,
            xtp_1.trade_settlement_currency,
            xtp_1.premiun_cost,
            xtp_1.discount_cost,
            xtp_1.total_trade_qty,
            xtp_1.broker_reference_number,
            xtp_1.provisional_price_uom,
            xtp_1.provisional_price_currency,
            xtp_1.planned_obligation_status,
            xtp_1.parent_planned_obligation,
            xtp_1.shipment_month,
            xtp_1.external_record,
            xtp_1.delivery_term_clause,
            xtp_1.payment_terms_clause,
            xtp_1.quantity_terms_clause,
            xtp_1.quality_terms_clause,
            xtp_1.pricing_terms_clause,
            xtp_1.broker_reference,
            xtp_1.comments,
            xtp_1.trade_settlement_reference,
            xtp_1.doc_by_pass_id,
            xtp_1.package_type,
            xtp_1.balance_quantity,
            xtp_1.contract_term,
            xtp_1.external_package,
            xtp_1.external_package_unit,
            xtp_1.internal_package_unit,
            xtp_1.internal_package,
            xtp_1.provisional_pricing,
            xtp_1.weight_basis,
            xtp_1.tolerance_value,
            xtp_1.external_reference,
            xtp_1.price_ticker,
            xtp_1.special_instructions,
            xtp_1.match_type,
            xtp_1.settlement_tolerance_value,
            xtp_1.obligation_state,
            xtp_1.quotation_period_clause,
            xtp_1.commodity_code,
            xtp_1.location_type,
            xtp_1.load_location_type,
            xtp_1.unload_location_type,
            xtp_1.counterparty_name,
            xtp_1.company_code,
            xtp_1.profitcenter_code
           FROM taomish.xceler_tradeplanningservice_plannedtradeobligation xtp_1
          WHERE (((xtp_1.trade_type)::text = ANY ((ARRAY['Physical'::character varying, 'Paper'::character varying])::text[])) AND ((xtp_1.planned_obligation_status)::text = 'active'::text) AND (xtp_1.external_record IS FALSE) AND ((xtp_1.obligation_state -&gt;&gt; 'ACTUALIZED'::text) = 'false'::text))) xtp
     LEFT JOIN taomish.xceler_pricingservice_advancedtradeprice xptt ON ((((xtp.tenant_id)::text = (xptt.tenant_id)::text) AND ((xtp.trade_id)::text = (xptt.obligation_id)::text))))
     LEFT JOIN taomish.xceler_configservice_location xtt1 ON ((((xtt1.name)::text = (xtp.load_location)::text) AND ((xtp.tenant_id)::text = (xtt1.tenant_id)::text))))
     LEFT JOIN taomish.xceler_configservice_location xtt2 ON ((((xtt2.name)::text = (xtp.unload_location)::text) AND ((xtp.tenant_id)::text = (xtt2.tenant_id)::text))));</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-143">
        <createView fullDefinition="false" viewName="vw_xceler_report_paper_trade_brokerage_report">SELECT taomish.uuid_generate_v4() AS uuid,
    xtp.tenant_id,
    xtp.trade_id,
    xtp.planned_obligation_id,
    xtp.trade_type,
    xtp.company,
    xtp.commodity,
    xtp.trade_date_time,
    xtp.broker_reference,
    xtp.broker,
    xtp.counterparty,
    xtp.profitcenter,
    xtp.planned_quantity AS contract_quantity,
    xtp.incoterm,
    xtp.trade_price_currency AS currency,
    xtp.trade_price,
    xct.cost AS commission,
    xaa.load_quantity AS loaded_quantity,
    xaa.unload_quantity AS discharged_quantity,
    xti.quantity AS invoiced_quantity,
    xti.invoiced_amount,
    (xtp.planned_quantity - xtp.balance_quantity) AS quantity,
    xti.invoice_date,
    xtp.trader,
        CASE
            WHEN (xaa.created_timestamp IS NOT NULL) THEN 'Fulfilled'::text
            ELSE 'Confirmed'::text
        END AS contract_status
   FROM (((( SELECT xceler_tradeplanningservice_plannedtradeobligation.uuid,
            xceler_tradeplanningservice_plannedtradeobligation.created_by,
            xceler_tradeplanningservice_plannedtradeobligation.created_timestamp,
            xceler_tradeplanningservice_plannedtradeobligation.tenant_id,
            xceler_tradeplanningservice_plannedtradeobligation.updated_by,
            xceler_tradeplanningservice_plannedtradeobligation.updated_timestamp,
            xceler_tradeplanningservice_plannedtradeobligation.broker,
            xceler_tradeplanningservice_plannedtradeobligation.circle_string_seq,
            xceler_tradeplanningservice_plannedtradeobligation.commodity,
            xceler_tradeplanningservice_plannedtradeobligation.company,
            xceler_tradeplanningservice_plannedtradeobligation.counterparty,
            xceler_tradeplanningservice_plannedtradeobligation.crop_origin,
            xceler_tradeplanningservice_plannedtradeobligation.delivery_date,
            xceler_tradeplanningservice_plannedtradeobligation.delivery_end_date,
            xceler_tradeplanningservice_plannedtradeobligation.delivery_start_date,
            xceler_tradeplanningservice_plannedtradeobligation.grade,
            xceler_tradeplanningservice_plannedtradeobligation.incoterm,
            xceler_tradeplanningservice_plannedtradeobligation.location,
            xceler_tradeplanningservice_plannedtradeobligation.obligation_date,
            xceler_tradeplanningservice_plannedtradeobligation.plan_id,
            xceler_tradeplanningservice_plannedtradeobligation.plan_uuid,
            xceler_tradeplanningservice_plannedtradeobligation.planned_obligation_id,
            xceler_tradeplanningservice_plannedtradeobligation.planned_quantity,
            xceler_tradeplanningservice_plannedtradeobligation.price_type,
            xceler_tradeplanningservice_plannedtradeobligation.profitcenter,
            xceler_tradeplanningservice_plannedtradeobligation.quantityuom,
            xceler_tradeplanningservice_plannedtradeobligation.reference_number,
            xceler_tradeplanningservice_plannedtradeobligation.trade_date_time,
            xceler_tradeplanningservice_plannedtradeobligation.trade_id,
            xceler_tradeplanningservice_plannedtradeobligation.trade_obligation_id,
            xceler_tradeplanningservice_plannedtradeobligation.trade_obligation_uuid,
            xceler_tradeplanningservice_plannedtradeobligation.trade_price,
            xceler_tradeplanningservice_plannedtradeobligation.trade_price_currency,
            xceler_tradeplanningservice_plannedtradeobligation.trade_price_uom,
            xceler_tradeplanningservice_plannedtradeobligation.trade_quantity,
            xceler_tradeplanningservice_plannedtradeobligation.trade_transaction_type,
            xceler_tradeplanningservice_plannedtradeobligation.trade_type,
            xceler_tradeplanningservice_plannedtradeobligation.trade_uuid,
            xceler_tradeplanningservice_plannedtradeobligation.no_of_units,
            xceler_tradeplanningservice_plannedtradeobligation.remarks,
            xceler_tradeplanningservice_plannedtradeobligation.brand,
            xceler_tradeplanningservice_plannedtradeobligation.season,
            xceler_tradeplanningservice_plannedtradeobligation.load_location,
            xceler_tradeplanningservice_plannedtradeobligation.unload_location,
            xceler_tradeplanningservice_plannedtradeobligation.payment_term,
            xceler_tradeplanningservice_plannedtradeobligation.trader,
            xceler_tradeplanningservice_plannedtradeobligation.fx_rate,
            xceler_tradeplanningservice_plannedtradeobligation.provisional_fx_rate,
            xceler_tradeplanningservice_plannedtradeobligation.provisional_price_percentage,
            xceler_tradeplanningservice_plannedtradeobligation.provisional_price_type,
            xceler_tradeplanningservice_plannedtradeobligation.provisional_price,
            xceler_tradeplanningservice_plannedtradeobligation.tradesettlementcurrency,
            xceler_tradeplanningservice_plannedtradeobligation.trade_settlement_currency,
            xceler_tradeplanningservice_plannedtradeobligation.premiun_cost,
            xceler_tradeplanningservice_plannedtradeobligation.discount_cost,
            xceler_tradeplanningservice_plannedtradeobligation.total_trade_qty,
            xceler_tradeplanningservice_plannedtradeobligation.broker_reference_number,
            xceler_tradeplanningservice_plannedtradeobligation.provisional_price_uom,
            xceler_tradeplanningservice_plannedtradeobligation.provisional_price_currency,
            xceler_tradeplanningservice_plannedtradeobligation.planned_obligation_status,
            xceler_tradeplanningservice_plannedtradeobligation.parent_planned_obligation,
            xceler_tradeplanningservice_plannedtradeobligation.shipment_month,
            xceler_tradeplanningservice_plannedtradeobligation.external_record,
            xceler_tradeplanningservice_plannedtradeobligation.delivery_term_clause,
            xceler_tradeplanningservice_plannedtradeobligation.payment_terms_clause,
            xceler_tradeplanningservice_plannedtradeobligation.quantity_terms_clause,
            xceler_tradeplanningservice_plannedtradeobligation.quality_terms_clause,
            xceler_tradeplanningservice_plannedtradeobligation.pricing_terms_clause,
            xceler_tradeplanningservice_plannedtradeobligation.broker_reference,
            xceler_tradeplanningservice_plannedtradeobligation.comments,
            xceler_tradeplanningservice_plannedtradeobligation.trade_settlement_reference,
            xceler_tradeplanningservice_plannedtradeobligation.doc_by_pass_id,
            xceler_tradeplanningservice_plannedtradeobligation.package_type,
            xceler_tradeplanningservice_plannedtradeobligation.balance_quantity,
            xceler_tradeplanningservice_plannedtradeobligation.contract_term,
            xceler_tradeplanningservice_plannedtradeobligation.external_package,
            xceler_tradeplanningservice_plannedtradeobligation.external_package_unit,
            xceler_tradeplanningservice_plannedtradeobligation.internal_package_unit,
            xceler_tradeplanningservice_plannedtradeobligation.internal_package,
            xceler_tradeplanningservice_plannedtradeobligation.provisional_pricing,
            xceler_tradeplanningservice_plannedtradeobligation.weight_basis,
            xceler_tradeplanningservice_plannedtradeobligation.tolerance_value,
            xceler_tradeplanningservice_plannedtradeobligation.external_reference,
            xceler_tradeplanningservice_plannedtradeobligation.price_ticker,
            xceler_tradeplanningservice_plannedtradeobligation.special_instructions,
            xceler_tradeplanningservice_plannedtradeobligation.match_type,
            xceler_tradeplanningservice_plannedtradeobligation.settlement_tolerance_value,
            xceler_tradeplanningservice_plannedtradeobligation.obligation_state,
            xceler_tradeplanningservice_plannedtradeobligation.quotation_period_clause
           FROM taomish.xceler_tradeplanningservice_plannedtradeobligation
          WHERE (((xceler_tradeplanningservice_plannedtradeobligation.trade_type)::text = 'Paper'::text) AND ((xceler_tradeplanningservice_plannedtradeobligation.planned_obligation_status)::text = 'active'::text) AND (((xceler_tradeplanningservice_plannedtradeobligation.match_type)::text &lt;&gt; 'Washout'::text) OR (xceler_tradeplanningservice_plannedtradeobligation.match_type IS NULL)))) xtp
     LEFT JOIN ( SELECT sum(xcct.cost_value) AS cost,
            xcct.tenant_id,
            xcct.trade_id
           FROM taomish.xceler_costservice_tradecost xcct
          WHERE (((xcct.cost_type)::text = 'Per Unit'::text) AND ((xcct.name)::text ~~* '%BROKERAGE%'::text) AND ((xcct.type)::text = 'Secondary'::text))
          GROUP BY xcct.tenant_id, xcct.trade_id) xct ON ((((xct.tenant_id)::text = (xtp.tenant_id)::text) AND ((xct.trade_id)::text = (xtp.trade_id)::text))))
     LEFT JOIN taomish.xceler_actualizationservice_actualizedquantity xaa ON ((((xtp.planned_obligation_id)::text = (xaa.planned_obligation_id)::text) AND ((xaa.tenant_id)::text = (xtp.tenant_id)::text))))
     LEFT JOIN ( SELECT xti_1.planned_obligation_id,
            max(xti_1.quantity) AS quantity,
            xti_1.tenant_id,
            sum(xti_1.settlement_amount) AS invoiced_amount,
            max(xti_1.invoice_date) AS invoice_date
           FROM ( SELECT xceler_tradesettlementservice_tradeinvoice.invoice_date,
                    xceler_tradesettlementservice_tradeinvoice.planned_obligation_id,
                    xceler_tradesettlementservice_tradeinvoice.quantity,
                    xceler_tradesettlementservice_tradeinvoice.full_invoice_type,
                    xceler_tradesettlementservice_tradeinvoice.final_invoice_type,
                    xceler_tradesettlementservice_tradeinvoice.tenant_id,
                    xceler_tradesettlementservice_tradeinvoice.settlement_amount
                   FROM taomish.xceler_tradesettlementservice_tradeinvoice
                  WHERE ((xceler_tradesettlementservice_tradeinvoice.planned_obligation_id IS NOT NULL) AND (((xceler_tradesettlementservice_tradeinvoice.final_invoice_type)::text = 'Final Against Advance'::text) OR (((xceler_tradesettlementservice_tradeinvoice.final_invoice_type)::text = 'Normal Invoice'::text) AND ((xceler_tradesettlementservice_tradeinvoice.full_invoice_type)::text = ANY (ARRAY[('Invoice'::character varying)::text, ('Initial Invoice'::character varying)::text, ('Provisional Invoice'::character varying)::text, ('Washout Invoice'::character varying)::text, ('Circle Invoice'::character varying)::text, ('Bypass Invoice'::character varying)::text])))))) xti_1
          GROUP BY xti_1.planned_obligation_id, xti_1.tenant_id) xti ON ((((xti.tenant_id)::text = (xtp.tenant_id)::text) AND ((xti.planned_obligation_id)::text = (xtp.planned_obligation_id)::text))))
  WHERE (xct.cost IS NOT NULL)
UNION ALL
 SELECT taomish.uuid_generate_v4() AS uuid,
    xtp.tenant_id,
    xtp.trade_id,
    xtp.planned_obligation_id,
    xtp.trade_type,
    xtp.company,
    xtp.commodity,
    xtp.trade_date_time,
    xtp.broker_reference,
    xtp.broker,
    xtp.counterparty,
    xtp.profitcenter,
    xtp.planned_quantity AS contract_quantity,
    xtp.incoterm,
    xtp.trade_price_currency AS currency,
    xtp.trade_price,
    xct.cost AS commission,
    xaa.load_quantity AS loaded_quantity,
    xaa.unload_quantity AS discharged_quantity,
    xti.quantity AS invoiced_quantity,
    xti.invoiced_amount,
    (xtp.planned_quantity - xtp.balance_quantity) AS quantity,
    xti.invoice_date,
    xtp.trader,
        CASE
            WHEN (xaa.created_timestamp IS NOT NULL) THEN 'Fulfilled'::text
            ELSE 'Confirmed'::text
        END AS contract_status
   FROM (((( SELECT xceler_tradeplanningservice_plannedtradeobligation.uuid,
            xceler_tradeplanningservice_plannedtradeobligation.created_by,
            xceler_tradeplanningservice_plannedtradeobligation.created_timestamp,
            xceler_tradeplanningservice_plannedtradeobligation.tenant_id,
            xceler_tradeplanningservice_plannedtradeobligation.updated_by,
            xceler_tradeplanningservice_plannedtradeobligation.updated_timestamp,
            xceler_tradeplanningservice_plannedtradeobligation.broker,
            xceler_tradeplanningservice_plannedtradeobligation.circle_string_seq,
            xceler_tradeplanningservice_plannedtradeobligation.commodity,
            xceler_tradeplanningservice_plannedtradeobligation.company,
            xceler_tradeplanningservice_plannedtradeobligation.counterparty,
            xceler_tradeplanningservice_plannedtradeobligation.crop_origin,
            xceler_tradeplanningservice_plannedtradeobligation.delivery_date,
            xceler_tradeplanningservice_plannedtradeobligation.delivery_end_date,
            xceler_tradeplanningservice_plannedtradeobligation.delivery_start_date,
            xceler_tradeplanningservice_plannedtradeobligation.grade,
            xceler_tradeplanningservice_plannedtradeobligation.incoterm,
            xceler_tradeplanningservice_plannedtradeobligation.location,
            xceler_tradeplanningservice_plannedtradeobligation.obligation_date,
            xceler_tradeplanningservice_plannedtradeobligation.plan_id,
            xceler_tradeplanningservice_plannedtradeobligation.plan_uuid,
            xceler_tradeplanningservice_plannedtradeobligation.planned_obligation_id,
            xceler_tradeplanningservice_plannedtradeobligation.planned_quantity,
            xceler_tradeplanningservice_plannedtradeobligation.price_type,
            xceler_tradeplanningservice_plannedtradeobligation.profitcenter,
            xceler_tradeplanningservice_plannedtradeobligation.quantityuom,
            xceler_tradeplanningservice_plannedtradeobligation.reference_number,
            xceler_tradeplanningservice_plannedtradeobligation.trade_date_time,
            xceler_tradeplanningservice_plannedtradeobligation.trade_id,
            xceler_tradeplanningservice_plannedtradeobligation.trade_obligation_id,
            xceler_tradeplanningservice_plannedtradeobligation.trade_obligation_uuid,
            xceler_tradeplanningservice_plannedtradeobligation.trade_price,
            xceler_tradeplanningservice_plannedtradeobligation.trade_price_currency,
            xceler_tradeplanningservice_plannedtradeobligation.trade_price_uom,
            xceler_tradeplanningservice_plannedtradeobligation.trade_quantity,
            xceler_tradeplanningservice_plannedtradeobligation.trade_transaction_type,
            xceler_tradeplanningservice_plannedtradeobligation.trade_type,
            xceler_tradeplanningservice_plannedtradeobligation.trade_uuid,
            xceler_tradeplanningservice_plannedtradeobligation.no_of_units,
            xceler_tradeplanningservice_plannedtradeobligation.remarks,
            xceler_tradeplanningservice_plannedtradeobligation.brand,
            xceler_tradeplanningservice_plannedtradeobligation.season,
            xceler_tradeplanningservice_plannedtradeobligation.load_location,
            xceler_tradeplanningservice_plannedtradeobligation.unload_location,
            xceler_tradeplanningservice_plannedtradeobligation.payment_term,
            xceler_tradeplanningservice_plannedtradeobligation.trader,
            xceler_tradeplanningservice_plannedtradeobligation.fx_rate,
            xceler_tradeplanningservice_plannedtradeobligation.provisional_fx_rate,
            xceler_tradeplanningservice_plannedtradeobligation.provisional_price_percentage,
            xceler_tradeplanningservice_plannedtradeobligation.provisional_price_type,
            xceler_tradeplanningservice_plannedtradeobligation.provisional_price,
            xceler_tradeplanningservice_plannedtradeobligation.tradesettlementcurrency,
            xceler_tradeplanningservice_plannedtradeobligation.trade_settlement_currency,
            xceler_tradeplanningservice_plannedtradeobligation.premiun_cost,
            xceler_tradeplanningservice_plannedtradeobligation.discount_cost,
            xceler_tradeplanningservice_plannedtradeobligation.total_trade_qty,
            xceler_tradeplanningservice_plannedtradeobligation.broker_reference_number,
            xceler_tradeplanningservice_plannedtradeobligation.provisional_price_uom,
            xceler_tradeplanningservice_plannedtradeobligation.provisional_price_currency,
            xceler_tradeplanningservice_plannedtradeobligation.planned_obligation_status,
            xceler_tradeplanningservice_plannedtradeobligation.parent_planned_obligation,
            xceler_tradeplanningservice_plannedtradeobligation.shipment_month,
            xceler_tradeplanningservice_plannedtradeobligation.external_record,
            xceler_tradeplanningservice_plannedtradeobligation.delivery_term_clause,
            xceler_tradeplanningservice_plannedtradeobligation.payment_terms_clause,
            xceler_tradeplanningservice_plannedtradeobligation.quantity_terms_clause,
            xceler_tradeplanningservice_plannedtradeobligation.quality_terms_clause,
            xceler_tradeplanningservice_plannedtradeobligation.pricing_terms_clause,
            xceler_tradeplanningservice_plannedtradeobligation.broker_reference,
            xceler_tradeplanningservice_plannedtradeobligation.comments,
            xceler_tradeplanningservice_plannedtradeobligation.trade_settlement_reference,
            xceler_tradeplanningservice_plannedtradeobligation.doc_by_pass_id,
            xceler_tradeplanningservice_plannedtradeobligation.package_type,
            xceler_tradeplanningservice_plannedtradeobligation.balance_quantity,
            xceler_tradeplanningservice_plannedtradeobligation.contract_term,
            xceler_tradeplanningservice_plannedtradeobligation.external_package,
            xceler_tradeplanningservice_plannedtradeobligation.external_package_unit,
            xceler_tradeplanningservice_plannedtradeobligation.internal_package_unit,
            xceler_tradeplanningservice_plannedtradeobligation.internal_package,
            xceler_tradeplanningservice_plannedtradeobligation.provisional_pricing,
            xceler_tradeplanningservice_plannedtradeobligation.weight_basis,
            xceler_tradeplanningservice_plannedtradeobligation.tolerance_value,
            xceler_tradeplanningservice_plannedtradeobligation.external_reference,
            xceler_tradeplanningservice_plannedtradeobligation.price_ticker,
            xceler_tradeplanningservice_plannedtradeobligation.special_instructions,
            xceler_tradeplanningservice_plannedtradeobligation.match_type,
            xceler_tradeplanningservice_plannedtradeobligation.settlement_tolerance_value,
            xceler_tradeplanningservice_plannedtradeobligation.obligation_state,
            xceler_tradeplanningservice_plannedtradeobligation.quotation_period_clause
           FROM taomish.xceler_tradeplanningservice_plannedtradeobligation
          WHERE (((xceler_tradeplanningservice_plannedtradeobligation.trade_type)::text = 'Paper'::text) AND ((xceler_tradeplanningservice_plannedtradeobligation.planned_obligation_status)::text = 'active'::text) AND ((xceler_tradeplanningservice_plannedtradeobligation.match_type)::text = 'Washout'::text))) xtp
     LEFT JOIN ( SELECT sum(xcct.cost_value) AS cost,
            xcct.tenant_id,
            xcct.trade_id
           FROM taomish.xceler_costservice_tradecost xcct
          WHERE (((xcct.cost_type)::text = 'Per Unit'::text) AND ((xcct.name)::text ~~* '%BROKERAGE%'::text) AND ((xcct.type)::text = 'Secondary'::text))
          GROUP BY xcct.tenant_id, xcct.trade_id) xct ON ((((xct.tenant_id)::text = (xtp.tenant_id)::text) AND ((xct.trade_id)::text = (xtp.trade_id)::text))))
     LEFT JOIN taomish.xceler_actualizationservice_actualizedquantity xaa ON ((((xtp.planned_obligation_id)::text = (xaa.planned_obligation_id)::text) AND ((xaa.tenant_id)::text = (xtp.tenant_id)::text))))
     LEFT JOIN ( SELECT xtli.planned_obligation_id,
            max(xti_1.quantity) AS quantity,
            xti_1.tenant_id,
            sum(xti_1.settlement_amount) AS invoiced_amount,
            max(xti_1.invoice_date) AS invoice_date
           FROM (taomish.xceler_tradesettlementservice_tradeinvoicelineitem xtli
             JOIN ( SELECT xti_2.invoice_date,
                    xti_2.planned_obligation_id,
                    xti_2.quantity,
                    xti_2.full_invoice_type,
                    xti_2.final_invoice_type,
                    xti_2.tenant_id,
                    xti_2.settlement_amount,
                    xti_2.invoice_number
                   FROM taomish.xceler_tradesettlementservice_tradeinvoice xti_2
                  WHERE ((xti_2.planned_obligation_id IS NOT NULL) AND (((xti_2.final_invoice_type)::text = 'Final Against Advance'::text) OR (((xti_2.final_invoice_type)::text = 'Normal Invoice'::text) AND ((xti_2.full_invoice_type)::text = ANY (ARRAY[('Invoice'::character varying)::text, ('Initial Invoice'::character varying)::text, ('Provisional Invoice'::character varying)::text, ('Washout Invoice'::character varying)::text, ('Circle Invoice'::character varying)::text, ('Bypass Invoice'::character varying)::text])))))) xti_1 ON ((((xti_1.tenant_id)::text = (xtli.tenant_id)::text) AND ((xti_1.invoice_number)::text = (xtli.invoice_number)::text))))
          GROUP BY xtli.planned_obligation_id, xti_1.tenant_id) xti ON ((((xti.tenant_id)::text = (xtp.tenant_id)::text) AND ((xti.planned_obligation_id)::text = (xtp.planned_obligation_id)::text))))
  WHERE (xct.cost IS NOT NULL);</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-144">
        <createView fullDefinition="false" viewName="vw_bl_with_plan_id">SELECT xtp.plan_id,
    COALESCE(xaa.planned_quantity, xtp.planned_quantity) AS planned_quantity,
    COALESCE(xaa.quantity_uom, xtp.quantityuom) AS quantity_uom,
    xtp.planned_obligation_id,
    COALESCE(xab.uuid, gen_random_uuid()) AS uuid,
    xab.created_by,
    xab.created_timestamp,
    xtp.tenant_id,
    xab.updated_by,
    xab.updated_timestamp,
    xab.actualization_id,
    xab.bl_date,
    xab.bl_number,
    xab.consignee,
    xab.contract_ref,
    xab.forwarding_agent,
    xab.notify_party,
    xab.self_to_order,
    xab.shipper,
    xab.split_sequence_number,
    COALESCE(xab.actual_quantity, xtp.planned_quantity) AS actual_quantity,
    xab.uom,
    xab.surrendered,
    xab.status,
    xab.remarks,
    xab.ship_onboard,
    xtp.trade_id,
    xab.stowage_no,
    xab.custom_fields,
    xab.nor_date,
    xab.assignment_surveyor,
    xab.import_licence_no,
    xab.consignment_no,
    xab.flag,
    xab.master,
    xab.charter_date,
    COALESCE(xaa.claimed_quantity, (0)::double precision) AS claimed_quantity,
    xtp.trade_transaction_type,
    ( SELECT (EXISTS ( SELECT true AS bool
                   FROM taomish.xceler_actualizationservice_billoflanding xab2
                  WHERE (((xab.tenant_id)::text = (xab2.tenant_id)::text) AND ((xab.actualization_id)::text = (xab2.actualization_id)::text) AND (xab.split_sequence_number = xab2.split_sequence_number) AND (NOT xab.surrendered) AND xab2.surrendered))) AS "exists") AS replacement_bl
   FROM ((taomish.xceler_tradeplanningservice_plannedtradeobligation xtp
     LEFT JOIN taomish.xceler_actualizationservice_billoflanding xab ON ((((xtp.tenant_id)::text = (xab.tenant_id)::text) AND ((xtp.planned_obligation_id)::text = (xab.planned_obligation_id)::text))))
     LEFT JOIN taomish.xceler_actualizationservice_actualizedquantity xaa ON ((((xaa.actualization_id)::text = (xab.actualization_id)::text) AND ((xaa.planned_obligation_id)::text = (xab.planned_obligation_id)::text) AND ((xaa.tenant_id)::text = (xab.tenant_id)::text))));</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-145">
        <createView fullDefinition="false" viewName="vw_transport_allocation_for_actualization">WITH intercomapny_plan AS (
         SELECT DISTINCT xtp.plan_id AS plan_id_1,
            xtp.tenant_id AS tenant_id_1
           FROM (taomish.xceler_tradeplanningservice_plannedtradeobligation xtp
             JOIN taomish.xceler_transportallocationservice_seafreightdetails xts ON (((xts.plan_id)::text = (xtp.plan_id)::text)))
          WHERE (((xtp.trade_type)::text = 'InterCompany'::text) AND ((xtp.plan_id IS NOT NULL) OR ((xtp.plan_id)::text &lt;&gt; ''::text)))
        )
 SELECT tb.uuid,
    tb.tenant_id,
    tb.vessel_id,
    tb.voyage_no,
    tb.vessel_name,
    tb.allocation_type,
        CASE
            WHEN (tb.buy_load_quantity IS NULL) THEN (0)::double precision
            ELSE tb.buy_load_quantity
        END AS buy_load_quantity,
        CASE
            WHEN (tb.buy_unload_quantity IS NULL) THEN (0)::double precision
            ELSE tb.buy_unload_quantity
        END AS buy_unload_quantity,
        CASE
            WHEN (tb.sell_load_quantity IS NULL) THEN (0)::double precision
            ELSE tb.sell_load_quantity
        END AS sell_load_quantity,
        CASE
            WHEN (tb.sell_unload_quantity IS NULL) THEN (0)::double precision
            ELSE tb.sell_unload_quantity
        END AS sell_unload_quantity,
    tb.load_port,
    tb.discharge_port,
    tb.plan_id
   FROM ( SELECT taomish.uuid_generate_v4() AS uuid,
            xts.tenant_id,
            xts.vessel_id,
            xts.voyage_no,
            xts.vessel_name,
            max((xts.plan_id)::text) AS plan_id,
            xts.allocation_type,
            sum(
                CASE
                    WHEN (xtp.trade_transaction_type = 0) THEN (xaa.load_quantity * COALESCE(uom.conversion_factor, (1)::double precision))
                    ELSE (0)::double precision
                END) AS buy_load_quantity,
            sum(
                CASE
                    WHEN ((xtp.trade_transaction_type = 0) AND (xaa.claimed_quantity = (0)::double precision)) THEN (xaa.unload_quantity * COALESCE(uom.conversion_factor, (1)::double precision))
                    WHEN (xtp.trade_transaction_type = 0) THEN (xaa.claimed_quantity * COALESCE(uom.conversion_factor, (1)::double precision))
                    ELSE (0)::double precision
                END) AS buy_unload_quantity,
            sum(
                CASE
                    WHEN (xtp.trade_transaction_type = 1) THEN (xaa.load_quantity * COALESCE(uom.conversion_factor, (1)::double precision))
                    ELSE (0)::double precision
                END) AS sell_load_quantity,
            sum(
                CASE
                    WHEN ((xtp.trade_transaction_type = 1) AND (xaa.claimed_quantity = (0)::double precision)) THEN (xaa.unload_quantity * COALESCE(uom.conversion_factor, (1)::double precision))
                    WHEN (xtp.trade_transaction_type = 1) THEN (xaa.claimed_quantity * COALESCE(uom.conversion_factor, (1)::double precision))
                    ELSE (0)::double precision
                END) AS sell_unload_quantity,
            ''::text AS load_port,
            ''::text AS discharge_port,
            max(xtp.created_timestamp) AS created_timestamp
           FROM (( SELECT sf.uuid,
                    sf.created_by,
                    sf.created_timestamp,
                    sf.tenant_id,
                    sf.updated_by,
                    sf.updated_timestamp,
                    sf.notes,
                    sf.planned_obligation_id,
                    sf.trade_id,
                    sf.trade_type,
                    sf.charterparty,
                    sf.freight_capacity,
                    sf.imo,
                    sf.vessel_capacity,
                    sf.vessel_flag,
                    sf.vessel_id,
                    sf.vessel_name,
                    sf.year,
                    sf.barge,
                    sf.connecting_vessel,
                    sf.planned_obligation_ids,
                    sf.tugboat,
                    sf.plan_id,
                    sf.allocation_type,
                    sf.old_obligation_ids,
                    sf.voyage_no
                   FROM (taomish.xceler_transportallocationservice_seafreightdetails sf
                     LEFT JOIN intercomapny_plan ip ON ((((ip.tenant_id_1)::text = (sf.tenant_id)::text) AND ((ip.plan_id_1)::text = (sf.plan_id)::text))))
                  WHERE (ip.plan_id_1 IS NULL)) xts
             LEFT JOIN taomish.xceler_transportallocationservice_bookingmanagement xtb ON ((((xtb.booking_number)::text = (xts.vessel_id)::text) AND ((xtb.tenant_id)::text = (xts.tenant_id)::text)))),
            (((LATERAL jsonb_array_elements(xts.planned_obligation_ids) obligation_id(value)
             JOIN taomish.xceler_tradeplanningservice_plannedtradeobligation xtp ON (((xtp.planned_obligation_id)::text = (obligation_id.value -&gt;&gt; 0))))
             LEFT JOIN taomish.xceler_actualizationservice_actualizedquantity xaa ON ((((xaa.planned_obligation_id)::text = (obligation_id.value -&gt;&gt; 0)) AND ((xaa.tenant_id)::text = (xtp.tenant_id)::text))))
             LEFT JOIN taomish.xceler_basedata_uomconversionbase uom ON ((((uom.name)::text = (xaa.quantity_uom)::text) AND ((uom.to_uom)::text = (xtp.quantityuom)::text))))
          WHERE (((xtp.tenant_id)::text = (xts.tenant_id)::text) AND ((xts.allocation_type)::text = ANY (ARRAY[('Vessel'::character varying)::text, ('Substitute'::character varying)::text])))
          GROUP BY xts.vessel_name, xts.vessel_id, xts.voyage_no, xts.tenant_id, xts.allocation_type) tb
  ORDER BY tb.created_timestamp DESC;</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-146">
        <createView fullDefinition="false" viewName="xceler_report_cargoanddischarge">SELECT taomish.uuid_generate_v4() AS uuid,
    xts.vessel_name,
    xts.voyage_no,
    xtp.commodity,
    xtp.counterparty,
    xtp.planned_obligation_id,
    xtp.load_location,
    xtp.planned_quantity,
    (xtp.quantityuom)::text AS quantityuom,
    xtp.trade_price,
    (xtp.trade_price_currency)::text AS trade_price_currency,
    xtp.trade_date_time,
    xa.load_quantity,
    xab.bl_number,
    xab.bl_date,
    xab.stowage_no,
    xtp.broker,
    xtp.broker_reference AS external_record,
    xsm.type,
    xsm.transfer_from,
    xsm.transfer_to,
    xc.name AS counterparty_name,
    xtp.tenant_id
   FROM (((((taomish.xceler_transportallocationservice_seafreightdetails xts
     LEFT JOIN taomish.xceler_tradeplanningservice_plannedtradeobligation xtp ON ((((xts.tenant_id)::text = (xtp.tenant_id)::text) AND ((xts.plan_id)::text = (xtp.plan_id)::text))))
     LEFT JOIN taomish.xceler_actualizationservice_actualizedquantity xa ON ((((xtp.tenant_id)::text = (xa.tenant_id)::text) AND ((xtp.planned_obligation_id)::text = (xa.planned_obligation_id)::text))))
     LEFT JOIN taomish.xceler_actualizationservice_billoflanding xab ON ((((xa.actualization_id)::text = (xab.actualization_id)::text) AND ((xa.tenant_id)::text = (xab.tenant_id)::text) AND (xa.split_sequence_number = xab.split_sequence_number))))
     LEFT JOIN ( SELECT xsm_1.type,
            xsm_1.transfer_from,
            xsm_1.transfer_to,
            xsm_1.tenant_id,
            xsm_1.split_sequence_number
           FROM taomish.xceler_stock_movement xsm_1
          WHERE (((xsm_1.type)::text = ANY (ARRAY[('Stock Transfer'::character varying)::text, ('Build'::character varying)::text])) AND ((xsm_1.status)::text &lt;&gt; 'Deleted'::text))) xsm ON ((((xtp.planned_obligation_id)::text = (xsm.transfer_from)::text) AND ((xts.tenant_id)::text = (xsm.tenant_id)::text) AND (xsm.split_sequence_number = xa.split_sequence_number))))
     LEFT JOIN taomish.xceler_configservice_counterparty xc ON ((((xc.code)::text = (xtp.counterparty)::text) AND ((xc.tenant_id)::text = (xtp.tenant_id)::text))))
  WHERE ((xtp.trade_transaction_type = 0) AND (xtp.external_record IS FALSE) AND ((xtp.trade_type)::text = 'Physical'::text))
UNION
 SELECT taomish.uuid_generate_v4() AS uuid,
    xts.vessel_name,
    xts.voyage_no,
    xsm.commodity,
    xsm.transfer_from AS counterparty,
    xsm.transfer_id AS planned_obligation_id,
    xi.storage_name AS load_location,
    ((xsm.quantity -&gt;&gt; 'unit'::text))::double precision AS planned_quantity,
    (xsm.quantity -&gt;&gt; 'uom'::text) AS quantityuom,
    ((xsm.price -&gt;&gt; 'unit'::text))::double precision AS trade_price,
    (xsm.price -&gt;&gt; 'uom'::text) AS trade_price_currency,
    xsm.created_timestamp AS trade_date_time,
    ((xsm.actual_received_qty -&gt;&gt; 'unit'::text))::double precision AS load_quantity,
    xsm.transfer_to AS bl_number,
    xsm.created_timestamp AS bl_date,
    NULL::character varying AS stowage_no,
    NULL::character varying AS broker,
    NULL::text AS external_record,
    xsm.type,
    xsm.transfer_from,
    xsm.transfer_to,
    xsm.transfer_from AS counterparty_name,
    xsm.tenant_id
   FROM ((taomish.xceler_stock_movement xsm
     LEFT JOIN taomish.xceler_transportallocationservice_seafreightdetails xts ON ((((xsm.vessel_plan_id)::text = (xts.plan_id)::text) AND ((xsm.tenant_id)::text = (xts.tenant_id)::text))))
     LEFT JOIN taomish.xceler_inventory xi ON ((((xi.inventory_name)::text = (xsm.transfer_from)::text) AND ((xi.tenant_id)::text = (xsm.tenant_id)::text))))
  WHERE (((xsm.type)::text = 'Stock Transfer'::text) AND ((xsm.status)::text &lt;&gt; 'Deleted'::text));</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-147">
        <createView fullDefinition="false" viewName="xceler_report_inventoryvaluation">SELECT taomish.uuid_generate_v4() AS uuid,
    stock.obligation_id AS planned_obligation_id,
    stock.inventory_name,
    xtp.company,
    xtp.commodity,
    xtp.trade_transaction_type,
    xtp.trade_date_time,
    xtp.trade_price,
    xtp.trade_price_currency,
    xtp.tenant_id,
    xtp.plan_id,
    jsonb_build_object('uom', stock.uom, 'unit', stock.quantity) AS quantity,
    xts.vessel_name,
    xti.invoice_number,
    xab.bl_number,
    stock.created_timestamp,
    stock.storage_name,
    xtp.delivery_end_date AS shipment_month,
    xtp.counterparty,
    xc.name AS counterparty_name,
    xts.voyage_no,
    xa.load_quantity,
    xa.unload_quantity
   FROM ((((((( SELECT stock_1.tenant_id,
            stock_1.obligation_id,
            stock_1.inventory_name,
            stock_1.xcm_type,
            sum((stock_1.quantity)::double precision) AS quantity,
            stock_1.uom,
            stock_1.storage_name,
            max(stock_1.created_timestamp) AS created_timestamp
           FROM ( SELECT xsm.tenant_id,
                        CASE
                            WHEN (((xsm.type)::text = 'Build'::text) OR ((xsm.type)::text = 'Build-Simple blending'::text)) THEN xsm.transfer_from
                            WHEN (((xsm.type)::text = 'Sales-Draw'::text) OR ((xsm.type)::text = 'Drow-Simple blending'::text)) THEN xsm.transfer_to
                            ELSE NULL::character varying
                        END AS obligation_id,
                        CASE
                            WHEN (((xsm.type)::text = 'Build'::text) OR ((xsm.type)::text = 'Build-Simple blending'::text)) THEN xsm.transfer_to
                            WHEN (((xsm.type)::text = 'Sales-Draw'::text) OR ((xsm.type)::text = 'Drow-Simple blending'::text)) THEN xi.inventory_name
                            ELSE NULL::character varying
                        END AS inventory_name,
                    xsm.type AS xcm_type,
                    (xsm.quantity -&gt;&gt; 'unit'::text) AS quantity,
                    (xsm.quantity -&gt;&gt; 'uom'::text) AS uom,
                    xi.storage_name,
                    xsm.created_timestamp
                   FROM ((( SELECT xceler_stock_movement.uuid,
                            xceler_stock_movement.tenant_id,
                            xceler_stock_movement.valid_to,
                            xceler_stock_movement.valid_from,
                            xceler_stock_movement.updated_timestamp,
                            xceler_stock_movement.created_timestamp,
                            xceler_stock_movement.updated_by,
                            xceler_stock_movement.created_by,
                            xceler_stock_movement.username,
                            xceler_stock_movement.transfer_id,
                            xceler_stock_movement.transfer_from,
                            xceler_stock_movement.transfer_to,
                            xceler_stock_movement.commodity,
                            xceler_stock_movement.type,
                            xceler_stock_movement.quantity,
                            xceler_stock_movement.price,
                            xceler_stock_movement.internal_packaging_type,
                            xceler_stock_movement.max_number_of_package,
                            xceler_stock_movement.status,
                            xceler_stock_movement.stage,
                            xceler_stock_movement.counterparty_approval,
                            xceler_stock_movement.finance_approval,
                            xceler_stock_movement.trader_approval,
                            xceler_stock_movement.actual_received_qty,
                            xceler_stock_movement.plan_id,
                            xceler_stock_movement.voyage_allocation_status,
                            xceler_stock_movement.trade_package_type,
                            xceler_stock_movement.purchase_id,
                            xceler_stock_movement.vessel_plan_id,
                            xceler_stock_movement.from_commodity,
                            xceler_stock_movement.sell_stock_id,
                            xceler_stock_movement.actualize_id,
                            xceler_stock_movement.split_sequence_number,
                            xceler_stock_movement.grn_id,
                            xceler_stock_movement.is_bl_split
                           FROM taomish.xceler_stock_movement
                          WHERE ((xceler_stock_movement.status)::text &lt;&gt; 'Deleted'::text)) xsm
                     LEFT JOIN taomish.xceler_sell_stock xss ON ((((xsm.sell_stock_id)::text = (xss.sell_stock_id)::text) AND ((xsm.tenant_id)::text = (xss.tenant_id)::text))))
                     LEFT JOIN taomish.xceler_inventory xi ON ((((xss.transfer_from_id)::text = (xi.inventory_id)::text) AND ((xss.tenant_id)::text = (xi.tenant_id)::text))))) stock_1
          GROUP BY stock_1.tenant_id, stock_1.obligation_id, stock_1.inventory_name, stock_1.xcm_type, stock_1.uom, stock_1.storage_name) stock
     LEFT JOIN ( SELECT xceler_tradeplanningservice_plannedtradeobligation.uuid,
            xceler_tradeplanningservice_plannedtradeobligation.created_by,
            xceler_tradeplanningservice_plannedtradeobligation.created_timestamp,
            xceler_tradeplanningservice_plannedtradeobligation.tenant_id,
            xceler_tradeplanningservice_plannedtradeobligation.updated_by,
            xceler_tradeplanningservice_plannedtradeobligation.updated_timestamp,
            xceler_tradeplanningservice_plannedtradeobligation.broker,
            xceler_tradeplanningservice_plannedtradeobligation.circle_string_seq,
            xceler_tradeplanningservice_plannedtradeobligation.commodity,
            xceler_tradeplanningservice_plannedtradeobligation.company,
            xceler_tradeplanningservice_plannedtradeobligation.counterparty,
            xceler_tradeplanningservice_plannedtradeobligation.crop_origin,
            xceler_tradeplanningservice_plannedtradeobligation.delivery_date,
            xceler_tradeplanningservice_plannedtradeobligation.delivery_end_date,
            xceler_tradeplanningservice_plannedtradeobligation.delivery_start_date,
            xceler_tradeplanningservice_plannedtradeobligation.grade,
            xceler_tradeplanningservice_plannedtradeobligation.incoterm,
            xceler_tradeplanningservice_plannedtradeobligation.location,
            xceler_tradeplanningservice_plannedtradeobligation.obligation_date,
            xceler_tradeplanningservice_plannedtradeobligation.plan_id,
            xceler_tradeplanningservice_plannedtradeobligation.plan_uuid,
            xceler_tradeplanningservice_plannedtradeobligation.planned_obligation_id,
            xceler_tradeplanningservice_plannedtradeobligation.planned_quantity,
            xceler_tradeplanningservice_plannedtradeobligation.price_type,
            xceler_tradeplanningservice_plannedtradeobligation.profitcenter,
            xceler_tradeplanningservice_plannedtradeobligation.quantityuom,
            xceler_tradeplanningservice_plannedtradeobligation.reference_number,
            xceler_tradeplanningservice_plannedtradeobligation.trade_date_time,
            xceler_tradeplanningservice_plannedtradeobligation.trade_id,
            xceler_tradeplanningservice_plannedtradeobligation.trade_obligation_id,
            xceler_tradeplanningservice_plannedtradeobligation.trade_obligation_uuid,
            xceler_tradeplanningservice_plannedtradeobligation.trade_price,
            xceler_tradeplanningservice_plannedtradeobligation.trade_price_currency,
            xceler_tradeplanningservice_plannedtradeobligation.trade_price_uom,
            xceler_tradeplanningservice_plannedtradeobligation.trade_quantity,
            xceler_tradeplanningservice_plannedtradeobligation.trade_transaction_type,
            xceler_tradeplanningservice_plannedtradeobligation.trade_type,
            xceler_tradeplanningservice_plannedtradeobligation.trade_uuid,
            xceler_tradeplanningservice_plannedtradeobligation.no_of_units,
            xceler_tradeplanningservice_plannedtradeobligation.remarks,
            xceler_tradeplanningservice_plannedtradeobligation.brand,
            xceler_tradeplanningservice_plannedtradeobligation.season,
            xceler_tradeplanningservice_plannedtradeobligation.load_location,
            xceler_tradeplanningservice_plannedtradeobligation.unload_location,
            xceler_tradeplanningservice_plannedtradeobligation.payment_term,
            xceler_tradeplanningservice_plannedtradeobligation.trader,
            xceler_tradeplanningservice_plannedtradeobligation.fx_rate,
            xceler_tradeplanningservice_plannedtradeobligation.provisional_fx_rate,
            xceler_tradeplanningservice_plannedtradeobligation.provisional_price_percentage,
            xceler_tradeplanningservice_plannedtradeobligation.provisional_price_type,
            xceler_tradeplanningservice_plannedtradeobligation.provisional_price,
            xceler_tradeplanningservice_plannedtradeobligation.tradesettlementcurrency,
            xceler_tradeplanningservice_plannedtradeobligation.trade_settlement_currency,
            xceler_tradeplanningservice_plannedtradeobligation.premiun_cost,
            xceler_tradeplanningservice_plannedtradeobligation.discount_cost,
            xceler_tradeplanningservice_plannedtradeobligation.total_trade_qty,
            xceler_tradeplanningservice_plannedtradeobligation.broker_reference_number,
            xceler_tradeplanningservice_plannedtradeobligation.provisional_price_uom,
            xceler_tradeplanningservice_plannedtradeobligation.provisional_price_currency,
            xceler_tradeplanningservice_plannedtradeobligation.planned_obligation_status,
            xceler_tradeplanningservice_plannedtradeobligation.parent_planned_obligation,
            xceler_tradeplanningservice_plannedtradeobligation.shipment_month,
            xceler_tradeplanningservice_plannedtradeobligation.external_record,
            xceler_tradeplanningservice_plannedtradeobligation.delivery_term_clause,
            xceler_tradeplanningservice_plannedtradeobligation.payment_terms_clause,
            xceler_tradeplanningservice_plannedtradeobligation.quantity_terms_clause,
            xceler_tradeplanningservice_plannedtradeobligation.quality_terms_clause,
            xceler_tradeplanningservice_plannedtradeobligation.pricing_terms_clause,
            xceler_tradeplanningservice_plannedtradeobligation.broker_reference,
            xceler_tradeplanningservice_plannedtradeobligation.comments,
            xceler_tradeplanningservice_plannedtradeobligation.trade_settlement_reference,
            xceler_tradeplanningservice_plannedtradeobligation.doc_by_pass_id,
            xceler_tradeplanningservice_plannedtradeobligation.package_type,
            xceler_tradeplanningservice_plannedtradeobligation.external_package,
            xceler_tradeplanningservice_plannedtradeobligation.internal_package,
            xceler_tradeplanningservice_plannedtradeobligation.internal_package_unit,
            xceler_tradeplanningservice_plannedtradeobligation.external_package_unit,
            xceler_tradeplanningservice_plannedtradeobligation.balance_quantity,
            xceler_tradeplanningservice_plannedtradeobligation.contract_term,
            xceler_tradeplanningservice_plannedtradeobligation.provisional_pricing,
            xceler_tradeplanningservice_plannedtradeobligation.weight_basis,
            xceler_tradeplanningservice_plannedtradeobligation.tolerance_value,
            xceler_tradeplanningservice_plannedtradeobligation.external_reference,
            xceler_tradeplanningservice_plannedtradeobligation.price_ticker,
            xceler_tradeplanningservice_plannedtradeobligation.special_instructions,
            xceler_tradeplanningservice_plannedtradeobligation.match_type,
            xceler_tradeplanningservice_plannedtradeobligation.settlement_tolerance_value
           FROM taomish.xceler_tradeplanningservice_plannedtradeobligation
          WHERE ((xceler_tradeplanningservice_plannedtradeobligation.planned_obligation_status)::text = 'active'::text)) xtp ON ((((stock.obligation_id)::text = (xtp.trade_obligation_id)::text) AND ((stock.tenant_id)::text = (xtp.tenant_id)::text))))
     LEFT JOIN taomish.xceler_transportallocationservice_seafreightdetails xts ON ((((xts.plan_id)::text = (xtp.plan_id)::text) AND ((xts.tenant_id)::text = (xtp.tenant_id)::text))))
     LEFT JOIN ( SELECT xceler_tradesettlementservice_tradeinvoicelineitem.tenant_id,
            xceler_tradesettlementservice_tradeinvoicelineitem.invoice_number,
            xceler_tradesettlementservice_tradeinvoicelineitem.planned_obligation_id,
            xceler_tradesettlementservice_tradeinvoicelineitem.voided
           FROM taomish.xceler_tradesettlementservice_tradeinvoicelineitem
          WHERE (xceler_tradesettlementservice_tradeinvoicelineitem.voided &lt;&gt; true)) xti ON ((((xti.planned_obligation_id)::text = (stock.obligation_id)::text) AND ((xti.tenant_id)::text = (xtp.tenant_id)::text))))
     LEFT JOIN taomish.xceler_actualizationservice_actualizedquantity xa ON ((((xa.planned_obligation_id)::text = (stock.obligation_id)::text) AND ((xa.tenant_id)::text = (xtp.tenant_id)::text))))
     LEFT JOIN taomish.xceler_actualizationservice_billoflanding xab ON ((((xab.planned_obligation_id)::text = (xa.planned_obligation_id)::text) AND ((xab.tenant_id)::text = (xa.tenant_id)::text) AND (xab.split_sequence_number = xa.split_sequence_number))))
     LEFT JOIN taomish.xceler_configservice_counterparty xc ON ((((xc.code)::text = (xtp.counterparty)::text) AND ((xc.tenant_id)::text = (xtp.tenant_id)::text))))
  WHERE (stock.inventory_name IS NOT NULL);</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-148">
        <createView fullDefinition="false" viewName="xceler_report_lbl_and_gbl_summary">SELECT taomish.uuid_generate_v4() AS uuid,
    xts.vessel_name,
    xts.voyage_no,
    xts.plan_id,
    xts.tenant_id,
    xtl.planned_obligation_id AS buy_planned_obligation_id,
    xtl.linked_with AS sell_planned_obligation_id,
    xab.bl_number,
    xabs.bl_number AS gbl_number,
    xtl.match_quantity,
    xaa.load_quantity AS buy_quantity,
    xaas.load_quantity AS sell_quantity,
    xab.actual_quantity AS buy_bl_quantity,
    xabs.actual_quantity AS sell_bl_quantity,
    xaa.commodity,
    xtp1.company,
    xtp1.load_location,
    xtp1.unload_location,
    xab.stowage_no,
    xtp1.quantityuom AS uom,
    xtp1.counterparty
   FROM ((((((taomish.xceler_transportallocationservice_seafreightdetails xts
     LEFT JOIN taomish.xceler_tradeplanningservice_tradelink xtl ON ((((xts.plan_id)::text = (xtl.planning_id)::text) AND ((xts.tenant_id)::text = (xtl.tenant_id)::text))))
     LEFT JOIN taomish.xceler_actualizationservice_actualizedquantity xaa ON ((((xtl.planned_obligation_id)::text = (xaa.planned_obligation_id)::text) AND ((xts.tenant_id)::text = (xaa.tenant_id)::text))))
     LEFT JOIN taomish.xceler_actualizationservice_billoflanding xab ON ((((xaa.actualization_id)::text = (xab.actualization_id)::text) AND ((xaa.tenant_id)::text = (xab.tenant_id)::text) AND (xaa.split_sequence_number = xab.split_sequence_number))))
     LEFT JOIN ( SELECT xceler_tradeplanningservice_plannedtradeobligation.uuid,
            xceler_tradeplanningservice_plannedtradeobligation.created_by,
            xceler_tradeplanningservice_plannedtradeobligation.created_timestamp,
            xceler_tradeplanningservice_plannedtradeobligation.tenant_id,
            xceler_tradeplanningservice_plannedtradeobligation.updated_by,
            xceler_tradeplanningservice_plannedtradeobligation.updated_timestamp,
            xceler_tradeplanningservice_plannedtradeobligation.broker,
            xceler_tradeplanningservice_plannedtradeobligation.circle_string_seq,
            xceler_tradeplanningservice_plannedtradeobligation.commodity,
            xceler_tradeplanningservice_plannedtradeobligation.company,
            xceler_tradeplanningservice_plannedtradeobligation.counterparty,
            xceler_tradeplanningservice_plannedtradeobligation.crop_origin,
            xceler_tradeplanningservice_plannedtradeobligation.delivery_date,
            xceler_tradeplanningservice_plannedtradeobligation.delivery_end_date,
            xceler_tradeplanningservice_plannedtradeobligation.delivery_start_date,
            xceler_tradeplanningservice_plannedtradeobligation.grade,
            xceler_tradeplanningservice_plannedtradeobligation.incoterm,
            xceler_tradeplanningservice_plannedtradeobligation.location,
            xceler_tradeplanningservice_plannedtradeobligation.obligation_date,
            xceler_tradeplanningservice_plannedtradeobligation.plan_id,
            xceler_tradeplanningservice_plannedtradeobligation.plan_uuid,
            xceler_tradeplanningservice_plannedtradeobligation.planned_obligation_id,
            xceler_tradeplanningservice_plannedtradeobligation.planned_quantity,
            xceler_tradeplanningservice_plannedtradeobligation.price_type,
            xceler_tradeplanningservice_plannedtradeobligation.profitcenter,
            xceler_tradeplanningservice_plannedtradeobligation.quantityuom,
            xceler_tradeplanningservice_plannedtradeobligation.reference_number,
            xceler_tradeplanningservice_plannedtradeobligation.trade_date_time,
            xceler_tradeplanningservice_plannedtradeobligation.trade_id,
            xceler_tradeplanningservice_plannedtradeobligation.trade_obligation_id,
            xceler_tradeplanningservice_plannedtradeobligation.trade_obligation_uuid,
            xceler_tradeplanningservice_plannedtradeobligation.trade_price,
            xceler_tradeplanningservice_plannedtradeobligation.trade_price_currency,
            xceler_tradeplanningservice_plannedtradeobligation.trade_price_uom,
            xceler_tradeplanningservice_plannedtradeobligation.trade_quantity,
            xceler_tradeplanningservice_plannedtradeobligation.trade_transaction_type,
            xceler_tradeplanningservice_plannedtradeobligation.trade_type,
            xceler_tradeplanningservice_plannedtradeobligation.trade_uuid,
            xceler_tradeplanningservice_plannedtradeobligation.no_of_units,
            xceler_tradeplanningservice_plannedtradeobligation.remarks,
            xceler_tradeplanningservice_plannedtradeobligation.brand,
            xceler_tradeplanningservice_plannedtradeobligation.season,
            xceler_tradeplanningservice_plannedtradeobligation.load_location,
            xceler_tradeplanningservice_plannedtradeobligation.unload_location,
            xceler_tradeplanningservice_plannedtradeobligation.payment_term,
            xceler_tradeplanningservice_plannedtradeobligation.trader,
            xceler_tradeplanningservice_plannedtradeobligation.fx_rate,
            xceler_tradeplanningservice_plannedtradeobligation.provisional_fx_rate,
            xceler_tradeplanningservice_plannedtradeobligation.provisional_price_percentage,
            xceler_tradeplanningservice_plannedtradeobligation.provisional_price_type,
            xceler_tradeplanningservice_plannedtradeobligation.provisional_price,
            xceler_tradeplanningservice_plannedtradeobligation.tradesettlementcurrency,
            xceler_tradeplanningservice_plannedtradeobligation.trade_settlement_currency,
            xceler_tradeplanningservice_plannedtradeobligation.premiun_cost,
            xceler_tradeplanningservice_plannedtradeobligation.discount_cost,
            xceler_tradeplanningservice_plannedtradeobligation.total_trade_qty,
            xceler_tradeplanningservice_plannedtradeobligation.broker_reference_number,
            xceler_tradeplanningservice_plannedtradeobligation.provisional_price_uom,
            xceler_tradeplanningservice_plannedtradeobligation.provisional_price_currency,
            xceler_tradeplanningservice_plannedtradeobligation.planned_obligation_status,
            xceler_tradeplanningservice_plannedtradeobligation.parent_planned_obligation,
            xceler_tradeplanningservice_plannedtradeobligation.shipment_month,
            xceler_tradeplanningservice_plannedtradeobligation.external_record,
            xceler_tradeplanningservice_plannedtradeobligation.delivery_term_clause,
            xceler_tradeplanningservice_plannedtradeobligation.payment_terms_clause,
            xceler_tradeplanningservice_plannedtradeobligation.quantity_terms_clause,
            xceler_tradeplanningservice_plannedtradeobligation.quality_terms_clause,
            xceler_tradeplanningservice_plannedtradeobligation.pricing_terms_clause,
            xceler_tradeplanningservice_plannedtradeobligation.broker_reference,
            xceler_tradeplanningservice_plannedtradeobligation.comments,
            xceler_tradeplanningservice_plannedtradeobligation.trade_settlement_reference,
            xceler_tradeplanningservice_plannedtradeobligation.doc_by_pass_id,
            xceler_tradeplanningservice_plannedtradeobligation.package_type,
            xceler_tradeplanningservice_plannedtradeobligation.external_package,
            xceler_tradeplanningservice_plannedtradeobligation.internal_package,
            xceler_tradeplanningservice_plannedtradeobligation.internal_package_unit,
            xceler_tradeplanningservice_plannedtradeobligation.external_package_unit,
            xceler_tradeplanningservice_plannedtradeobligation.balance_quantity,
            xceler_tradeplanningservice_plannedtradeobligation.contract_term,
            xceler_tradeplanningservice_plannedtradeobligation.provisional_pricing,
            xceler_tradeplanningservice_plannedtradeobligation.weight_basis,
            xceler_tradeplanningservice_plannedtradeobligation.tolerance_value,
            xceler_tradeplanningservice_plannedtradeobligation.external_reference,
            xceler_tradeplanningservice_plannedtradeobligation.price_ticker,
            xceler_tradeplanningservice_plannedtradeobligation.special_instructions,
            xceler_tradeplanningservice_plannedtradeobligation.match_type,
            xceler_tradeplanningservice_plannedtradeobligation.settlement_tolerance_value
           FROM taomish.xceler_tradeplanningservice_plannedtradeobligation
          WHERE (xceler_tradeplanningservice_plannedtradeobligation.trade_transaction_type = 1)) xtp1 ON ((((xtl.linked_with)::text = (xtp1.planned_obligation_id)::text) AND ((xts.tenant_id)::text = (xtp1.tenant_id)::text))))
     LEFT JOIN taomish.xceler_actualizationservice_actualizedquantity xaas ON ((((xtl.linked_with)::text = (xaas.planned_obligation_id)::text) AND ((xts.tenant_id)::text = (xaas.tenant_id)::text))))
     LEFT JOIN taomish.xceler_actualizationservice_billoflanding xabs ON ((((xaas.actualization_id)::text = (xabs.actualization_id)::text) AND ((xaas.tenant_id)::text = (xabs.tenant_id)::text) AND (xaas.split_sequence_number = xabs.split_sequence_number))))
  WHERE ((xab.bl_number IS NOT NULL) AND (xabs.bl_number IS NOT NULL) AND (xts.voyage_no IS NOT NULL));</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-149">
        <createView fullDefinition="false" viewName="xceler_report_mastertradesummary">SELECT taomish.uuid_generate_v4() AS uuid,
    xep.tenant_id AS tenantid,
    xep.planned_obligation_id AS plannedobligationid,
    xep.plan_id AS planid,
    xep.trade_date_time AS trade_date,
    xep.created_timestamp AS allocation_date,
    xep.trade_id,
    xep.commodity,
    xep.incoterm,
    xep.planned_quantity AS quantity,
    xep.unload_location,
    xep.load_location,
    xep.quantityuom AS quantity_uom,
    xep.profitcenter,
        CASE
            WHEN (xep.trade_transaction_type = 1) THEN 'Sell'::text
            ELSE 'Buy'::text
        END AS transaction_type,
    xep.balance_quantity AS un_planned_qty,
        CASE
            WHEN ((xep.trade_settlement_currency)::text = (xep.trade_price_currency)::text) THEN ''::character varying
            ELSE xep.trade_settlement_currency
        END AS settlement_price,
        CASE
            WHEN (xep.trade_transaction_type = 0) THEN xep.load_location
            ELSE xep.unload_location
        END AS port,
    to_char(xep.delivery_end_date, 'MMYYYY'::text) AS shipment_month_format,
    xep.delivery_end_date AS shipment_month,
    dealslip.rollover AS dealslip_rollover,
    dealslip.commission AS dealslip_commission,
    dealslip.fob AS dealslip_fob,
    dealslip.frieght AS dealslip_frieght,
    xep.broker,
    0 AS rollover,
    'Direct'::text AS thru,
    xep.location AS country,
    xep.external_reference,
    (xep.broker_reference)::character varying(255) AS broke_reference,
    xep.trade_price,
    xep.trade_price_currency,
    billoflading.bl_date AS bldate,
    billoflading.bl_number AS blnumber,
    billoflading.stowage_no,
    billoflading.actual_quantity,
    seafreights.vessel_name AS vesselname,
    seafreights.vessel_id AS vesselid,
    ctcf.freightsum AS freight,
    ctcb1.brokeragesum AS commission,
    acost.acostsum AS additional_cost,
    ctcb2.insurance,
    ctcb3.finance,
    acost1.misc,
    (((xep.trade_price - ctcb1.brokeragesum) - ctcf.freightsum) - acost.acostsum) AS fob_price,
        CASE
            WHEN (xep.trade_transaction_type = 0) THEN xcc.name
            ELSE xep.company
        END AS buyer,
        CASE
            WHEN (xep.trade_transaction_type = 1) THEN xep.company
            ELSE xcc.name
        END AS seller,
        CASE
            WHEN (xaq.created_timestamp IS NOT NULL) THEN 'Actualized'::character varying(255)
            ELSE 'Planned'::character varying(255)
        END AS trade_status,
    bm.voyage_no,
    xep.trade_type,
    xep.doc_by_pass_id,
    xep.external_record,
    xep.contract_term
   FROM ((((((((((((( SELECT xtp.uuid,
            xtp.created_by,
            xtp.created_timestamp,
            xtp.tenant_id,
            xtp.updated_by,
            xtp.updated_timestamp,
            xtp.broker,
            xtp.circle_string_seq,
            xtp.commodity,
            xtp.company,
            xtp.counterparty,
            xtp.crop_origin,
            xtp.delivery_date,
            xtp.delivery_end_date,
            xtp.delivery_start_date,
            xtp.grade,
            xtp.incoterm,
            xtp.location,
            xtp.obligation_date,
            xtp.plan_id,
            xtp.plan_uuid,
            xtp.planned_obligation_id,
            xtp.planned_quantity,
            xtp.price_type,
            xtp.profitcenter,
            xtp.quantityuom,
            xtp.reference_number,
            xtp.trade_date_time,
            xtp.trade_id,
            xtp.trade_obligation_id,
            xtp.trade_obligation_uuid,
            xtp.trade_price,
            xtp.trade_price_currency,
            xtp.trade_price_uom,
            xtp.trade_quantity,
            xtp.trade_transaction_type,
            xtp.trade_type,
            xtp.trade_uuid,
            xtp.no_of_units,
            xtp.remarks,
            xtp.brand,
            xtp.season,
            xtp.load_location,
            xtp.unload_location,
            xtp.payment_term,
            xtp.trader,
            xtp.fx_rate,
            xtp.provisional_fx_rate,
            xtp.provisional_price_percentage,
            xtp.provisional_price_type,
            xtp.provisional_price,
            xtp.tradesettlementcurrency,
            xtp.trade_settlement_currency,
            xtp.premiun_cost,
            xtp.discount_cost,
            xtp.total_trade_qty,
            xtp.broker_reference_number,
            xtp.provisional_price_uom,
            xtp.provisional_price_currency,
            xtp.planned_obligation_status,
            xtp.parent_planned_obligation,
            xtp.shipment_month,
            xtp.external_record,
            xtp.delivery_term_clause,
            xtp.payment_terms_clause,
            xtp.quantity_terms_clause,
            xtp.quality_terms_clause,
            xtp.pricing_terms_clause,
            xtp.broker_reference,
            xtp.comments,
            xtp.trade_settlement_reference,
            xtp.doc_by_pass_id,
            xtp.package_type,
            xtp.external_package,
            xtp.internal_package,
            xtp.internal_package_unit,
            xtp.external_package_unit,
            xtp.balance_quantity,
            xtp.contract_term,
            xtp.provisional_pricing,
            xtp.weight_basis,
            xtp.tolerance_value,
            xtp.external_reference,
            xtp.price_ticker,
            xtp.special_instructions,
            xtp.match_type
           FROM taomish.xceler_tradeplanningservice_plannedtradeobligation xtp
          WHERE ((xtp.external_record = false) AND ((xtp.planned_obligation_status)::text = 'active'::text))) xep
     LEFT JOIN ( SELECT sum(xcct.cost_value) AS freightsum,
            xcct.tenant_id,
            xcct.trade_id
           FROM taomish.xceler_costservice_tradecost xcct
          WHERE (((xcct.cost_type)::text = 'Per Unit'::text) AND ((xcct.name)::text = 'CTR-FREIGHT'::text) AND ((xcct.type)::text = 'Secondary'::text))
          GROUP BY xcct.tenant_id, xcct.trade_id) ctcf ON ((((ctcf.tenant_id)::text = (xep.tenant_id)::text) AND ((ctcf.trade_id)::text = (xep.trade_id)::text))))
     LEFT JOIN ( SELECT sum(xcct.cost_value) AS brokeragesum,
            xcct.tenant_id,
            xcct.trade_id
           FROM taomish.xceler_costservice_tradecost xcct
          WHERE (((xcct.cost_type)::text = 'Per Unit'::text) AND ((xcct.name)::text = 'CTR-BROKERAGE FEES-PHYSICAL'::text) AND ((xcct.type)::text = 'Secondary'::text))
          GROUP BY xcct.tenant_id, xcct.trade_id) ctcb1 ON ((((ctcb1.tenant_id)::text = (xep.tenant_id)::text) AND ((ctcb1.trade_id)::text = (xep.trade_id)::text))))
     LEFT JOIN ( SELECT sum(xcct.cost_value) AS insurance,
            xcct.tenant_id,
            xcct.trade_id
           FROM taomish.xceler_costservice_tradecost xcct
          WHERE (((xcct.cost_type)::text = 'Per Unit'::text) AND ((xcct.name)::text = 'CTR-MARINE INSURANCE'::text) AND ((xcct.type)::text = 'Secondary'::text))
          GROUP BY xcct.tenant_id, xcct.trade_id) ctcb2 ON ((((ctcb2.tenant_id)::text = (xep.tenant_id)::text) AND ((ctcb2.trade_id)::text = (xep.trade_id)::text))))
     LEFT JOIN ( SELECT sum(xcct.cost_value) AS finance,
            xcct.tenant_id,
            xcct.trade_id
           FROM taomish.xceler_costservice_tradecost xcct
          WHERE (((xcct.cost_type)::text = 'Per Unit'::text) AND ((xcct.name)::text = 'CTR-FINANCE COST+BANK CHARGES'::text) AND ((xcct.type)::text = 'Secondary'::text))
          GROUP BY xcct.tenant_id, xcct.trade_id) ctcb3 ON ((((ctcb3.tenant_id)::text = (xep.tenant_id)::text) AND ((ctcb3.trade_id)::text = (xep.trade_id)::text))))
     LEFT JOIN ( SELECT sum(xcct.cost_value) AS acostsum,
            xcct.tenant_id,
            xcct.trade_id
           FROM taomish.xceler_costservice_tradecost xcct
          WHERE (((xcct.cost_type)::text = 'Per Unit'::text) AND ((xcct.name)::text &lt;&gt; ALL (ARRAY[('CTR-BROKERAGE FEES-PHYSICAL'::character varying)::text, ('CTR-FREIGHT'::character varying)::text])) AND ((xcct.type)::text = 'Secondary'::text))
          GROUP BY xcct.tenant_id, xcct.trade_id) acost ON ((((acost.tenant_id)::text = (xep.tenant_id)::text) AND ((acost.trade_id)::text = (xep.trade_id)::text))))
     LEFT JOIN ( SELECT sum(xcct.cost_value) AS misc,
            xcct.tenant_id,
            xcct.trade_id
           FROM taomish.xceler_costservice_tradecost xcct
          WHERE (((xcct.cost_type)::text = 'Per Unit'::text) AND ((xcct.name)::text &lt;&gt; ALL (ARRAY[('CTR-BROKERAGE FEES-PHYSICAL'::character varying)::text, ('CTR-FREIGHT'::character varying)::text, ('CTR-FINANCE COST+BANK CHARGES'::character varying)::text, ('CTR-MARINE INSURANCE'::character varying)::text])) AND ((xcct.type)::text = 'Secondary'::text))
          GROUP BY xcct.tenant_id, xcct.trade_id) acost1 ON ((((acost1.tenant_id)::text = (xep.tenant_id)::text) AND ((acost1.trade_id)::text = (xep.trade_id)::text))))
     LEFT JOIN ( SELECT xcc_1.uuid,
            xcc_1.created_by,
            xcc_1.created_timestamp,
            xcc_1.end_date,
            xcc_1.start_date,
            xcc_1.tenant_id,
            xcc_1.updated_by,
            xcc_1.updated_timestamp,
            xcc_1.address,
            xcc_1.counterparty_type_code,
            xcc_1.currency,
            xcc_1.day_light_saving,
            xcc_1.description,
            xcc_1.fax,
            xcc_1.finance_controller_approval,
            xcc_1.financing_agent,
            xcc_1.is_tradeable,
            xcc_1.kyc_status,
            xcc_1.logo,
            xcc_1.logo_file_name,
            xcc_1.logo_file_type,
            xcc_1.name,
            xcc_1.parent,
            xcc_1.status,
            xcc_1.telephone,
            xcc_1.time_zone,
            xcc_1.website,
            xcc_1.code,
            xcc_1.country_of_registration,
            xcc_1.username,
            xcc_1.valid_from,
            xcc_1.valid_to,
            xcc_1.counterparty_external_reference,
            xcc_1.counterparty_external_reference2,
            xcc_1.counterparty_external_reference3,
            xcc_1.counterparty_external_reference4
           FROM taomish.xceler_configservice_counterparty xcc_1
          WHERE (xcc_1.status = true)) xcc ON ((((xep.tenant_id)::text = (xcc.tenant_id)::text) AND ((xep.counterparty)::text = (xcc.code)::text))))
     LEFT JOIN taomish.xceler_actualizationservice_actualizedquantity xaq ON ((((xaq.tenant_id)::text = (xep.tenant_id)::text) AND ((xaq.planned_obligation_id)::text = (xep.planned_obligation_id)::text))))
     LEFT JOIN taomish.xceler_physicaltradeservice_dealslip dealslip ON ((((dealslip.tenant_id)::text = (xep.tenant_id)::text) AND ((dealslip.trade_id)::text = (xep.trade_id)::text))))
     LEFT JOIN taomish.xceler_actualizationservice_billoflanding billoflading ON ((((billoflading.tenant_id)::text = (xep.tenant_id)::text) AND ((billoflading.planned_obligation_id)::text = (xaq.planned_obligation_id)::text) AND (billoflading.split_sequence_number = xaq.split_sequence_number))))
     LEFT JOIN taomish.xceler_transportallocationservice_seafreightdetails seafreights ON ((((seafreights.tenant_id)::text = (xep.tenant_id)::text) AND ((seafreights.plan_id)::text = (xep.plan_id)::text))))
     LEFT JOIN taomish.xceler_transportallocationservice_bookingmanagement bm ON ((((bm.tenant_id)::text = (xep.tenant_id)::text) AND ((bm.booking_number)::text = (seafreights.vessel_id)::text))));</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-150">
        <createView fullDefinition="false" viewName="xceler_report_shippedlandedqty">SELECT final.uuid,
    final.tenantid,
    final.planned_obligation_id,
    final.trade_id,
    final.buyer,
    final.seller,
    final.commodity,
    final.bl_date,
    final.bl_number,
    final.plan_id,
    final.trade_date,
    final.invoice_number,
    final.invoice_date,
    final.invoice_generated_by,
    final.trade_price,
    final.trade_price_currency,
    final.load_quantity,
    final.claimed_quantity,
    final.difference,
    final.exc,
    final.incoterm,
    final.quantity,
    final.unload_location,
    final.load_location,
    final.quantity_uom,
    final.transaction_type,
    final.un_planned_qty,
    final.settlement_price,
    final.port,
    final.shipment_month_format,
    final.shipment_month,
    final.broker,
    final.country,
    final.vessel_name,
    final.voyage_no
   FROM ( SELECT taomish.uuid_generate_v4() AS uuid,
            xep.tenant_id AS tenantid,
            xep.planned_obligation_id,
            xep.trade_id,
                CASE
                    WHEN (xep.trade_transaction_type = 0) THEN xcc.name
                    ELSE xep.company
                END AS buyer,
                CASE
                    WHEN (xep.trade_transaction_type = 1) THEN xep.company
                    ELSE xcc.name
                END AS seller,
            xep.commodity,
            billoflading.bl_date,
            billoflading.bl_number,
            xep.plan_id,
            xep.trade_date_time AS trade_date,
            invoice.invoice_number,
            invoice.invoice_date,
            invoice.invoice_generated_by,
            xep.trade_price,
            xep.trade_price_currency,
            actualized.load_quantity,
            actualized.claimed_quantity,
                CASE
                    WHEN (actualized.claimed_quantity = (0)::double precision) THEN (0.0)::double precision
                    ELSE abs((actualized.load_quantity - actualized.claimed_quantity))
                END AS difference,
                CASE
                    WHEN (actualized.claimed_quantity = (0)::double precision) THEN (0.0)::double precision
                    ELSE (xep.trade_price * abs((actualized.load_quantity - actualized.claimed_quantity)))
                END AS exc,
            xep.incoterm,
            xep.total_trade_qty AS quantity,
            xep.unload_location,
            xep.load_location,
            xep.quantityuom AS quantity_uom,
                CASE
                    WHEN (xep.trade_transaction_type = 1) THEN 'Sell'::text
                    ELSE 'Buy'::text
                END AS transaction_type,
            xep.planned_quantity AS un_planned_qty,
                CASE
                    WHEN ((xep.trade_settlement_currency)::text = (xep.trade_price_currency)::text) THEN ''::character varying
                    ELSE xep.trade_settlement_currency
                END AS settlement_price,
                CASE
                    WHEN (xep.trade_transaction_type = 0) THEN xep.load_location
                    ELSE xep.unload_location
                END AS port,
            to_char(xep.delivery_end_date, 'MMYYYY'::text) AS shipment_month_format,
            xep.delivery_end_date AS shipment_month,
            xep.broker,
            xep.location AS country,
            seafreight.vessel_name,
            bm.voyage_no
           FROM ((((((( SELECT xtp.uuid,
                    xtp.created_by,
                    xtp.created_timestamp,
                    xtp.tenant_id,
                    xtp.updated_by,
                    xtp.updated_timestamp,
                    xtp.broker,
                    xtp.circle_string_seq,
                    xtp.commodity,
                    xtp.company,
                    xtp.counterparty,
                    xtp.crop_origin,
                    xtp.delivery_date,
                    xtp.delivery_end_date,
                    xtp.delivery_start_date,
                    xtp.grade,
                    xtp.incoterm,
                    xtp.location,
                    xtp.obligation_date,
                    xtp.plan_id,
                    xtp.plan_uuid,
                    xtp.planned_obligation_id,
                    xtp.planned_quantity,
                    xtp.price_type,
                    xtp.profitcenter,
                    xtp.quantityuom,
                    xtp.reference_number,
                    xtp.trade_date_time,
                    xtp.trade_id,
                    xtp.trade_obligation_id,
                    xtp.trade_obligation_uuid,
                    xtp.trade_price,
                    xtp.trade_price_currency,
                    xtp.trade_price_uom,
                    xtp.trade_quantity,
                    xtp.trade_transaction_type,
                    xtp.trade_type,
                    xtp.trade_uuid,
                    xtp.no_of_units,
                    xtp.remarks,
                    xtp.brand,
                    xtp.season,
                    xtp.load_location,
                    xtp.unload_location,
                    xtp.payment_term,
                    xtp.trader,
                    xtp.fx_rate,
                    xtp.provisional_fx_rate,
                    xtp.provisional_price_percentage,
                    xtp.provisional_price_type,
                    xtp.provisional_price,
                    xtp.tradesettlementcurrency,
                    xtp.trade_settlement_currency,
                    xtp.premiun_cost,
                    xtp.discount_cost,
                    xtp.total_trade_qty,
                    xtp.broker_reference_number,
                    xtp.provisional_price_uom,
                    xtp.provisional_price_currency,
                    xtp.planned_obligation_status,
                    xtp.parent_planned_obligation,
                    xtp.shipment_month,
                    xtp.external_record,
                    xtp.delivery_term_clause,
                    xtp.payment_terms_clause,
                    xtp.quantity_terms_clause,
                    xtp.quality_terms_clause,
                    xtp.pricing_terms_clause,
                    xtp.broker_reference,
                    xtp.comments,
                    xtp.trade_settlement_reference,
                    xtp.doc_by_pass_id,
                    xtp.package_type,
                    xtp.external_package,
                    xtp.internal_package,
                    xtp.internal_package_unit,
                    xtp.external_package_unit,
                    xtp.balance_quantity,
                    xtp.contract_term,
                    xtp.provisional_pricing,
                    xtp.weight_basis,
                    xtp.tolerance_value,
                    xtp.external_reference,
                    xtp.price_ticker
                   FROM taomish.xceler_tradeplanningservice_plannedtradeobligation xtp
                  WHERE (xtp.plan_id IS NOT NULL)) xep
             LEFT JOIN ( SELECT xcc_1.uuid,
                    xcc_1.created_by,
                    xcc_1.created_timestamp,
                    xcc_1.end_date,
                    xcc_1.start_date,
                    xcc_1.tenant_id,
                    xcc_1.updated_by,
                    xcc_1.updated_timestamp,
                    xcc_1.address,
                    xcc_1.counterparty_type_code,
                    xcc_1.currency,
                    xcc_1.day_light_saving,
                    xcc_1.description,
                    xcc_1.fax,
                    xcc_1.finance_controller_approval,
                    xcc_1.financing_agent,
                    xcc_1.is_tradeable,
                    xcc_1.kyc_status,
                    xcc_1.logo,
                    xcc_1.logo_file_name,
                    xcc_1.logo_file_type,
                    xcc_1.name,
                    xcc_1.parent,
                    xcc_1.status,
                    xcc_1.telephone,
                    xcc_1.time_zone,
                    xcc_1.website,
                    xcc_1.code,
                    xcc_1.country_of_registration,
                    xcc_1.username,
                    xcc_1.valid_from,
                    xcc_1.valid_to,
                    xcc_1.counterparty_external_reference,
                    xcc_1.counterparty_external_reference2,
                    xcc_1.counterparty_external_reference3,
                    xcc_1.counterparty_external_reference4
                   FROM taomish.xceler_configservice_counterparty xcc_1
                  WHERE (xcc_1.status = true)) xcc ON ((((xep.tenant_id)::text = (xcc.tenant_id)::text) AND ((xep.counterparty)::text = (xcc.code)::text))))
             LEFT JOIN ( SELECT xab.uuid,
                    xab.created_by,
                    xab.created_timestamp,
                    xab.tenant_id,
                    xab.updated_by,
                    xab.updated_timestamp,
                    xab.actualization_id,
                    xab.bl_date,
                    xab.bl_number,
                    xab.consignee,
                    xab.contract_ref,
                    xab.forwarding_agent,
                    xab.notify_party,
                    xab.planned_obligation_id,
                    xab.self_to_order,
                    xab.shipper,
                    xab.split_sequence_number,
                    xab.actual_quantity,
                    xab.uom,
                    xab.surrendered,
                    xab.status,
                    xab.remarks,
                    xab.ship_onboard,
                    xab.trade_id,
                    xab.stowage_no,
                    xab.custom_fields
                   FROM taomish.xceler_actualizationservice_billoflanding xab) billoflading ON ((((billoflading.tenant_id)::text = (xep.tenant_id)::text) AND ((billoflading.planned_obligation_id)::text = (xep.planned_obligation_id)::text))))
             LEFT JOIN ( SELECT xtt.uuid,
                    xtt.created_by,
                    xtt.created_timestamp,
                    xtt.tenant_id,
                    xtt.updated_by,
                    xtt.updated_timestamp,
                    xtt.account_number,
                    xtt.adjustment_amount,
                    xtt.amount,
                    xtt.attachment_name,
                    xtt.bank_address,
                    xtt.bank_name,
                    xtt.bl_date,
                    xtt.bl_number,
                    xtt.commodity,
                    xtt.company,
                    xtt.company_address,
                    xtt.contract_number,
                    xtt.counterparty,
                    xtt.counterparty_address,
                    xtt.counterparty_ref_number,
                    xtt.currency,
                    xtt.delivery_end_date,
                    xtt.delivery_terms,
                    xtt.finance_approved_by,
                    xtt.finance_approved_date,
                    xtt.fx_rate,
                    xtt.incoterm,
                    xtt.invoice_approved_by,
                    xtt.invoice_date,
                    xtt.invoice_document_url,
                    xtt.invoice_generated_by,
                    xtt.invoice_number,
                    xtt.invoice_type,
                    xtt.limits_or_tolerance,
                    xtt.notify_party_address,
                    xtt.notify_party_name,
                    xtt.payment_amount,
                    xtt.payment_confirmed_by,
                    xtt.payment_confirmed_date,
                    xtt.payment_date,
                    xtt.payment_due_date,
                    xtt.payment_ref_number,
                    xtt.port_of_discharging,
                    xtt.port_of_loading,
                    xtt.posting_date,
                    xtt.purpose,
                    xtt.quantity,
                    xtt.remit_to,
                    xtt.settlement_amount,
                    xtt.shipment,
                    xtt.status,
                    xtt.swift_code,
                    xtt.terms_of_payment,
                    xtt.total,
                    xtt.trade_date,
                    xtt.trade_id,
                    xtt.trader_approval_date,
                    xtt.trader_name,
                    xtt.unit_price,
                    xtt.uom,
                    xtt.planned_obligation_ids,
                    xtt.vessel_name,
                    xtt.attachment_url,
                    xtt.attached_file_name,
                    xtt.financial_amount_type,
                    xtt.external_reference,
                    xtt.account_code,
                    xtt.external_system_invoice_id,
                    xtt.counter_party_phone_number,
                    xtt.total_in_words,
                    xtt.invoice_document,
                    xtt.final_invoice_type,
                    xtt.old_invoice_id,
                    xtt.full_invoice_type,
                    xtt.counterparty_type,
                    xtt.planned_obligation_id,
                    xtt.unpost_reason,
                    xtt.vessel_id,
                    xtt.split_number,
                    xtt.trade_price_uom
                   FROM taomish.xceler_tradesettlementservice_tradeinvoice xtt) invoice ON ((((invoice.tenant_id)::text = (xep.tenant_id)::text) AND ((invoice.planned_obligation_id)::text = (xep.planned_obligation_id)::text))))
             LEFT JOIN ( SELECT xaa.uuid,
                    xaa.created_by,
                    xaa.created_timestamp,
                    xaa.tenant_id,
                    xaa.updated_by,
                    xaa.updated_timestamp,
                    xaa.actualization_id,
                    xaa.actualized_on,
                    xaa.planned_obligation_id,
                    xaa.trade_id,
                    xaa.actualized_quantity_id,
                    xaa.brand,
                    xaa.commodity,
                    xaa.external_package,
                    xaa.external_package_unit,
                    xaa.grade,
                    xaa.internal_package,
                    xaa.internal_package_unit,
                    xaa.load_quantity,
                    xaa.origin,
                    xaa.package_type,
                    xaa.planned_obligation_type,
                    xaa.planned_quantity,
                    xaa.quantity_uom,
                    xaa.unload_quantity,
                    xaa.purpose,
                    xaa.planned_internal_package_unit,
                    xaa.planned_external_package_unit,
                    xaa.split_sequence_number,
                    xaa.claimed_quantity,
                    xaa.adjusted,
                    xaa.loss_gain_quantity,
                    xaa.discharge_date
                   FROM taomish.xceler_actualizationservice_actualizedquantity xaa) actualized ON ((((actualized.tenant_id)::text = (xep.tenant_id)::text) AND ((actualized.planned_obligation_id)::text = (xep.planned_obligation_id)::text))))
             LEFT JOIN taomish.xceler_transportallocationservice_seafreightdetails seafreight ON ((((seafreight.tenant_id)::text = (xep.tenant_id)::text) AND ((seafreight.plan_id)::text = (xep.plan_id)::text))))
             LEFT JOIN taomish.xceler_transportallocationservice_bookingmanagement bm ON ((((bm.tenant_id)::text = (seafreight.tenant_id)::text) AND ((bm.booking_number)::text = (seafreight.vessel_id)::text))))) final
  WHERE (final.invoice_number IS NOT NULL);</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-151">
        <createView fullDefinition="false" viewName="xceler_report_vessel_pnl_report">SELECT taomish.uuid_generate_v4() AS uuid,
    xts.tenant_id,
    xts.vessel_id,
    xts.voyage_no,
    xts.vessel_name,
        CASE
            WHEN (xtp.trade_transaction_type = 1) THEN 'SELL'::text
            WHEN (xtp.trade_transaction_type = 0) THEN 'BUY'::text
            ELSE NULL::text
        END AS transaction_type,
    xtp.trade_id,
    xtp.planned_obligation_id,
    xtp.planned_quantity,
    xtb.laycan_from,
    xtb.laycan_to,
    xtb.vessel_etd,
    xtp.commodity,
        CASE
            WHEN (xaa.created_timestamp IS NULL) THEN 'Planned'::text
            WHEN (xaa.created_timestamp IS NOT NULL) THEN 'Actualized'::text
            ELSE NULL::text
        END AS planned_obligation_status,
    xtp.counterparty,
    xtp.broker,
    xtp.trade_price,
    xtp.quantityuom,
    xtp.trade_price_currency,
    xtt.payment_amount,
        CASE
            WHEN ((COALESCE(xtt.status, ''::character varying))::text = ''::text) THEN 'not initiated'::text
            WHEN ((xtt.status)::text = 'void'::text) THEN 'pending'::text
            WHEN ((xtt.status)::text = 'INVOICED'::text) THEN 'Invoiced'::text
            ELSE NULL::text
        END AS invoice_status,
    xtb.load_port,
    xtb.unload_port,
    xctp.fright_sum,
    xctfp.cost_value,
    xab.bl_date,
    xab.bl_number
   FROM (((((((taomish.xceler_transportallocationservice_seafreightdetails xts
     JOIN taomish.xceler_tradeplanningservice_plannedtradeobligation xtp ON ((((xtp.plan_id)::text = (xts.plan_id)::text) AND ((xtp.tenant_id)::text = (xts.tenant_id)::text))))
     JOIN taomish.xceler_transportallocationservice_bookingmanagement xtb ON ((((xtb.booking_number)::text = (xts.vessel_id)::text) AND ((xtb.tenant_id)::text = (xts.tenant_id)::text))))
     LEFT JOIN taomish.xceler_actualizationservice_billoflanding xab ON ((((xab.planned_obligation_id)::text = (xtp.planned_obligation_id)::text) AND ((xab.tenant_id)::text = (xtp.tenant_id)::text))))
     LEFT JOIN taomish.xceler_tradesettlementservice_tradeinvoice xtt ON ((((xtt.planned_obligation_id)::text = (xtp.planned_obligation_id)::text) AND ((xtp.tenant_id)::text = (xtt.tenant_id)::text) AND ((xtt.status)::text &lt;&gt; 'void'::text))))
     LEFT JOIN taomish.xceler_actualizationservice_actualizedquantity xaa ON ((((xaa.planned_obligation_id)::text = (xtp.planned_obligation_id)::text) AND ((xaa.tenant_id)::text = (xtp.tenant_id)::text))))
     LEFT JOIN ( SELECT xctp_1.trade_id,
            xctp_1.tenant_id,
            sum(xctp_1.fright_sum) AS fright_sum
           FROM ( SELECT xct.trade_id,
                    xct.tenant_id,
                        CASE
                            WHEN ((xct.cost_type)::text = 'Lumpsum'::text) THEN sum(xct.cost_value)
                            WHEN ((xct.cost_type)::text = 'Per Unit'::text) THEN sum((xct.cost_value * xtpp.planned_quantity))
                            ELSE NULL::double precision
                        END AS fright_sum
                   FROM (taomish.xceler_costservice_tradecost xct
                     JOIN taomish.xceler_tradeplanningservice_plannedtradeobligation xtpp ON ((((xct.tenant_id)::text = (xtpp.tenant_id)::text) AND ((xct.trade_id)::text = (xtpp.trade_id)::text))))
                  WHERE ((xct.cost_group)::text = 'FREIGHT'::text)
                  GROUP BY xct.trade_id, xct.tenant_id, xct.cost_type) xctp_1
          GROUP BY xctp_1.trade_id, xctp_1.tenant_id) xctp ON ((((xctp.trade_id)::text = (xtp.trade_id)::text) AND ((xctp.tenant_id)::text = (xtp.tenant_id)::text))))
     LEFT JOIN ( SELECT xctp_1.trade_id,
            xctp_1.tenant_id,
            sum(xctp_1.cost_sum) AS cost_value
           FROM ( SELECT xct1.trade_id,
                    xct1.tenant_id,
                        CASE
                            WHEN ((xct1.cost_type)::text = 'Lumpsum'::text) THEN sum(xct1.cost_value)
                            WHEN ((xct1.cost_type)::text = 'Per Unit'::text) THEN sum((xct1.cost_value * xtpp.planned_quantity))
                            ELSE NULL::double precision
                        END AS cost_sum
                   FROM (taomish.xceler_costservice_tradecost xct1
                     JOIN taomish.xceler_tradeplanningservice_plannedtradeobligation xtpp ON ((((xct1.tenant_id)::text = (xtpp.tenant_id)::text) AND ((xct1.trade_id)::text = (xtpp.trade_id)::text))))
                  WHERE ((xct1.cost_group)::text &lt;&gt; 'FREIGHT'::text)
                  GROUP BY xct1.trade_id, xct1.tenant_id, xct1.cost_type) xctp_1
          GROUP BY xctp_1.trade_id, xctp_1.tenant_id) xctfp ON ((((xctfp.trade_id)::text = (xtp.trade_id)::text) AND ((xctfp.tenant_id)::text = (xtp.tenant_id)::text))));</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-152">
        <createView fullDefinition="false" viewName="xceler_report_dailytradesummary">SELECT taomish.uuid_generate_v4() AS uuid,
    xtpo.tenant_id,
    xtpo.profitcenter,
    xtpo.commodity,
    xtpo.price_type,
    xtpo.trade_id,
    xtpo.trade_date_time,
    xtpo.trade_type,
    xtpo.company,
        CASE
            WHEN ((xtpo.obligation_state -&gt;&gt; 'ACTUALIZED'::text))::boolean THEN 'Fulfilled'::character varying
            ELSE 'Confirmed'::character varying
        END AS trade_status,
    xtpo.delivery_end_date AS shipment_month,
        CASE
            WHEN (act.bl_date IS NULL) THEN
            CASE
                WHEN (xpt.established_on IS NOT NULL) THEN xpt.established_on
                WHEN (xsm.stock_date IS NOT NULL) THEN xsm.stock_date
                ELSE act.updated_timestamp
            END
            ELSE act.bl_date
        END AS load_date,
    xtpo.counterparty,
    xtpo.trade_price,
    xct_freight.cost AS freight,
    xct_unit_commission.cost AS unit_commission,
    xct.cost,
    xtpo.planned_quantity AS quantity,
    xtpo.quantityuom AS uom,
    NULL::double precision AS lot,
    (xtpo.planned_quantity - xtpo.balance_quantity) AS planned_quantity,
    xtpo.broker,
    xtpo.incoterm,
    xtpo.provisional_price,
        CASE
            WHEN (count(*) = sum(
            CASE
                WHEN ((xtpo.obligation_state -&gt;&gt; 'PRICED'::text) = 'true'::text) THEN 1
                ELSE 0
            END)) THEN 'PRICED'::text
            WHEN ((sum(
            CASE
                WHEN ((xtpo.obligation_state -&gt;&gt; 'PRICED'::text) = 'true'::text) THEN 1
                ELSE 0
            END) = 0) AND (sum(
            CASE
                WHEN ((xtpo.obligation_state -&gt;&gt; 'PARTIALLY_PRICED'::text) = 'true'::text) THEN 1
                ELSE 0
            END) = 0)) THEN 'UNPRICED'::text
            ELSE 'PARTIALLY PRICED'::text
        END AS price_status,
    xpa.quantity AS priced_quantity,
    xtpo.trade_price_currency,
    xtpo.balance_quantity AS unplanned_quantity,
    xtpo.trade_transaction_type,
    xtpo.planned_obligation_id,
    sum(xti.quantity) AS invoiced_quantity,
    sum(act.load_quantity) AS actualized_quantity,
        CASE
            WHEN (sum(act.load_quantity) IS NULL) THEN sum(xtpo.planned_quantity)
            ELSE (sum(xtpo.planned_quantity) - sum(act.load_quantity))
        END AS balance_quantity,
    xpt.settlement_price
   FROM ((((((((( SELECT xtpo_1.uuid,
            xtpo_1.created_by,
            xtpo_1.created_timestamp,
            xtpo_1.tenant_id,
            xtpo_1.updated_by,
            xtpo_1.updated_timestamp,
            xtpo_1.broker,
            xtpo_1.circle_string_seq,
            xtpo_1.commodity,
            xtpo_1.company,
            xtpo_1.counterparty,
            xtpo_1.crop_origin,
            xtpo_1.delivery_date,
            xtpo_1.delivery_end_date,
            xtpo_1.delivery_start_date,
            xtpo_1.grade,
            xtpo_1.incoterm,
            xtpo_1.location,
            xtpo_1.obligation_date,
            xtpo_1.plan_id,
            xtpo_1.plan_uuid,
            xtpo_1.planned_obligation_id,
            xtpo_1.planned_quantity,
            xtpo_1.price_type,
            xtpo_1.profitcenter,
            xtpo_1.quantityuom,
            xtpo_1.reference_number,
            xtpo_1.trade_date_time,
            xtpo_1.trade_id,
            xtpo_1.trade_obligation_id,
            xtpo_1.trade_obligation_uuid,
            xtpo_1.trade_price,
            xtpo_1.trade_price_currency,
            xtpo_1.trade_price_uom,
            xtpo_1.trade_quantity,
            xtpo_1.trade_transaction_type,
            xtpo_1.trade_type,
            xtpo_1.trade_uuid,
            xtpo_1.no_of_units,
            xtpo_1.remarks,
            xtpo_1.brand,
            xtpo_1.season,
            xtpo_1.load_location,
            xtpo_1.unload_location,
            xtpo_1.payment_term,
            xtpo_1.trader,
            xtpo_1.fx_rate,
            xtpo_1.provisional_fx_rate,
            xtpo_1.provisional_price_percentage,
            xtpo_1.provisional_price_type,
            xtpo_1.provisional_price,
            xtpo_1.tradesettlementcurrency,
            xtpo_1.trade_settlement_currency,
            xtpo_1.premiun_cost,
            xtpo_1.discount_cost,
            xtpo_1.total_trade_qty,
            xtpo_1.broker_reference_number,
            xtpo_1.provisional_price_uom,
            xtpo_1.provisional_price_currency,
            xtpo_1.planned_obligation_status,
            xtpo_1.parent_planned_obligation,
            xtpo_1.shipment_month,
            xtpo_1.external_record,
            xtpo_1.delivery_term_clause,
            xtpo_1.payment_terms_clause,
            xtpo_1.quantity_terms_clause,
            xtpo_1.quality_terms_clause,
            xtpo_1.pricing_terms_clause,
            xtpo_1.broker_reference,
            xtpo_1.comments,
            xtpo_1.trade_settlement_reference,
            xtpo_1.doc_by_pass_id,
            xtpo_1.package_type,
            xtpo_1.balance_quantity,
            xtpo_1.contract_term,
            xtpo_1.external_package,
            xtpo_1.external_package_unit,
            xtpo_1.internal_package_unit,
            xtpo_1.internal_package,
            xtpo_1.provisional_pricing,
            xtpo_1.weight_basis,
            xtpo_1.tolerance_value,
            xtpo_1.external_reference,
            xtpo_1.price_ticker,
            xtpo_1.special_instructions,
            xtpo_1.match_type,
            xtpo_1.settlement_tolerance_value,
            xtpo_1.obligation_state,
            xtpo_1.quotation_period_clause,
            xtpo_1.commodity_code,
            xtpo_1.location_type,
            xtpo_1.load_location_type,
            xtpo_1.unload_location_type,
            xtpo_1.counterparty_name,
            xtpo_1.company_code,
            xtpo_1.profitcenter_code
           FROM taomish.xceler_tradeplanningservice_plannedtradeobligation xtpo_1
          WHERE (((xtpo_1.planned_obligation_status)::text = 'active'::text) AND (xtpo_1.external_record = false))) xtpo
     LEFT JOIN ( SELECT sum(xpa_1.quantity) AS quantity,
            xpa_1.tenant_id,
            xpa_1.obligation_id
           FROM taomish.xceler_pricingservice_priceallocation xpa_1
          GROUP BY xpa_1.tenant_id, xpa_1.obligation_id) xpa ON ((((xpa.obligation_id)::text = (xtpo.planned_obligation_id)::text) AND ((xpa.tenant_id)::text = (xtpo.tenant_id)::text))))
     LEFT JOIN ( SELECT sum(xcct.cost_value) AS cost,
            xcct.tenant_id,
            xcct.trade_id
           FROM taomish.xceler_costservice_tradecost xcct
          WHERE (((xcct.cost_type)::text = 'Per Unit'::text) AND ((xcct.cost_group)::text = 'Freight'::text) AND ((xcct.type)::text = 'Secondary'::text))
          GROUP BY xcct.tenant_id, xcct.trade_id) xct_freight ON ((((xct_freight.tenant_id)::text = (xtpo.tenant_id)::text) AND ((xct_freight.trade_id)::text = (xtpo.trade_id)::text))))
     LEFT JOIN ( SELECT sum(xcct.cost_value) AS cost,
            xcct.tenant_id,
            xcct.trade_id
           FROM taomish.xceler_costservice_tradecost xcct
          WHERE (((xcct.cost_type)::text = 'Per Unit'::text) AND ((xcct.cost_group)::text = 'Unit Commission'::text) AND ((xcct.type)::text = 'Secondary'::text))
          GROUP BY xcct.tenant_id, xcct.trade_id) xct_unit_commission ON ((((xct_unit_commission.tenant_id)::text = (xtpo.tenant_id)::text) AND ((xct_unit_commission.trade_id)::text = (xtpo.trade_id)::text))))
     LEFT JOIN ( SELECT sum(xcct.cost_value) AS cost,
            xcct.tenant_id,
            xcct.trade_id
           FROM taomish.xceler_costservice_tradecost xcct
          WHERE (((xcct.cost_type)::text = 'Per Unit'::text) AND ((xcct.type)::text = 'Secondary'::text))
          GROUP BY xcct.tenant_id, xcct.trade_id) xct ON ((((xct.tenant_id)::text = (xtpo.tenant_id)::text) AND ((xct.trade_id)::text = (xtpo.trade_id)::text))))
     LEFT JOIN ( SELECT act_1.tenant_id,
            act_1.planned_obligation_id,
            max(act_1.updated_timestamp) AS updated_timestamp,
            max(xab.bl_date) AS bl_date,
            sum(act_1.load_quantity) AS load_quantity
           FROM (taomish.xceler_actualizationservice_actualizedquantity act_1
             LEFT JOIN taomish.xceler_actualizationservice_billoflanding xab ON ((((act_1.planned_obligation_id)::text = (xab.planned_obligation_id)::text) AND ((xab.tenant_id)::text = (act_1.tenant_id)::text) AND (xab.split_sequence_number = act_1.split_sequence_number))))
          GROUP BY act_1.tenant_id, act_1.planned_obligation_id) act ON ((((act.tenant_id)::text = (xtpo.tenant_id)::text) AND ((act.planned_obligation_id)::text = (xtpo.planned_obligation_id)::text))))
     LEFT JOIN ( SELECT xceler_tradeplanningservice_physicaltradeplan.uuid,
            xceler_tradeplanningservice_physicaltradeplan.created_by,
            xceler_tradeplanningservice_physicaltradeplan.created_timestamp,
            xceler_tradeplanningservice_physicaltradeplan.tenant_id,
            xceler_tradeplanningservice_physicaltradeplan.updated_by,
            xceler_tradeplanningservice_physicaltradeplan.updated_timestamp,
            xceler_tradeplanningservice_physicaltradeplan.comment,
            xceler_tradeplanningservice_physicaltradeplan.match_quantity,
            xceler_tradeplanningservice_physicaltradeplan.match_type,
            xceler_tradeplanningservice_physicaltradeplan.planning_date,
            xceler_tradeplanningservice_physicaltradeplan.planning_id,
            xceler_tradeplanningservice_physicaltradeplan.settlement_currency,
            xceler_tradeplanningservice_physicaltradeplan.settlement_price,
            xceler_tradeplanningservice_physicaltradeplan.established_on,
            xceler_tradeplanningservice_physicaltradeplan.settlement
           FROM taomish.xceler_tradeplanningservice_physicaltradeplan
          WHERE (xceler_tradeplanningservice_physicaltradeplan.established_on IS NOT NULL)) xpt ON ((((xpt.tenant_id)::text = (xtpo.tenant_id)::text) AND ((xpt.planning_id)::text = (xtpo.plan_id)::text))))
     LEFT JOIN ( SELECT COALESCE(xceler_stock_movement.transfer_from, xceler_stock_movement.transfer_to) AS planned_obligation_id,
            max(xceler_stock_movement.updated_timestamp) AS stock_date,
            xceler_stock_movement.tenant_id
           FROM taomish.xceler_stock_movement
          GROUP BY xceler_stock_movement.tenant_id, COALESCE(xceler_stock_movement.transfer_from, xceler_stock_movement.transfer_to)) xsm ON ((((xsm.tenant_id)::text = (xtpo.tenant_id)::text) AND ((xsm.planned_obligation_id)::text = (xtpo.planned_obligation_id)::text))))
     LEFT JOIN ( SELECT xti_1.planned_obligation_id,
            max(xti_1.quantity) AS quantity,
            xti_1.tenant_id
           FROM ( SELECT xceler_tradesettlementservice_tradeinvoice.planned_obligation_id,
                    xceler_tradesettlementservice_tradeinvoice.quantity,
                    xceler_tradesettlementservice_tradeinvoice.full_invoice_type,
                    xceler_tradesettlementservice_tradeinvoice.final_invoice_type,
                    xceler_tradesettlementservice_tradeinvoice.tenant_id
                   FROM taomish.xceler_tradesettlementservice_tradeinvoice
                  WHERE ((xceler_tradesettlementservice_tradeinvoice.planned_obligation_id IS NOT NULL) AND (((xceler_tradesettlementservice_tradeinvoice.final_invoice_type)::text = 'Final Against Advance'::text) OR (((xceler_tradesettlementservice_tradeinvoice.final_invoice_type)::text = 'Normal Invoice'::text) AND ((xceler_tradesettlementservice_tradeinvoice.full_invoice_type)::text = ANY (ARRAY[('Invoice'::character varying)::text, ('Initial Invoice'::character varying)::text, ('Provisional Invoice'::character varying)::text, ('Washout Invoice'::character varying)::text, ('Circle Invoice'::character varying)::text, ('Bypass Invoice'::character varying)::text])))))) xti_1
          GROUP BY xti_1.planned_obligation_id, xti_1.tenant_id) xti ON ((((xti.tenant_id)::text = (xtpo.tenant_id)::text) AND ((xti.planned_obligation_id)::text = (xtpo.planned_obligation_id)::text))))
  GROUP BY xtpo.tenant_id, xtpo.profitcenter, xtpo.commodity, xtpo.price_type, xtpo.trade_id, xtpo.trade_date_time, xtpo.trade_type, xtpo.company, xtpo.delivery_end_date, act.bl_date, xtpo.counterparty, xtpo.trade_price, xct_freight.cost, xct_unit_commission.cost, xct.cost, xtpo.planned_quantity, xtpo.quantityuom, xtpo.broker, xtpo.incoterm, xpa.quantity, xtpo.trade_price_currency, xtpo.balance_quantity, xtpo.trade_transaction_type, act.updated_timestamp, xtpo.planned_obligation_id, xtpo.provisional_price, xpt.established_on, xpt.settlement_price, xtpo.obligation_state, xsm.stock_date
UNION ALL
 SELECT taomish.uuid_generate_v4() AS uuid,
    xff.tenant_id,
    xff.profitcenter,
    xff.commodity,
    'Fixed'::character varying AS price_type,
    xff.trade_id,
    xff.trade_date AS trade_date_time,
    'MARKET HEDGE'::character varying AS trade_type,
    xff.company,
        CASE
            WHEN ((xff.netting_status)::text = 'Void'::text) THEN 'void'::text
            WHEN (xff.match_lot &lt;&gt; (0)::double precision) THEN 'Fulfilled'::text
            ELSE 'Confirmed'::text
        END AS trade_status,
    xff.expiry_date AS shipment_month,
    xnn.netted_date AS load_date,
    xff.exchange AS counterparty,
        CASE
            WHEN ((xff.commodity)::text = 'Refined Soybean Oil'::text) THEN (xff.trade_price / (100)::double precision)
            ELSE xff.trade_price
        END AS trade_price,
    NULL::double precision AS freight,
    NULL::double precision AS unit_commission,
    NULL::double precision AS cost,
        CASE
            WHEN ((xff.commodity)::text = 'Refined Soybean Oil'::text) THEN ((xff.lot * xff.lot_size) * (0.00045359237)::double precision)
            ELSE (xff.lot * xff.lot_size)
        END AS quantity,
    xff.uom,
    xff.lot,
        CASE
            WHEN ((xff.commodity)::text = 'Refined Soybean Oil'::text) THEN ((xff.match_lot * xff.lot_size) * (0.00045359237)::double precision)
            ELSE (xff.match_lot * xff.lot_size)
        END AS planned_quantity,
    xff.clearing_broker AS broker,
    'FOB'::character varying AS incoterm,
    NULL::double precision AS provisional_price,
    NULL::character varying AS price_status,
    NULL::double precision AS priced_quantity,
    xff.currency AS trade_price_currency,
        CASE
            WHEN ((xff.commodity)::text = 'Refined Soybean Oil'::text) THEN (((xff.lot - xff.match_lot) * xff.lot_size) * (0.00045359237)::double precision)
            ELSE ((xff.lot - xff.match_lot) * xff.lot_size)
        END AS unplanned_quantity,
    xff.trade_transaction_type,
    NULL::character varying AS planned_obligation_id,
        CASE
            WHEN ((xff.commodity)::text = 'Refined Soybean Oil'::text) THEN ((xff.match_lot * xff.lot_size) * (0.00045359237)::double precision)
            ELSE (xff.match_lot * xff.lot_size)
        END AS invoiced_quantity,
        CASE
            WHEN ((xff.commodity)::text = 'Refined Soybean Oil'::text) THEN ((xff.match_lot * xff.lot_size) * (0.00045359237)::double precision)
            ELSE (xff.match_lot * xff.lot_size)
        END AS actualized_quantity,
    ((xff.lot - xff.match_lot) * xff.lot_size) AS balance_quantity,
    NULL::double precision AS settlement_price
   FROM (taomish.xceler_futuretradeservice_futuretrade xff
     LEFT JOIN taomish.xceler_futuretradeservice_futurenettingdetails xnn ON ((((xff.trade_id)::text = (xnn.trade_id)::text) AND ((xff.tenant_id)::text = (xnn.tenant_id)::text))))
UNION ALL
 SELECT taomish.uuid_generate_v4() AS uuid,
    xpt.tenant_id,
    xpt.profitcenter,
    xpt.commodity,
    xpt.price_type,
    xpt.trade_id,
    xpt.trade_date_time,
    xpt.trade_type,
    xpt.company,
    xidt.status AS trade_status,
    xpt.period_end_date AS shipment_month,
    NULL::timestamp without time zone AS load_date,
    xpt.counterparty,
    xpt.trade_price,
    xct_freight.cost AS freight,
    xct_unit_commission.cost AS unit_commission,
    xct.cost,
    xpt.quantity,
    xpt.quantity_uom AS uom,
    NULL::double precision AS lot,
    NULL::double precision AS planned_quantity,
    xpt.broker,
    xpt.incoterm,
    NULL::double precision AS provisional_price,
    NULL::text AS price_status,
    NULL::double precision AS priced_quantity,
    xpt.trade_price_currency,
    NULL::double precision AS unplanned_quantity,
    xpt.trade_transaction_type,
    NULL::character varying AS planned_obligation_id,
    NULL::double precision AS invoiced_quantity,
    NULL::double precision AS actualized_quantity,
        CASE
            WHEN (xit.quantity IS NULL) THEN xpt.quantity
            ELSE (xpt.quantity - xit.quantity)
        END AS balance_quantity,
    NULL::double precision AS settlement_price
   FROM (((((( SELECT xpt_1.uuid,
            xpt_1.created_by,
            xpt_1.created_timestamp,
            xpt_1.tenant_id,
            xpt_1.updated_by,
            xpt_1.updated_timestamp,
            xpt_1.brand,
            xpt_1.broker,
            xpt_1.comments,
            xpt_1.commodity,
            xpt_1.company,
            xpt_1.contract_confirmation,
            xpt_1.counterparty,
            xpt_1.delivery_end_date,
            xpt_1.delivery_start_date,
            xpt_1.discharge_location,
            xpt_1.external_package,
            xpt_1.external_package_unit,
            xpt_1.external_reference,
            xpt_1.factory,
            xpt_1.future_contract_month,
            xpt_1.future_index,
            xpt_1.fxrate,
            xpt_1.grade,
            xpt_1.incoterm,
            xpt_1.internal_package,
            xpt_1.internal_package_unit,
            xpt_1.internal_profit_center,
            xpt_1.is_internal_trade,
            xpt_1.is_provisional_pricing,
            xpt_1.load_location,
            xpt_1.location,
            xpt_1.long_contract,
            xpt_1.origin,
            xpt_1.package_type,
            xpt_1.paymentterm,
            xpt_1.percentage,
            xpt_1.period_end_date,
            xpt_1.period_start_date,
            xpt_1.price_type,
            xpt_1.profitcenter,
            xpt_1.provisional_fx_rate,
            xpt_1.provisional_price,
            xpt_1.provisional_price_currency,
            xpt_1.provisional_price_type,
            xpt_1.provisional_price_uom,
            xpt_1.quantity,
            xpt_1.quantity_periodicity,
            xpt_1.quantity_tolerance_type,
            xpt_1.quantity_uom,
            xpt_1.season,
            xpt_1.special_instructions,
            xpt_1.tolerance_value,
            xpt_1.total_trade_qty,
            xpt_1.trade_date_time,
            xpt_1.trade_id,
            xpt_1.trade_price,
            xpt_1.trade_price_currency,
            xpt_1.trade_price_uom,
            xpt_1.trade_settlement_currency,
            xpt_1.trade_transaction_type,
            xpt_1.trader_name,
            xpt_1.load_location_type,
            xpt_1.location_type,
            xpt_1.mode_of_transport,
            xpt_1.total_units,
            xpt_1.unload_location_type,
            xpt_1.weight_basis,
            xpt_1.delivery_terms_clause,
            xpt_1.payment_terms_clause,
            xpt_1.pricing_terms_clause,
            xpt_1.quantity_terms_clause,
            xpt_1.quotation_period_clause,
            xpt_1.quality_terms_clause,
            xpt_1.commodity_code,
            xpt_1.company_code,
            xpt_1.profitcenter_code,
            xpt_1.internal_profitcenter_code,
            xpt_1.counterparty_code,
            xpt_1.manual_trade_id,
            xpt_1.broker_reference,
            xpt_1.paper_trade,
            xpt_1.settlement_tolerance_percentage,
            xpt_1.trade_type,
            xpt_1.total_trade_value,
            xpt_1.contract_term,
            xpt_1.settlement_tolerance_value,
            xpt_1.trade_approval_status,
            xpt_1.delivery_schedule
           FROM taomish.xceler_physicaltradeservice_physicaltrade xpt_1
          WHERE ((xpt_1.trade_type)::text = ANY (ARRAY[('InterProfitCenter Physical'::character varying)::text, ('InterProfitCenter Paper'::character varying)::text]))) xpt
     LEFT JOIN ( SELECT sum(xcct.cost_value) AS cost,
            xcct.tenant_id,
            xcct.trade_id
           FROM taomish.xceler_costservice_tradecost xcct
          WHERE (((xcct.cost_type)::text = 'Per Unit'::text) AND ((xcct.cost_group)::text = 'Freight'::text) AND ((xcct.type)::text = 'Secondary'::text))
          GROUP BY xcct.tenant_id, xcct.trade_id) xct_freight ON ((((xct_freight.tenant_id)::text = (xpt.tenant_id)::text) AND ((xct_freight.trade_id)::text = (xpt.trade_id)::text))))
     LEFT JOIN ( SELECT sum(xcct.cost_value) AS cost,
            xcct.tenant_id,
            xcct.trade_id
           FROM taomish.xceler_costservice_tradecost xcct
          WHERE (((xcct.cost_type)::text = 'Per Unit'::text) AND ((xcct.cost_group)::text = 'Unit Commission'::text) AND ((xcct.type)::text = 'Secondary'::text))
          GROUP BY xcct.tenant_id, xcct.trade_id) xct_unit_commission ON ((((xct_unit_commission.tenant_id)::text = (xpt.tenant_id)::text) AND ((xct_unit_commission.trade_id)::text = (xpt.trade_id)::text))))
     LEFT JOIN ( SELECT sum(xcct.cost_value) AS cost,
            xcct.tenant_id,
            xcct.trade_id
           FROM taomish.xceler_costservice_tradecost xcct
          WHERE (((xcct.cost_type)::text = 'Per Unit'::text) AND ((xcct.type)::text = 'Secondary'::text))
          GROUP BY xcct.tenant_id, xcct.trade_id) xct ON ((((xct.tenant_id)::text = (xpt.tenant_id)::text) AND ((xct.trade_id)::text = (xpt.trade_id)::text))))
     LEFT JOIN taomish.xceler_physicaltradeservice_internaldealticker xidt ON (((((xidt.tenant_id)::text = (xpt.tenant_id)::text) AND ((xidt.purchase_leg_ref)::text = (xpt.trade_id)::text)) OR ((xidt.sell_leg_ref)::text = (xpt.trade_id)::text))))
     LEFT JOIN ( SELECT xit_1.tenant_id,
            xit_1.idt_id,
            sum(xit_1.quantity) AS quantity
           FROM taomish.xceler_idt_transaction xit_1
          GROUP BY xit_1.idt_id, xit_1.tenant_id) xit ON ((((xpt.tenant_id)::text = (xit.tenant_id)::text) AND ((xidt.idt_id)::text = (xit.idt_id)::text))))
  WHERE ((xidt.status)::text &lt;&gt; 'void'::text)
UNION ALL
 SELECT taomish.uuid_generate_v4() AS uuid,
    xpt.tenant_id,
    xpt.profitcenter,
    xpt.commodity,
    xpt.price_type,
    xpt.trade_id,
    xpt.trade_date_time,
    xpt.trade_type,
    xpt.company,
    xpt.trade_approval_status AS trade_status,
    xpt.period_end_date AS shipment_month,
    NULL::timestamp without time zone AS load_date,
    xpt.counterparty,
    xpt.trade_price,
    xct_freight.cost AS freight,
    xct_unit_commission.cost AS unit_commission,
    xct.cost,
    xpt.quantity,
    xpt.quantity_uom AS uom,
    NULL::double precision AS lot,
    NULL::double precision AS planned_quantity,
    xpt.broker,
    xpt.incoterm,
    NULL::double precision AS provisional_price,
    NULL::text AS price_status,
    NULL::double precision AS priced_quantity,
    xpt.trade_price_currency,
    NULL::double precision AS unplanned_quantity,
    xpt.trade_transaction_type,
    NULL::character varying AS planned_obligation_id,
    NULL::double precision AS invoiced_quantity,
    NULL::double precision AS actualized_quantity,
    NULL::double precision AS balance_quantity,
    NULL::double precision AS settlement_price
   FROM (((( SELECT xpt_1.uuid,
            xpt_1.created_by,
            xpt_1.created_timestamp,
            xpt_1.tenant_id,
            xpt_1.updated_by,
            xpt_1.updated_timestamp,
            xpt_1.brand,
            xpt_1.broker,
            xpt_1.comments,
            xpt_1.commodity,
            xpt_1.company,
            xpt_1.contract_confirmation,
            xpt_1.counterparty,
            xpt_1.delivery_end_date,
            xpt_1.delivery_start_date,
            xpt_1.discharge_location,
            xpt_1.external_package,
            xpt_1.external_package_unit,
            xpt_1.external_reference,
            xpt_1.factory,
            xpt_1.future_contract_month,
            xpt_1.future_index,
            xpt_1.fxrate,
            xpt_1.grade,
            xpt_1.incoterm,
            xpt_1.internal_package,
            xpt_1.internal_package_unit,
            xpt_1.internal_profit_center,
            xpt_1.is_internal_trade,
            xpt_1.is_provisional_pricing,
            xpt_1.load_location,
            xpt_1.location,
            xpt_1.long_contract,
            xpt_1.origin,
            xpt_1.package_type,
            xpt_1.paymentterm,
            xpt_1.percentage,
            xpt_1.period_end_date,
            xpt_1.period_start_date,
            xpt_1.price_type,
            xpt_1.profitcenter,
            xpt_1.provisional_fx_rate,
            xpt_1.provisional_price,
            xpt_1.provisional_price_currency,
            xpt_1.provisional_price_type,
            xpt_1.provisional_price_uom,
            xpt_1.quantity,
            xpt_1.quantity_periodicity,
            xpt_1.quantity_tolerance_type,
            xpt_1.quantity_uom,
            xpt_1.season,
            xpt_1.special_instructions,
            xpt_1.tolerance_value,
            xpt_1.total_trade_qty,
            xpt_1.trade_date_time,
            xpt_1.trade_id,
            xpt_1.trade_price,
            xpt_1.trade_price_currency,
            xpt_1.trade_price_uom,
            xpt_1.trade_settlement_currency,
            xpt_1.trade_transaction_type,
            xpt_1.trader_name,
            xpt_1.load_location_type,
            xpt_1.location_type,
            xpt_1.mode_of_transport,
            xpt_1.total_units,
            xpt_1.unload_location_type,
            xpt_1.weight_basis,
            xpt_1.delivery_terms_clause,
            xpt_1.payment_terms_clause,
            xpt_1.pricing_terms_clause,
            xpt_1.quantity_terms_clause,
            xpt_1.quotation_period_clause,
            xpt_1.quality_terms_clause,
            xpt_1.commodity_code,
            xpt_1.company_code,
            xpt_1.profitcenter_code,
            xpt_1.internal_profitcenter_code,
            xpt_1.counterparty_code,
            xpt_1.manual_trade_id,
            xpt_1.broker_reference,
            xpt_1.paper_trade,
            xpt_1.settlement_tolerance_percentage,
            xpt_1.trade_type,
            xpt_1.total_trade_value,
            xpt_1.contract_term,
            xpt_1.settlement_tolerance_value,
            xpt_1.trade_approval_status,
            xpt_1.delivery_schedule
           FROM taomish.xceler_physicaltradeservice_physicaltrade xpt_1
          WHERE ((xpt_1.trade_type)::text = ANY (ARRAY[('Physical'::character varying)::text, ('Paper'::character varying)::text]))) xpt
     LEFT JOIN ( SELECT sum(xcct.cost_value) AS cost,
            xcct.tenant_id,
            xcct.trade_id
           FROM taomish.xceler_costservice_tradecost xcct
          WHERE (((xcct.cost_type)::text = 'Per Unit'::text) AND ((xcct.cost_group)::text = 'Freight'::text) AND ((xcct.type)::text = 'Secondary'::text))
          GROUP BY xcct.tenant_id, xcct.trade_id) xct_freight ON ((((xct_freight.tenant_id)::text = (xpt.tenant_id)::text) AND ((xct_freight.trade_id)::text = (xpt.trade_id)::text))))
     LEFT JOIN ( SELECT sum(xcct.cost_value) AS cost,
            xcct.tenant_id,
            xcct.trade_id
           FROM taomish.xceler_costservice_tradecost xcct
          WHERE (((xcct.cost_type)::text = 'Per Unit'::text) AND ((xcct.cost_group)::text = 'Unit Commission'::text) AND ((xcct.type)::text = 'Secondary'::text))
          GROUP BY xcct.tenant_id, xcct.trade_id) xct_unit_commission ON ((((xct_unit_commission.tenant_id)::text = (xpt.tenant_id)::text) AND ((xct_unit_commission.trade_id)::text = (xpt.trade_id)::text))))
     LEFT JOIN ( SELECT sum(xcct.cost_value) AS cost,
            xcct.tenant_id,
            xcct.trade_id
           FROM taomish.xceler_costservice_tradecost xcct
          WHERE (((xcct.cost_type)::text = 'Per Unit'::text) AND ((xcct.type)::text = 'Secondary'::text))
          GROUP BY xcct.tenant_id, xcct.trade_id) xct ON ((((xct.tenant_id)::text = (xpt.tenant_id)::text) AND ((xct.trade_id)::text = (xpt.trade_id)::text))))
  WHERE ((xpt.trade_approval_status)::text = ANY (ARRAY[('void'::character varying)::text, ('Draft'::character varying)::text]));</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-153">
        <createView fullDefinition="false" viewName="xceler_report_additional_cost">SELECT costtable.uuid,
    costtable.tenant_id,
    costtable.cost_currency,
    costtable.name,
    costtable.trade_id,
    costtable.cost_value,
    costtable.cost_type,
    costtable.company,
    costtable.commodity,
    costtable.counterparty,
    costtable.incoterm,
    costtable.broker,
    costtable.trade_date,
    costtable.unload_location,
    costtable.trade_transaction_type,
    costtable.status,
    costtable.quantity,
    costtable.uom
   FROM ( SELECT taomish.uuid_generate_v4() AS uuid,
            costs.tenant_id,
            costs.cost_currency,
            costs.name,
            costs.trade_id,
            costs.cost_value,
            costs.cost_type,
            obli.obli_company AS company,
            obli.obli_commodity AS commodity,
            obli.obli_counterparty AS counterparty,
            obli.obli_incoterm AS incoterm,
            obli.obli_broker AS broker,
            obli.trade_date_time AS trade_date,
            obli.obli_unload_location AS unload_location,
                CASE
                    WHEN (obli.trade_transaction_type = 0) THEN 'BUY'::text
                    ELSE 'SELL'::text
                END AS trade_transaction_type,
                CASE
                    WHEN (obli.actualized = 'true'::text) THEN 'Actualized'::character varying
                    WHEN (obli.obli_quantity IS NOT NULL) THEN 'Confirmed'::character varying
                    ELSE NULL::character varying
                END AS status,
                CASE
                    WHEN (act.actualized_quantity IS NULL) THEN obli.obli_quantity
                    ELSE act.actualized_quantity
                END AS quantity,
            obli.uom
           FROM ((( SELECT tc.uuid,
                    tc.created_by,
                    tc.created_timestamp,
                    tc.tenant_id,
                    tc.updated_by,
                    tc.updated_timestamp,
                    tc.additional_note,
                    tc.cost_currency,
                    tc.cost_group,
                    tc.cost_id,
                    tc.cost_type,
                    tc.cost_value,
                    tc.counterparty,
                    tc.description,
                    tc.effective_date,
                    tc.input_date,
                    tc.maturity_date,
                    tc.name,
                    tc.payment_due_date,
                    tc.payment_term,
                    tc.payment_type,
                    tc.percentage_component,
                    tc.percentage_payable,
                    tc.quantity_option,
                    tc.tax_applicable,
                    tc.trade_id,
                    tc.trade_uuid,
                    tc.type,
                    tc.uom,
                    tc.cost_for,
                    tc.link_to,
                    tc.cost_charges_type,
                    tc.cost_matrix_id,
                    tc.cost_matrix_workflow,
                    tc.quantity
                   FROM taomish.xceler_costservice_tradecost tc
                  WHERE (((tc.quantity_option)::text &lt;&gt; 'Contract Quantity'::text) AND ((tc.cost_type)::text = 'Per Unit'::text) AND ((tc.type)::text = 'Secondary'::text))) costs
             LEFT JOIN ( SELECT xtp.uuid,
                    xtp.tenant_id AS obli_tenent_id,
                    xtp.trade_id AS obli_trade_id,
                    xtp.company AS obli_company,
                    xtp.commodity AS obli_commodity,
                    xtp.counterparty AS obli_counterparty,
                    xtp.incoterm AS obli_incoterm,
                    xtp.planned_quantity AS obli_quantity,
                    xtp.broker AS obli_broker,
                    xtp.unload_location AS obli_unload_location,
                    xtp.quantityuom AS uom,
                    xtp.planned_obligation_id,
                    xtp.trade_transaction_type,
                    xtp.trade_date_time,
                    (xtp.obligation_state -&gt;&gt; 'actualized'::text) AS actualized
                   FROM taomish.xceler_tradeplanningservice_plannedtradeobligation xtp
                  WHERE ((xtp.external_record = false) AND ((xtp.planned_obligation_status)::text = 'active'::text))) obli ON ((((obli.obli_trade_id)::text = (costs.trade_id)::text) AND ((obli.obli_tenent_id)::text = (costs.tenant_id)::text))))
             LEFT JOIN LATERAL ( SELECT xaa.tenant_id AS act_tenant_id,
                    xaa.planned_obligation_id AS act_planned_obli_id,
                        CASE
                            WHEN (obli.trade_transaction_type = 0) THEN xaa.load_quantity
                            ELSE xaa.unload_quantity
                        END AS actualized_quantity
                   FROM taomish.xceler_actualizationservice_actualizedquantity xaa) act ON ((((act.act_tenant_id)::text = (costs.tenant_id)::text) AND ((act.act_planned_obli_id)::text = (obli.planned_obligation_id)::text))))) costtable
  WHERE (costtable.status IS NOT NULL);</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-154">
        <createView fullDefinition="false" viewName="xceler_sales_realization_report">WITH xti AS (
         SELECT xceler_tradesettlementservice_tradeinvoice.tenant_id,
            xceler_tradesettlementservice_tradeinvoice.planned_obligation_id,
            xceler_tradesettlementservice_tradeinvoice.invoice_number,
            xceler_tradesettlementservice_tradeinvoice.invoice_type,
            xceler_tradesettlementservice_tradeinvoice.invoice_date,
            xceler_tradesettlementservice_tradeinvoice.status,
            xceler_tradesettlementservice_tradeinvoice.bl_number,
            xceler_tradesettlementservice_tradeinvoice.split_number,
            xceler_tradesettlementservice_tradeinvoice.quantity,
            xceler_tradesettlementservice_tradeinvoice.vessel_name,
            xceler_tradesettlementservice_tradeinvoice.vessel_id,
            xceler_tradesettlementservice_tradeinvoice.external_reference,
            xceler_tradesettlementservice_tradeinvoice.counterparty,
            xceler_tradesettlementservice_tradeinvoice.unit_price,
            xceler_tradesettlementservice_tradeinvoice.trade_price_uom,
            xceler_tradesettlementservice_tradeinvoice.currency,
            xceler_tradesettlementservice_tradeinvoice.uom
           FROM taomish.xceler_tradesettlementservice_tradeinvoice
          WHERE (((xceler_tradesettlementservice_tradeinvoice.status)::text = ANY ((ARRAY['POSTED'::character varying, 'Settled'::character varying])::text[])) AND (xceler_tradesettlementservice_tradeinvoice.planned_obligation_id IS NOT NULL) AND ((xceler_tradesettlementservice_tradeinvoice.invoice_type)::text = ANY ((ARRAY['Sell Provisional'::character varying, 'Sell'::character varying])::text[])))
        ), xtp AS (
         SELECT xceler_tradeplanningservice_plannedtradeobligation.planned_obligation_id,
            xceler_tradeplanningservice_plannedtradeobligation.planned_obligation_status,
            xceler_tradeplanningservice_plannedtradeobligation.tenant_id,
            xceler_tradeplanningservice_plannedtradeobligation.trade_type,
            xceler_tradeplanningservice_plannedtradeobligation.trade_price,
            xceler_tradeplanningservice_plannedtradeobligation.trade_date_time,
            xceler_tradeplanningservice_plannedtradeobligation.trade_price_currency,
            xceler_tradeplanningservice_plannedtradeobligation.quantityuom,
            xceler_tradeplanningservice_plannedtradeobligation.counterparty
           FROM taomish.xceler_tradeplanningservice_plannedtradeobligation
          WHERE (((xceler_tradeplanningservice_plannedtradeobligation.planned_obligation_status)::text = 'active'::text) AND ((xceler_tradeplanningservice_plannedtradeobligation.trade_type)::text = ANY ((ARRAY['Physical'::character varying, 'Paper'::character varying])::text[])))
        ), xaa AS (
         SELECT xceler_actualizationservice_actualizedquantity.tenant_id,
            xceler_actualizationservice_actualizedquantity.planned_obligation_id,
            xceler_actualizationservice_actualizedquantity.split_sequence_number,
            xceler_actualizationservice_actualizedquantity.load_quantity,
            xceler_actualizationservice_actualizedquantity.unload_quantity,
            xceler_actualizationservice_actualizedquantity.actualization_id
           FROM taomish.xceler_actualizationservice_actualizedquantity
        ), xab AS (
         SELECT xceler_actualizationservice_billoflanding.tenant_id,
            xceler_actualizationservice_billoflanding.planned_obligation_id,
            xceler_actualizationservice_billoflanding.split_sequence_number,
            xceler_actualizationservice_billoflanding.bl_number,
            xceler_actualizationservice_billoflanding.bl_date,
            xceler_actualizationservice_billoflanding.actual_quantity,
            xceler_actualizationservice_billoflanding.custom_fields
           FROM taomish.xceler_actualizationservice_billoflanding
        ), xts AS (
         SELECT xceler_transportallocationservice_seafreightdetails.vessel_name,
            xceler_transportallocationservice_seafreightdetails.voyage_no,
            xceler_transportallocationservice_seafreightdetails.tenant_id,
            jsonb_array_elements_text(xceler_transportallocationservice_seafreightdetails.planned_obligation_ids) AS id
           FROM taomish.xceler_transportallocationservice_seafreightdetails
        ), xsm AS (
         SELECT xceler_stock_movement.tenant_id,
            xceler_stock_movement.transfer_to,
            xceler_stock_movement.transfer_from,
            xceler_stock_movement.status,
            xceler_stock_movement.type,
            ((xceler_stock_movement.quantity -&gt;&gt; 'unit'::text))::double precision AS quantity,
            round(((xceler_stock_movement.price -&gt;&gt; 'unit'::text))::numeric, 2) AS unit_price,
            (xceler_stock_movement.price -&gt;&gt; 'uom'::text) AS currency,
            xceler_stock_movement.created_timestamp
           FROM taomish.xceler_stock_movement
          WHERE (((xceler_stock_movement.type)::text = 'Sales-Draw'::text) AND ((xceler_stock_movement.status)::text &lt;&gt; 'Deleted'::text))
        ), invoice_count AS (
         SELECT xti.tenant_id,
            xti.planned_obligation_id AS sell_planned_obligation_id,
            count(xti.invoice_number) AS invoice_count
           FROM xti
          GROUP BY xti.tenant_id, xti.planned_obligation_id
        )
 SELECT taomish.uuid_generate_v4() AS uuid,
    sales.tenant_id,
    sales.buy_planned_obligation_id,
    sales.buy_bl_no,
    sales.bl_date,
    sales.buy_match_quantity,
    sales.buy_trade_price,
    sales.buy_trade_price_currency,
    sales.sell_planned_obligation_id,
    sales.sell_bl_no,
    sales.sell_match_quantity,
    sales.invoice_number,
    sales.invoice_date,
    sales.sell_trade_price,
    sales.sell_trade_price_currency,
    sales.sell_uom,
    sales.counterparty,
    sales.external_reference,
    sales.voyage_no,
    sales.vessel_name,
    sales.transfer_from,
    round(taomish.convert_currency_v2(sales.tenant_id, sales.buy_trade_price_currency, 'USD'::character varying, (sales.buy_trade_price * sales.buy_match_quantity), sales.bl_date), 2) AS converted_buy_trade_price,
    round(taomish.convert_currency_v2(sales.tenant_id, sales.sell_trade_price_currency, 'USD'::character varying, (sales.sell_trade_price * sales.sell_match_quantity), sales.invoice_date), 2) AS converted_sell_trade_price,
    sales.invoice_type
   FROM ( SELECT taomish.uuid_generate_v4() AS uuid,
            xti.tenant_id,
            xtt.planned_obligation_id AS buy_planned_obligation_id,
            xtt.bl_no AS buy_bl_no,
            xabb.bl_date,
                CASE
                    WHEN (ic.invoice_count &gt; 1) THEN xtli.quantity
                    ELSE xtt.match_quantity
                END AS buy_match_quantity,
            xtpb.trade_price AS buy_trade_price,
            xtpb.trade_price_currency AS buy_trade_price_currency,
            xti.planned_obligation_id AS sell_planned_obligation_id,
            xtli.ship_doc_number AS sell_bl_no,
                CASE
                    WHEN (ic.invoice_count &gt; 1) THEN xtli.quantity
                    ELSE xtt.match_quantity
                END AS sell_match_quantity,
            xti.invoice_number,
            xti.invoice_date,
            xti.unit_price AS sell_trade_price,
            xti.currency AS sell_trade_price_currency,
            xti.uom AS sell_uom,
            xti.counterparty,
            xti.external_reference,
            xti.vessel_id AS voyage_no,
            xti.vessel_name,
            NULL::text AS transfer_from,
            xti.invoice_type
           FROM (((((((xti
             JOIN xtp xtps ON ((((xti.planned_obligation_id)::text = (xtps.planned_obligation_id)::text) AND ((xti.tenant_id)::text = (xtps.tenant_id)::text))))
             LEFT JOIN taomish.xceler_tradesettlementservice_tradeinvoicelineitem xtli ON ((((xti.planned_obligation_id)::text = (xtli.planned_obligation_id)::text) AND ((xti.tenant_id)::text = (xtli.tenant_id)::text) AND ((xti.invoice_number)::text = (xtli.invoice_number)::text) AND (xtli.voided = false))))
             LEFT JOIN taomish.xceler_tradeplanningservice_tradelink xtt ON ((((xtt.tenant_id)::text = (xti.tenant_id)::text) AND ((xtt.linked_with)::text = (xti.planned_obligation_id)::text))))
             LEFT JOIN xtp xtpb ON ((((xtt.planned_obligation_id)::text = (xtpb.planned_obligation_id)::text) AND ((xtt.tenant_id)::text = (xtpb.tenant_id)::text))))
             LEFT JOIN xaa xaab ON ((((xtt.planned_obligation_id)::text = (xaab.planned_obligation_id)::text) AND ((xtt.tenant_id)::text = (xaab.tenant_id)::text) AND ((xtt.split_sequence_number)::double precision = xaab.split_sequence_number))))
             LEFT JOIN xab xabb ON ((((xaab.planned_obligation_id)::text = (xabb.planned_obligation_id)::text) AND ((xaab.tenant_id)::text = (xabb.tenant_id)::text) AND (xaab.split_sequence_number = xabb.split_sequence_number))))
             LEFT JOIN invoice_count ic ON ((((xti.tenant_id)::text = (ic.tenant_id)::text) AND ((xti.planned_obligation_id)::text = (ic.sell_planned_obligation_id)::text))))
          WHERE (xtt.planned_obligation_id IS NOT NULL)
        UNION ALL
         SELECT taomish.uuid_generate_v4() AS uuid,
            xti.tenant_id,
            xtpb.planned_obligation_id AS buy_planned_obligation_id,
            xabb.bl_number AS buy_bl_no,
            xabb.bl_date,
                CASE
                    WHEN (ic.invoice_count &gt; 1) THEN xtli.quantity
                    ELSE xtpl.quantity
                END AS buy_match_quantity,
            xtpb.trade_price AS buy_trade_price,
            xtpb.trade_price_currency AS buy_trade_price_currency,
            xti.planned_obligation_id AS sell_planned_obligation_id,
            xtli.ship_doc_number AS sell_bl_no,
                CASE
                    WHEN (ic.invoice_count &gt; 1) THEN xtli.quantity
                    ELSE xtpl.quantity
                END AS sell_match_quantity,
            xti.invoice_number,
            xti.invoice_date,
            xti.unit_price AS sell_trade_price,
            xti.currency AS sell_trade_price_currency,
            xti.uom AS sell_uom,
            xti.counterparty,
            xti.external_reference,
            xti.vessel_id AS voyage_no,
            xti.vessel_name,
            NULL::text AS transfer_from,
            xti.invoice_type
           FROM ((((((xti
             JOIN xtp xtps ON ((((xti.planned_obligation_id)::text = (xtps.planned_obligation_id)::text) AND ((xti.tenant_id)::text = (xtps.tenant_id)::text))))
             LEFT JOIN taomish.xceler_tradesettlementservice_tradeinvoicelineitem xtli ON ((((xti.planned_obligation_id)::text = (xtli.planned_obligation_id)::text) AND ((xti.tenant_id)::text = (xtli.tenant_id)::text) AND ((xti.invoice_number)::text = (xtli.invoice_number)::text) AND (xtli.voided = false))))
             LEFT JOIN xsm xtpl ON ((((xti.tenant_id)::text = (xtpl.tenant_id)::text) AND ((xti.planned_obligation_id)::text = (xtpl.transfer_to)::text))))
             LEFT JOIN xtp xtpb ON ((((xtpl.transfer_from)::text = (xtpb.planned_obligation_id)::text) AND ((xtpl.tenant_id)::text = (xtpb.tenant_id)::text))))
             LEFT JOIN ( SELECT xaab.planned_obligation_id,
                    xaab.tenant_id,
                    string_agg((xabb_1.bl_number)::text, ','::text) AS bl_number,
                    max(xabb_1.bl_date) AS bl_date
                   FROM (xaa xaab
                     LEFT JOIN xab xabb_1 ON ((((xaab.planned_obligation_id)::text = (xabb_1.planned_obligation_id)::text) AND ((xaab.tenant_id)::text = (xabb_1.tenant_id)::text) AND (xaab.split_sequence_number = xabb_1.split_sequence_number))))
                  GROUP BY xaab.planned_obligation_id, xaab.tenant_id) xabb ON ((((xtpl.transfer_from)::text = (xabb.planned_obligation_id)::text) AND ((xtpl.tenant_id)::text = (xabb.tenant_id)::text))))
             LEFT JOIN invoice_count ic ON ((((xti.tenant_id)::text = (ic.tenant_id)::text) AND ((xti.planned_obligation_id)::text = (ic.sell_planned_obligation_id)::text))))
          WHERE (xtpb.planned_obligation_id IS NOT NULL)
        UNION ALL
         SELECT taomish.uuid_generate_v4() AS uuid,
            xti.tenant_id,
            xsm.transfer_from AS buy_planned_obligation_id,
            xsm.transfer_from AS buy_bl_no,
            xsm.created_timestamp AS bl_date,
            xtli.quantity AS buy_match_quantity,
            round(xi.average_price) AS buy_trade_price,
            xsm.currency AS buy_trade_price_currency,
            xti.planned_obligation_id AS sell_planned_obligation_id,
            xtli.ship_doc_number AS sell_bl_no,
            xtli.quantity AS sell_match_quantity,
            xti.invoice_number,
            xti.invoice_date,
            xti.unit_price AS sell_trade_price,
            xti.currency AS sell_trade_price_currency,
            xti.uom AS sell_uom,
            xti.counterparty,
            xti.external_reference,
            xti.vessel_id AS voyage_no,
            xti.vessel_name,
            xsm.transfer_from,
            xti.invoice_type
           FROM ((((xti
             LEFT JOIN taomish.xceler_tradesettlementservice_tradeinvoicelineitem xtli ON ((((xti.planned_obligation_id)::text = (xtli.planned_obligation_id)::text) AND ((xti.tenant_id)::text = (xtli.tenant_id)::text) AND ((xti.invoice_number)::text = (xtli.invoice_number)::text) AND (xtli.voided = false))))
             LEFT JOIN invoice_count ic ON ((((xti.tenant_id)::text = (ic.tenant_id)::text) AND ((xti.planned_obligation_id)::text = (ic.sell_planned_obligation_id)::text))))
             JOIN xsm ON ((((xti.tenant_id)::text = (xsm.tenant_id)::text) AND ((xti.planned_obligation_id)::text = (xsm.transfer_to)::text))))
             JOIN taomish.xceler_inventory xi ON ((((xti.tenant_id)::text = (xi.tenant_id)::text) AND ((xsm.transfer_from)::text = (xi.inventory_name)::text) AND ((xi.blending)::text = 'yes'::text))))) sales;</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-155">
        <createView fullDefinition="false" viewName="xceler_vesselplanning_shippingschedule">SELECT taomish.uuid_generate_v4() AS uuid,
    tab.voyage_no AS bookingid,
    tab.vessel_name AS vesselname,
    tab.tenant_id,
    tab.freight_capacity AS freightcapacity,
    tab.plan_id AS planid,
    NULL::text AS pic,
    tab.loadport,
    tab.unloadport,
    NULL::text AS laycandate,
    NULL::text AS etato,
    tab.allocation_date,
    NULL::text AS sailingdate,
    tab.buy_planned_obligation_id AS purchasecontractid,
    tab.sell_commodity AS commodity,
    tab.sell_counterparty AS buyer,
    tab.buy_trade_price AS buyprice,
    tab.buy_price_currency AS buypricecurrency,
    tab.buy_planned_quantity AS buyquantity,
    tab.buy_quantityuom AS buyquantityuom,
    tab.buy_created_timestamp AS buydate,
    tab.sell_planned_obligation_id AS salecontractid,
    tab.buy_counterparty AS supplier,
    tab.sell_trade_price AS sellprice,
    tab.sell_price_currency AS sellpricecurrency,
    tab.sell_planned_quantity AS sellquantity,
    tab.sell_price_uom AS sellquantityuom,
    tab.sell_created_timestamp AS selldate,
    tab.buy_broker AS buybroker,
    tab.sell_broker AS sellbroker,
    tab.bl_number AS buyblnumber,
    NULL::text AS sellblnumber,
    tab.allocated_quantity AS buyloadquantity,
    tab.allocated_quantity AS sellloadquantity,
    tab.profitcenter,
    tab.deliveryenddate,
    tab.stowage_no AS stowage,
    tab.buy_incoterm,
    tab.sell_incoterm,
    tab.origin,
    tab.sell_company,
    NULL::text AS match_type,
    tab.profitcenter AS sell_profitcenter,
    tab.sell_price_type,
    tab.voyage_no,
    tab.match_quantity,
    taomish.convert_currency(tab.buy_price_currency, 'USD'::character varying, tab.buy_trade_price, tab.buy_created_timestamp) AS conversion_price,
    tab.bl_date,
    tab.allocation_type
   FROM ( SELECT taomish.uuid_generate_v4() AS uuid,
            xtp2.tenant_id,
            xtt.created_timestamp,
            xtp2.plan_id,
            xab.split_sequence_number,
            xtp2.planned_obligation_id AS sell_planned_obligation_id,
            xtp2.counterparty AS sell_counterparty,
            xtp2.commodity AS sell_commodity,
            xtp2.planned_quantity AS sell_planned_quantity,
            xtp2.trade_price AS sell_trade_price,
            xtp2.trade_price_currency AS sell_price_currency,
            xtp2.trade_price_uom AS sell_price_uom,
            xtp2.created_timestamp AS sell_created_timestamp,
            xtp1.counterparty AS buy_counterparty,
            xtp1.planned_quantity AS buy_planned_quantity,
            xtp1.quantityuom AS buy_quantityuom,
            xtp1.trade_price AS buy_trade_price,
            xtp1.trade_price_currency AS buy_price_currency,
            xtp1.trade_price_uom AS buy_price_uom,
            xtp1.created_timestamp AS buy_created_timestamp,
            xts2.load_port,
            xtp1.planned_obligation_id AS buy_planned_obligation_id,
            xtt.match_quantity,
            xtt.allocated_quantity,
            xab.stowage_no,
            xab.bl_number,
            xab.bl_date,
            xts.vessel_name,
            xts.freight_capacity,
            xtp1.load_location AS loadport,
            xtp1.unload_location AS unloadport,
            xts.voyage_no,
            xts.created_timestamp AS allocation_date,
            xtp1.profitcenter,
            xtp1.price_type AS sell_price_type,
            xtp1.incoterm AS sell_incoterm,
            xtp2.incoterm AS buy_incoterm,
            xtp1.broker AS buy_broker,
            xtp2.broker AS sell_broker,
            xtp1.delivery_end_date AS deliveryenddate,
            xtp1.crop_origin AS origin,
            xtp1.company AS buy_company,
            xtp2.company AS sell_company,
            'trade'::text AS allocation_type
           FROM (((((taomish.xceler_tradeplanningservice_tradelink xtt
             LEFT JOIN taomish.xceler_tradeplanningservice_plannedtradeobligation xtp1 ON ((((xtp1.tenant_id)::text = (xtt.tenant_id)::text) AND ((xtp1.planned_obligation_id)::text = (xtt.planned_obligation_id)::text))))
             LEFT JOIN taomish.xceler_tradeplanningservice_plannedtradeobligation xtp2 ON ((((xtp2.tenant_id)::text = (xtt.tenant_id)::text) AND ((xtp2.planned_obligation_id)::text = (xtt.linked_with)::text))))
             LEFT JOIN taomish.xceler_actualizationservice_billoflanding xab ON ((((xtp1.tenant_id)::text = (xab.tenant_id)::text) AND ((xtp1.planned_obligation_id)::text = (xab.planned_obligation_id)::text) AND (xab.split_sequence_number = (xtt.split_sequence_number)::double precision))))
             LEFT JOIN taomish.xceler_transportallocationservice_seafreightdetails xts ON ((((xts.tenant_id)::text = (xts.tenant_id)::text) AND ((xts.plan_id)::text = (xtt.planning_id)::text))))
             LEFT JOIN taomish.xceler_transportallocationservice_seafreightloaddetails xts2 ON ((((xts2.tenant_id)::text = (xtt.tenant_id)::text) AND ((xts2.vessel_id)::text = (xts.vessel_id)::text))))
          WHERE (((xtp1.trade_type)::text &lt;&gt; 'InterCompany'::text) AND ((xtp2.trade_type)::text &lt;&gt; 'InterCompany'::text))
        UNION
         SELECT taomish.uuid_generate_v4() AS uuid,
            xtp1.tenant_id,
            xtt.created_timestamp,
            xtp1.plan_id,
            xab.split_sequence_number,
            xtp1.planned_obligation_id AS sell_planned_obligation_id,
            xtp1.counterparty AS sell_counterparty,
            xtp1.commodity AS sell_commodity,
            xtp1.planned_quantity AS sell_planned_quantity,
            xtp1.trade_price AS sell_trade_price,
            xtp1.trade_price_currency AS sell_price_currency,
            xtp1.trade_price_uom AS sell_price_uom,
            xtp1.created_timestamp AS sell_created_timestamp,
            NULL::character varying AS buy_counterparty,
            ((xtt.quantity -&gt;&gt; 'unit'::text))::double precision AS buy_planned_quantity,
            xtp1.quantityuom AS buy_quantityuom,
            ((xtt.price -&gt;&gt; 'unit'::text))::double precision AS buy_trade_price,
            xtp1.trade_price_currency AS buy_price_currency,
            xtp1.trade_price_uom AS buy_price_uom,
            xtt.created_timestamp AS buy_created_timestamp,
            xts2.load_port,
            xtt.transfer_id AS buy_planned_obligation_id,
            ((xtt.quantity -&gt;&gt; 'unit'::text))::double precision AS match_quantity,
            ((xtt.quantity -&gt;&gt; 'unit'::text))::double precision AS allocated_quantity,
            xab.stowage_no,
            xi.inventory_name AS bl_number,
            xtt.created_timestamp AS bl_date,
            xts.vessel_name,
            xts.freight_capacity,
            xi.storage_name AS loadport,
            xtp1.unload_location AS unloadport,
            xts.voyage_no,
            xts.created_timestamp AS allocation_date,
            xtp1.profitcenter,
            xtp1.price_type AS sell_price_type,
            xtp1.incoterm AS sell_incoterm,
            xtp1.incoterm AS buy_incoterm,
            xtp1.broker AS buy_broker,
            xtp1.broker AS sell_broker,
            xtp1.delivery_end_date AS deliveryenddate,
            xtp1.crop_origin AS origin,
            xtp1.company AS buy_company,
            xtp1.company AS sell_company,
            'stock'::text AS allocation_type
           FROM ((((((taomish.xceler_stock_movement xtt
             LEFT JOIN taomish.xceler_sell_stock xss ON ((((xss.sell_stock_id)::text = (xtt.sell_stock_id)::text) AND ((xss.tenant_id)::text = (xtt.tenant_id)::text))))
             LEFT JOIN taomish.xceler_inventory xi ON ((((xi.inventory_id)::text = (xss.transfer_from_id)::text) AND ((xi.tenant_id)::text = (xss.tenant_id)::text))))
             LEFT JOIN taomish.xceler_tradeplanningservice_plannedtradeobligation xtp1 ON ((((xtp1.tenant_id)::text = (xtt.tenant_id)::text) AND ((xtp1.planned_obligation_id)::text = (xtt.transfer_to)::text))))
             LEFT JOIN taomish.xceler_actualizationservice_billoflanding xab ON ((((xtp1.tenant_id)::text = (xab.tenant_id)::text) AND ((xtp1.planned_obligation_id)::text = (xab.planned_obligation_id)::text))))
             LEFT JOIN taomish.xceler_transportallocationservice_seafreightdetails xts ON ((((xts.tenant_id)::text = (xts.tenant_id)::text) AND ((xts.plan_id)::text = (xtp1.plan_id)::text))))
             LEFT JOIN taomish.xceler_transportallocationservice_seafreightloaddetails xts2 ON ((((xts2.tenant_id)::text = (xtt.tenant_id)::text) AND ((xts2.vessel_id)::text = (xts.vessel_id)::text))))
          WHERE (((xtt.type)::text = 'Sales-Draw'::text) AND ((xtt.status)::text &lt;&gt; 'Deleted'::text) AND ((xtp1.trade_type)::text &lt;&gt; 'InterCompany'::text))) tab;</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-156">
        <createView fullDefinition="false" viewName="vw_future_index_criteria">SELECT xceler_futuretradeservice_futuretrade.tenant_id,
    json_build_object('Clearingbroker', jsonb_agg(DISTINCT xceler_futuretradeservice_futuretrade.clearing_broker), 'Expirymonth', jsonb_agg(DISTINCT xceler_futuretradeservice_futuretrade.expiry_month), 'Futureindex', jsonb_agg(DISTINCT xceler_futuretradeservice_futuretrade.future_index), 'Profitcenter', jsonb_agg(DISTINCT xceler_futuretradeservice_futuretrade.profitcenter)) AS criteria_map
   FROM taomish.xceler_futuretradeservice_futuretrade
  GROUP BY xceler_futuretradeservice_futuretrade.tenant_id;</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-157">
        <createView fullDefinition="false" viewName="vw_xceler_report_futureclosing">SELECT fcr.uuid,
    fcr.tenant_id,
    fcr.netting_id,
    fcr.profitcenter,
    fcr.expiry_month,
    fcr.close_out_date,
    fcr.buy_trade_date,
    fcr.sell_trade_date,
    fcr.buy_expiry_date,
    fcr.sell_expiry_date,
    fcr.buy_currency,
    fcr.sell_currency,
    fcr.netted_lots,
    fcr.buy_price,
    fcr.commodity,
    fcr.netted_date,
    fcr.sell_price,
    fcr.buy_quantity,
    fcr.sell_quantity,
    fcr.buy_counterparty,
    fcr.sell_counterparty,
    fcr.buy_trade_id,
    fcr.sell_trade_id,
    fcr.broker,
    fcr.lot_size,
        CASE
            WHEN ((fcr.commodity)::text = 'Refined Soybean Oil'::text) THEN ((((fcr.sell_price - fcr.buy_price) * fcr.netted_lots) * fcr.lot_size) / (100)::double precision)
            ELSE (((fcr.sell_price - fcr.buy_price) * fcr.netted_lots) * fcr.lot_size)
        END AS realised_pnl,
        CASE
            WHEN ((fcr.commodity)::text = 'Refined Soybean Oil'::text) THEN ((fcr.netted_lots * fcr.lot_size) * (0.00045359237)::double precision)
            ELSE (fcr.netted_lots * fcr.lot_size)
        END AS match_quantity
   FROM ( SELECT taomish.uuid_generate_v4() AS uuid,
            xfn.tenant_id,
            xfn.netting_id,
            xfn.profitcenter,
            xfn.expiry_month,
            xfd.netted_date AS close_out_date,
            xft1.trade_date AS buy_trade_date,
            xft.trade_date AS sell_trade_date,
            xft1.expiry_date AS buy_expiry_date,
            xft.expiry_date AS sell_expiry_date,
            xft1.currency AS buy_currency,
            xft.currency AS sell_currency,
            xfd.match_lots AS netted_lots,
            xft1.trade_price AS buy_price,
            xfn.commodity,
            xfd.netted_date,
            xft.trade_price AS sell_price,
            xft1.lot AS buy_quantity,
            xft.lot AS sell_quantity,
            xft1.exchange AS buy_counterparty,
            xft.exchange AS sell_counterparty,
            xft1.trade_id AS buy_trade_id,
            xft.trade_id AS sell_trade_id,
            xfn.broker,
            xft1.lot_size
           FROM (((taomish.xceler_futuretradeservice_futurenetting xfn
             LEFT JOIN taomish.xceler_futuretradeservice_futurenettingdetails xfd ON ((((xfn.tenant_id)::text = (xfd.tenant_id)::text) AND ((xfn.netting_id)::text = (xfd.netting_id)::text))))
             LEFT JOIN taomish.xceler_futuretradeservice_futuretrade xft ON ((((xfd.tenant_id)::text = (xft.tenant_id)::text) AND ((xfd.short_trade_id)::text = (xft.trade_id)::text))))
             LEFT JOIN taomish.xceler_futuretradeservice_futuretrade xft1 ON ((((xft1.tenant_id)::text = (xfd.tenant_id)::text) AND ((xfd.long_trade_id)::text = (xft1.trade_id)::text))))) fcr;</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-158">
        <createView fullDefinition="false" viewName="vw_xceler_report_future_netting_summary">SELECT taomish.uuid_generate_v4() AS uuid,
    ftt.commodity,
    ftt.tenant_id,
    ftt.profitcenter,
    ftt.clearing_broker,
    sum(ftt.shortpostion) AS short_position,
    sum(ftt.longpostion) AS long_position,
    sum(ftt.matchlot) AS match_lot,
    avg((ftt.short_price - ftt.long_price)) AS price,
    sum(ftt.s_matchlotsize) AS s_matchlot_quantity,
    ftt.deliverymonth,
    ftt.company,
    ftt.exchange
   FROM ( SELECT ft.commodity,
            ft.tenant_id,
            ft.profitcenter,
            ft.clearing_broker,
                CASE
                    WHEN (mt.matchlot IS NULL) THEN ft.lot
                    ELSE (ft.lot - mt.matchlot)
                END AS shortpostion,
            mt.matchlot,
            0 AS longpostion,
            0 AS long_price,
            ft.trade_price AS short_price,
            to_char(ft.expiry_date, 'FMMonth-YYYY'::text) AS deliverymonth,
            (ft.lot_size * mt.matchlot) AS s_matchlotsize,
            'Sell'::text AS type,
            ft.company,
            ft.exchange
           FROM (( SELECT xceler_futuretradeservice_futuretrade.uuid,
                    xceler_futuretradeservice_futuretrade.created_by,
                    xceler_futuretradeservice_futuretrade.created_timestamp,
                    xceler_futuretradeservice_futuretrade.tenant_id,
                    xceler_futuretradeservice_futuretrade.updated_by,
                    xceler_futuretradeservice_futuretrade.updated_timestamp,
                    xceler_futuretradeservice_futuretrade.brokerage_fee,
                    xceler_futuretradeservice_futuretrade.clearing_broker,
                    xceler_futuretradeservice_futuretrade.clearing_broker_account,
                    xceler_futuretradeservice_futuretrade.clearing_fee,
                    xceler_futuretradeservice_futuretrade.commodity,
                    xceler_futuretradeservice_futuretrade.company,
                    xceler_futuretradeservice_futuretrade.counterparty,
                    xceler_futuretradeservice_futuretrade.currency,
                    xceler_futuretradeservice_futuretrade.exchange,
                    xceler_futuretradeservice_futuretrade.exchange_for,
                    xceler_futuretradeservice_futuretrade.execution_broker,
                    xceler_futuretradeservice_futuretrade.expired_status,
                    xceler_futuretradeservice_futuretrade.expiry_date,
                    xceler_futuretradeservice_futuretrade.expiry_month,
                    xceler_futuretradeservice_futuretrade.future_index,
                    xceler_futuretradeservice_futuretrade.lot,
                    xceler_futuretradeservice_futuretrade.lot_size,
                    xceler_futuretradeservice_futuretrade.netting_status,
                    xceler_futuretradeservice_futuretrade.profitcenter,
                    xceler_futuretradeservice_futuretrade.tag,
                    xceler_futuretradeservice_futuretrade.trade_date,
                    xceler_futuretradeservice_futuretrade.trade_id,
                    xceler_futuretradeservice_futuretrade.trade_price,
                    xceler_futuretradeservice_futuretrade.trade_transaction_type,
                    xceler_futuretradeservice_futuretrade.trade_type,
                    xceler_futuretradeservice_futuretrade.trader_name,
                    xceler_futuretradeservice_futuretrade.uom,
                    xceler_futuretradeservice_futuretrade.cost,
                    xceler_futuretradeservice_futuretrade.initial_margin,
                    xceler_futuretradeservice_futuretrade.maintenance_margin,
                    xceler_futuretradeservice_futuretrade.rollover_status,
                    xceler_futuretradeservice_futuretrade.rollover_spread,
                    xceler_futuretradeservice_futuretrade.parent_row_id,
                    xceler_futuretradeservice_futuretrade.product_code,
                    xceler_futuretradeservice_futuretrade.contract_month,
                    xceler_futuretradeservice_futuretrade.match_lot
                   FROM taomish.xceler_futuretradeservice_futuretrade
                  WHERE (xceler_futuretradeservice_futuretrade.trade_transaction_type = 1)) ft
             LEFT JOIN ( SELECT xceler_futuretradeservice_futurenettingdetails.short_trade_id,
                    sum(xceler_futuretradeservice_futurenettingdetails.match_lots) AS matchlot,
                    xceler_futuretradeservice_futurenettingdetails.tenant_id
                   FROM taomish.xceler_futuretradeservice_futurenettingdetails
                  GROUP BY xceler_futuretradeservice_futurenettingdetails.short_trade_id, xceler_futuretradeservice_futurenettingdetails.tenant_id) mt ON ((((mt.short_trade_id)::text = (ft.trade_id)::text) AND ((mt.tenant_id)::text = (ft.tenant_id)::text))))
        UNION
         SELECT ft.commodity,
            ft.tenant_id,
            ft.profitcenter,
            ft.clearing_broker,
            0 AS shortpostion,
            NULL::double precision AS matchlot,
                CASE
                    WHEN (mt.matchlot IS NULL) THEN ft.lot
                    ELSE (ft.lot - mt.matchlot)
                END AS longpostion,
            ft.trade_price AS long_price,
            0 AS short_price,
            to_char(ft.expiry_date, 'FMMonth-YYYY'::text) AS deliverymonth,
            0 AS s_matchlotsize,
            'buy'::text AS type,
            ft.company,
            ft.exchange
           FROM (( SELECT xceler_futuretradeservice_futuretrade.uuid,
                    xceler_futuretradeservice_futuretrade.created_by,
                    xceler_futuretradeservice_futuretrade.created_timestamp,
                    xceler_futuretradeservice_futuretrade.tenant_id,
                    xceler_futuretradeservice_futuretrade.updated_by,
                    xceler_futuretradeservice_futuretrade.updated_timestamp,
                    xceler_futuretradeservice_futuretrade.brokerage_fee,
                    xceler_futuretradeservice_futuretrade.clearing_broker,
                    xceler_futuretradeservice_futuretrade.clearing_broker_account,
                    xceler_futuretradeservice_futuretrade.clearing_fee,
                    xceler_futuretradeservice_futuretrade.commodity,
                    xceler_futuretradeservice_futuretrade.company,
                    xceler_futuretradeservice_futuretrade.counterparty,
                    xceler_futuretradeservice_futuretrade.currency,
                    xceler_futuretradeservice_futuretrade.exchange,
                    xceler_futuretradeservice_futuretrade.exchange_for,
                    xceler_futuretradeservice_futuretrade.execution_broker,
                    xceler_futuretradeservice_futuretrade.expired_status,
                    xceler_futuretradeservice_futuretrade.expiry_date,
                    xceler_futuretradeservice_futuretrade.expiry_month,
                    xceler_futuretradeservice_futuretrade.future_index,
                    xceler_futuretradeservice_futuretrade.lot,
                    xceler_futuretradeservice_futuretrade.lot_size,
                    xceler_futuretradeservice_futuretrade.netting_status,
                    xceler_futuretradeservice_futuretrade.profitcenter,
                    xceler_futuretradeservice_futuretrade.tag,
                    xceler_futuretradeservice_futuretrade.trade_date,
                    xceler_futuretradeservice_futuretrade.trade_id,
                    xceler_futuretradeservice_futuretrade.trade_price,
                    xceler_futuretradeservice_futuretrade.trade_transaction_type,
                    xceler_futuretradeservice_futuretrade.trade_type,
                    xceler_futuretradeservice_futuretrade.trader_name,
                    xceler_futuretradeservice_futuretrade.uom,
                    xceler_futuretradeservice_futuretrade.cost,
                    xceler_futuretradeservice_futuretrade.initial_margin,
                    xceler_futuretradeservice_futuretrade.maintenance_margin,
                    xceler_futuretradeservice_futuretrade.rollover_status,
                    xceler_futuretradeservice_futuretrade.rollover_spread,
                    xceler_futuretradeservice_futuretrade.parent_row_id,
                    xceler_futuretradeservice_futuretrade.product_code,
                    xceler_futuretradeservice_futuretrade.contract_month,
                    xceler_futuretradeservice_futuretrade.match_lot
                   FROM taomish.xceler_futuretradeservice_futuretrade
                  WHERE (xceler_futuretradeservice_futuretrade.trade_transaction_type = 0)) ft
             LEFT JOIN ( SELECT xceler_futuretradeservice_futurenettingdetails.long_trade_id,
                    sum(xceler_futuretradeservice_futurenettingdetails.match_lots) AS matchlot,
                    xceler_futuretradeservice_futurenettingdetails.tenant_id
                   FROM taomish.xceler_futuretradeservice_futurenettingdetails
                  GROUP BY xceler_futuretradeservice_futurenettingdetails.long_trade_id, xceler_futuretradeservice_futurenettingdetails.tenant_id) mt ON ((((mt.long_trade_id)::text = (ft.trade_id)::text) AND ((mt.tenant_id)::text = (ft.tenant_id)::text))))) ftt
  WHERE ((ftt.commodity IS NOT NULL) AND (ftt.deliverymonth IS NOT NULL))
  GROUP BY ftt.commodity, ftt.tenant_id, ftt.profitcenter, ftt.clearing_broker, ftt.deliverymonth, ftt.company, ftt.exchange;</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-159">
        <createView fullDefinition="false" viewName="xceler_report_future_paper_view">(
         SELECT taomish.uuid_generate_v4() AS uuid,
            xtp.tenant_id,
            xtp.trade_id,
            xtp.company,
            xtp.profitcenter,
            xtp.trade_date_time,
            xtp.external_reference,
            xtp.trade_transaction_type,
            xtp.trade_type,
            xtp.commodity,
            xtp.quantity,
            xtp.counterparty,
            xtp.period_end_date,
            xtp.quantity_uom,
            xtp.incoterm,
            xtp.load_location,
            xtp.trade_price,
            xtp.trade_price_currency,
            xtp.broker,
            xtp.price_type,
            round((xptt.priced_quantity)::numeric, 3) AS priced_quantity,
            xtp.status AS price_status,
            xtp.trade_status,
            (xtp.trade_price - xct.cost) AS fob,
            NULL::text AS netting_status,
            NULL::integer AS match_lot,
            0 AS lot,
            0 AS lot_size,
            NULL::text AS exchange
           FROM ((( SELECT x.tenant_id,
                    x.trade_id,
                    x.company,
                    x.profitcenter,
                    x.trade_date_time,
                    x.external_reference,
                    x.trade_transaction_type,
                    x.trade_type,
                    x.commodity,
                    sum(x.quantity) AS quantity,
                    x.counterparty,
                    x.period_end_date,
                    x.quantity_uom,
                    x.incoterm,
                    x.load_location,
                    avg(x.trade_price) AS trade_price,
                    x.provisional_price,
                    x.trade_price_currency,
                    x.broker,
                    x.price_type,
                    x.status,
                    x.trade_status,
                    x.trader_name
                   FROM ( SELECT xtp_1.tenant_id,
                            xtp_1.trade_id,
                            xtp_1.company,
                            xtp_1.profitcenter,
                            xtp_1.trade_date_time,
                            min(xtp_1.broker_reference) AS external_reference,
                            xtp_1.trade_transaction_type,
                            xtp_1.trade_type,
                            min((xtp_1.commodity)::text) AS commodity,
                            sum(xtp_1.planned_quantity) AS quantity,
                            min((xtp_1.counterparty)::text) AS counterparty,
                            min(xtp_1.delivery_start_date) AS period_end_date,
                            xtp_1.quantityuom AS quantity_uom,
                            min((xtp_1.incoterm)::text) AS incoterm,
                                CASE
                                    WHEN (min((xtp_1.unload_location)::text) IS NULL) THEN min((xtp_1.load_location)::text)
                                    WHEN (min((xtp_1.unload_location)::text) = ''::text) THEN min((xtp_1.load_location)::text)
                                    WHEN (min((xtp_1.unload_location)::text) = 'N/A'::text) THEN min((xtp_1.load_location)::text)
                                    ELSE min((xtp_1.unload_location)::text)
                                END AS load_location,
                                CASE
                                    WHEN (sum(xtp_1.planned_quantity) = (0)::double precision) THEN (0)::double precision
                                    ELSE (sum((xtp_1.planned_quantity * xtp_1.trade_price)) / sum(xtp_1.planned_quantity))
                                END AS trade_price,
                            xtp_1.provisional_price,
                            xtp_1.trade_price_currency,
                            min((xtp_1.broker)::text) AS broker,
                            xtp_1.price_type,
                                CASE
                                    WHEN ((xtp_1.price_type)::text = 'Fixed'::text) THEN 'PRICED'::text
                                    WHEN (count(*) = sum(
                                    CASE
WHEN ((xtp_1.obligation_state -&gt;&gt; 'PRICED'::text) = 'true'::text) THEN 1
ELSE 0
                                    END)) THEN 'PRICED'::text
                                    WHEN ((sum(
                                    CASE
WHEN ((xtp_1.obligation_state -&gt;&gt; 'PRICED'::text) = 'true'::text) THEN 1
ELSE 0
                                    END) = 0) AND (sum(
                                    CASE
WHEN ((xtp_1.obligation_state -&gt;&gt; 'PARTIALLY_PRICED'::text) = 'true'::text) THEN 1
ELSE 0
                                    END) = 0)) THEN 'UNPRICED'::text
                                    ELSE 'PARTIALLY PRICED'::text
                                END AS status,
                                CASE
                                    WHEN (count(*) = sum(
                                    CASE
WHEN ((xtp_1.obligation_state -&gt;&gt; 'ACTUALIZED'::text) = 'true'::text) THEN 1
ELSE 0
                                    END)) THEN 'Fulfilled'::text
                                    ELSE 'Confirmed'::text
                                END AS trade_status,
                            xtp_1.trader AS trader_name
                           FROM ( SELECT xceler_tradeplanningservice_plannedtradeobligation.uuid,
                                    xceler_tradeplanningservice_plannedtradeobligation.created_by,
                                    xceler_tradeplanningservice_plannedtradeobligation.created_timestamp,
                                    xceler_tradeplanningservice_plannedtradeobligation.tenant_id,
                                    xceler_tradeplanningservice_plannedtradeobligation.updated_by,
                                    xceler_tradeplanningservice_plannedtradeobligation.updated_timestamp,
                                    xceler_tradeplanningservice_plannedtradeobligation.broker,
                                    xceler_tradeplanningservice_plannedtradeobligation.circle_string_seq,
                                    xceler_tradeplanningservice_plannedtradeobligation.commodity,
                                    xceler_tradeplanningservice_plannedtradeobligation.company,
                                    xceler_tradeplanningservice_plannedtradeobligation.counterparty,
                                    xceler_tradeplanningservice_plannedtradeobligation.crop_origin,
                                    xceler_tradeplanningservice_plannedtradeobligation.delivery_date,
                                    xceler_tradeplanningservice_plannedtradeobligation.delivery_end_date,
                                    xceler_tradeplanningservice_plannedtradeobligation.delivery_start_date,
                                    xceler_tradeplanningservice_plannedtradeobligation.grade,
                                    xceler_tradeplanningservice_plannedtradeobligation.incoterm,
                                    xceler_tradeplanningservice_plannedtradeobligation.location,
                                    xceler_tradeplanningservice_plannedtradeobligation.obligation_date,
                                    xceler_tradeplanningservice_plannedtradeobligation.plan_id,
                                    xceler_tradeplanningservice_plannedtradeobligation.plan_uuid,
                                    xceler_tradeplanningservice_plannedtradeobligation.planned_obligation_id,
                                    xceler_tradeplanningservice_plannedtradeobligation.planned_quantity,
                                    xceler_tradeplanningservice_plannedtradeobligation.price_type,
                                    xceler_tradeplanningservice_plannedtradeobligation.profitcenter,
                                    xceler_tradeplanningservice_plannedtradeobligation.quantityuom,
                                    xceler_tradeplanningservice_plannedtradeobligation.reference_number,
                                    xceler_tradeplanningservice_plannedtradeobligation.trade_date_time,
                                    xceler_tradeplanningservice_plannedtradeobligation.trade_id,
                                    xceler_tradeplanningservice_plannedtradeobligation.trade_obligation_id,
                                    xceler_tradeplanningservice_plannedtradeobligation.trade_obligation_uuid,
                                    xceler_tradeplanningservice_plannedtradeobligation.trade_price,
                                    xceler_tradeplanningservice_plannedtradeobligation.trade_price_currency,
                                    xceler_tradeplanningservice_plannedtradeobligation.trade_price_uom,
                                    xceler_tradeplanningservice_plannedtradeobligation.trade_quantity,
                                    xceler_tradeplanningservice_plannedtradeobligation.trade_transaction_type,
                                    xceler_tradeplanningservice_plannedtradeobligation.trade_type,
                                    xceler_tradeplanningservice_plannedtradeobligation.trade_uuid,
                                    xceler_tradeplanningservice_plannedtradeobligation.no_of_units,
                                    xceler_tradeplanningservice_plannedtradeobligation.remarks,
                                    xceler_tradeplanningservice_plannedtradeobligation.brand,
                                    xceler_tradeplanningservice_plannedtradeobligation.season,
                                    xceler_tradeplanningservice_plannedtradeobligation.load_location,
                                    xceler_tradeplanningservice_plannedtradeobligation.unload_location,
                                    xceler_tradeplanningservice_plannedtradeobligation.payment_term,
                                    xceler_tradeplanningservice_plannedtradeobligation.trader,
                                    xceler_tradeplanningservice_plannedtradeobligation.fx_rate,
                                    xceler_tradeplanningservice_plannedtradeobligation.provisional_fx_rate,
                                    xceler_tradeplanningservice_plannedtradeobligation.provisional_price_percentage,
                                    xceler_tradeplanningservice_plannedtradeobligation.provisional_price_type,
                                    xceler_tradeplanningservice_plannedtradeobligation.provisional_price,
                                    xceler_tradeplanningservice_plannedtradeobligation.tradesettlementcurrency,
                                    xceler_tradeplanningservice_plannedtradeobligation.trade_settlement_currency,
                                    xceler_tradeplanningservice_plannedtradeobligation.premiun_cost,
                                    xceler_tradeplanningservice_plannedtradeobligation.discount_cost,
                                    xceler_tradeplanningservice_plannedtradeobligation.total_trade_qty,
                                    xceler_tradeplanningservice_plannedtradeobligation.broker_reference_number,
                                    xceler_tradeplanningservice_plannedtradeobligation.provisional_price_uom,
                                    xceler_tradeplanningservice_plannedtradeobligation.provisional_price_currency,
                                    xceler_tradeplanningservice_plannedtradeobligation.planned_obligation_status,
                                    xceler_tradeplanningservice_plannedtradeobligation.parent_planned_obligation,
                                    xceler_tradeplanningservice_plannedtradeobligation.shipment_month,
                                    xceler_tradeplanningservice_plannedtradeobligation.external_record,
                                    xceler_tradeplanningservice_plannedtradeobligation.delivery_term_clause,
                                    xceler_tradeplanningservice_plannedtradeobligation.payment_terms_clause,
                                    xceler_tradeplanningservice_plannedtradeobligation.quantity_terms_clause,
                                    xceler_tradeplanningservice_plannedtradeobligation.quality_terms_clause,
                                    xceler_tradeplanningservice_plannedtradeobligation.pricing_terms_clause,
                                    xceler_tradeplanningservice_plannedtradeobligation.broker_reference,
                                    xceler_tradeplanningservice_plannedtradeobligation.comments,
                                    xceler_tradeplanningservice_plannedtradeobligation.trade_settlement_reference,
                                    xceler_tradeplanningservice_plannedtradeobligation.doc_by_pass_id,
                                    xceler_tradeplanningservice_plannedtradeobligation.package_type,
                                    xceler_tradeplanningservice_plannedtradeobligation.balance_quantity,
                                    xceler_tradeplanningservice_plannedtradeobligation.contract_term,
                                    xceler_tradeplanningservice_plannedtradeobligation.external_package,
                                    xceler_tradeplanningservice_plannedtradeobligation.external_package_unit,
                                    xceler_tradeplanningservice_plannedtradeobligation.internal_package_unit,
                                    xceler_tradeplanningservice_plannedtradeobligation.internal_package,
                                    xceler_tradeplanningservice_plannedtradeobligation.provisional_pricing,
                                    xceler_tradeplanningservice_plannedtradeobligation.weight_basis,
                                    xceler_tradeplanningservice_plannedtradeobligation.tolerance_value,
                                    xceler_tradeplanningservice_plannedtradeobligation.external_reference,
                                    xceler_tradeplanningservice_plannedtradeobligation.price_ticker,
                                    xceler_tradeplanningservice_plannedtradeobligation.special_instructions,
                                    xceler_tradeplanningservice_plannedtradeobligation.match_type,
                                    xceler_tradeplanningservice_plannedtradeobligation.settlement_tolerance_value,
                                    xceler_tradeplanningservice_plannedtradeobligation.obligation_state,
                                    xceler_tradeplanningservice_plannedtradeobligation.quotation_period_clause,
                                    xceler_tradeplanningservice_plannedtradeobligation.commodity_code,
                                    xceler_tradeplanningservice_plannedtradeobligation.location_type,
                                    xceler_tradeplanningservice_plannedtradeobligation.load_location_type,
                                    xceler_tradeplanningservice_plannedtradeobligation.unload_location_type,
                                    xceler_tradeplanningservice_plannedtradeobligation.counterparty_name,
                                    xceler_tradeplanningservice_plannedtradeobligation.company_code,
                                    xceler_tradeplanningservice_plannedtradeobligation.profitcenter_code
                                   FROM taomish.xceler_tradeplanningservice_plannedtradeobligation
                                  WHERE (((xceler_tradeplanningservice_plannedtradeobligation.planned_obligation_status)::text = 'active'::text) AND ((xceler_tradeplanningservice_plannedtradeobligation.trade_type)::text = 'Paper'::text) AND (xceler_tradeplanningservice_plannedtradeobligation.external_record IS FALSE))) xtp_1
                          GROUP BY xtp_1.trade_id, xtp_1.tenant_id, xtp_1.price_type, xtp_1.commodity, xtp_1.company, xtp_1.trade_date_time, xtp_1.trade_type, xtp_1.incoterm, xtp_1.trade_transaction_type, xtp_1.external_reference, xtp_1.counterparty, xtp_1.quantityuom, xtp_1.profitcenter, xtp_1.provisional_price, xtp_1.trade_price_currency, xtp_1.trader) x
                  GROUP BY x.trade_id, x.tenant_id, x.status, x.trade_status, x.company, x.profitcenter, x.trade_date_time, x.external_reference, x.trade_transaction_type, x.trade_type, x.commodity, x.counterparty, x.period_end_date, x.quantity_uom, x.incoterm, x.load_location, x.provisional_price, x.trade_price_currency, x.broker, x.price_type, x.trader_name) xtp
             LEFT JOIN taomish.xceler_pricingservice_advancedtradeprice xptt ON ((((xtp.tenant_id)::text = (xptt.tenant_id)::text) AND ((xtp.trade_id)::text = (xptt.obligation_id)::text))))
             LEFT JOIN ( SELECT sum(xcct.cost_value) AS cost,
                    xcct.tenant_id,
                    xcct.trade_id
                   FROM taomish.xceler_costservice_tradecost xcct
                  WHERE (((xcct.cost_type)::text = 'Per Unit'::text) AND ((xcct.type)::text = 'Secondary'::text))
                  GROUP BY xcct.tenant_id, xcct.trade_id) xct ON ((((xct.tenant_id)::text = (xtp.tenant_id)::text) AND ((xct.trade_id)::text = (xtp.trade_id)::text))))
        UNION ALL
         SELECT taomish.uuid_generate_v4() AS uuid,
            xpet.tenant_id,
            xpet.trade_id,
            xpet.company,
            xpet.profitcenter,
            xpet.trade_date_time,
            xpet.broker_reference AS external_reference,
            xpet.trade_transaction_type,
            xpet.trade_type,
            xpet.commodity,
            xpet.quantity,
            xpet.counterparty,
            xpet.period_end_date,
            xpet.quantity_uom,
            xpet.incoterm,
            xpet.load_location,
            xpet.trade_price,
            xpet.trade_price_currency,
            xpet.broker,
            xpet.price_type,
            xptt.priced_quantity,
            xptt.price_status,
            xpet.trade_approval_status AS trade_status,
            xds.fob,
            NULL::text AS netting_status,
            0 AS match_lot,
            0 AS lot,
            0 AS lot_size,
            NULL::text AS exchange
           FROM ((taomish.xceler_physicaltradeservice_physicaltrade xpet
             LEFT JOIN taomish.xceler_pricingservice_advancedtradeprice xptt ON ((((xpet.tenant_id)::text = (xptt.tenant_id)::text) AND ((xpet.trade_id)::text = (xptt.obligation_id)::text))))
             LEFT JOIN taomish.xceler_physicaltradeservice_dealslip xds ON ((((xds.tenant_id)::text = (xpet.tenant_id)::text) AND ((xds.trade_id)::text = (xpet.trade_id)::text))))
          WHERE (((xpet.trade_type)::text = 'InterProfitCenter Paper'::text) AND ((xpet.trade_approval_status)::text &lt;&gt; 'void'::text))
) UNION
 SELECT taomish.uuid_generate_v4() AS uuid,
    xff.tenant_id,
    xff.trade_id,
    xff.company,
    xff.profitcenter,
    xff.trade_date AS trade_date_time,
    NULL::text AS external_reference,
    xff.trade_transaction_type,
    'MARKET HEDGE'::character varying AS trade_type,
    xff.commodity,
        CASE
            WHEN ((xff.commodity)::text = 'Refined Soybean Oil'::text) THEN ((xff.lot * xff.lot_size) * (0.00045359237)::double precision)
            ELSE (xff.lot * xff.lot_size)
        END AS quantity,
        CASE
            WHEN ((xff.future_index)::text = 'BMD'::text) THEN 'MDEX'::character varying
            ELSE xff.future_index
        END AS counterparty,
    xff.expiry_date AS period_end_date,
    xff.uom AS quantity_uom,
    'FOB'::text AS incoterm,
    '--'::text AS load_location,
        CASE
            WHEN ((xff.commodity)::text = 'Refined Soybean Oil'::text) THEN (xff.trade_price * (22.04634139)::double precision)
            ELSE xff.trade_price
        END AS trade_price,
    NULL::character varying AS trade_price_currency,
    xff.clearing_broker AS broker,
    NULL::character varying AS price_type,
    NULL::double precision AS priced_quantity,
    NULL::text AS price_status,
    'Confirmed'::text AS trade_status,
    xff.trade_price AS fob,
    xff.netting_status,
    xff.match_lot,
    xff.lot,
    xff.lot_size,
    xff.exchange
   FROM taomish.xceler_futuretradeservice_futuretrade xff
  WHERE ((xff.netting_status)::text &lt;&gt; 'Void'::text);</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-160">
        <createView fullDefinition="false" viewName="vw_xceler_future_trade_differential_pricing_view">SELECT xff.uuid,
    xff.created_by,
    xff.created_timestamp,
    xff.tenant_id,
    xff.updated_by,
    xff.updated_timestamp,
    xff.lot,
    xff.trade_price,
    xff.trade_id,
    xff.trade_date,
    xff.expiry_date,
    xff.profitcenter,
    xff.clearing_broker,
    xff.execution_broker,
    xff.netting_status,
    xff.future_index,
    xff.expiry_month,
    xff.commodity,
    xff.currency,
    xff.uom,
    xff.company,
    xff.trade_transaction_type,
    (xff.lot - COALESCE(sum(xfp.priced_lots), (0)::double precision)) AS available_lots
   FROM (taomish.xceler_futuretradeservice_futuretrade xff
     LEFT JOIN taomish.xceler_future_pricing_link xfp ON ((((xff.trade_id)::text = (xfp.future_trade_id)::text) AND ((xff.tenant_id)::text = (xfp.tenant_id)::text))))
  WHERE ((xff.netting_status)::text = 'Not Netted'::text)
  GROUP BY xff.uuid, xff.created_by, xff.created_timestamp, xff.tenant_id, xff.updated_by, xff.updated_timestamp, xff.lot, xff.trade_price, xff.trade_id, xff.trade_date, xff.expiry_date, xff.profitcenter, xff.clearing_broker, xff.execution_broker, xff.netting_status, xff.future_index, xff.expiry_month, xff.commodity, xff.currency, xff.uom, xff.company, xff.trade_transaction_type;</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-161">
        <createView fullDefinition="false" viewName="vw_trade_filter_view">SELECT xpp.tenant_id,
    xpp.trade_type,
    (json_build_object('tradeId', jsonb_agg(xpp.trade_id ORDER BY xpp.created_timestamp DESC), 'tradeTransactionType', jsonb_agg(DISTINCT
        CASE
            WHEN (xpp.trade_transaction_type = 0) THEN 'BUY'::text
            ELSE
            CASE
                WHEN (xpp.trade_transaction_type = 1) THEN 'SELL'::text
                ELSE 'POS'::text
            END
        END), 'manualTradeId', jsonb_agg(DISTINCT xpp.manual_trade_id), 'tradeDateTime', jsonb_agg(DISTINCT xpp.trade_date_time), 'company', jsonb_agg(DISTINCT xpp.company), 'counterparty', jsonb_agg(DISTINCT xpp.counterparty), 'profitcenter', jsonb_agg(DISTINCT xpp.profitcenter), 'traderName', jsonb_agg(DISTINCT xpp.trader_name), 'createdBy', jsonb_agg(DISTINCT xpp.created_by), 'commodity', jsonb_agg(DISTINCT xpp.commodity)))::text AS criteria_map
   FROM taomish.xceler_physicaltradeservice_physicaltrade xpp
  GROUP BY xpp.tenant_id, xpp.trade_type;</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-162">
        <createView fullDefinition="false" viewName="vw_xceler_report_mpob_trade_report">SELECT xpp.uuid,
    xpp.tenant_id,
    xpp.trade_id,
    xpp.trade_transaction_type,
    xpp.trade_date_time,
    xpp.updated_timestamp,
    xpp.trade_type,
    xpp.external_record,
    xpp.counterparty AS counterparty_code,
    xpp.company,
    xpp.commodity,
    xpp.trade_price,
    xpp.provisional_price,
    xpp.trade_quantity,
    xpp.total_trade_qty,
    xtp.period_start_date,
    xtp.period_end_date,
    xpp.trade_price_currency,
    xpp.package_type,
    xpp.internal_package,
    xpp.incoterm,
    xcc.name AS counterparty_name
   FROM ((taomish.xceler_tradeplanningservice_plannedtradeobligation xpp
     JOIN taomish.xceler_physicaltradeservice_physicaltrade xtp ON ((((xpp.trade_id)::text = (xtp.trade_id)::text) AND ((xpp.tenant_id)::text = (xtp.tenant_id)::text))))
     JOIN taomish.xceler_configservice_counterparty xcc ON ((((xpp.counterparty)::text = (xcc.code)::text) AND ((xpp.tenant_id)::text = (xcc.tenant_id)::text))))
  WHERE (((xpp.trade_type)::text = ANY (ARRAY[('Physical'::character varying)::text, ('Paper'::character varying)::text])) AND (xpp.external_record = false));</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-163">
        <createView fullDefinition="false" viewName="xceler_dashboardservice_deliverystartedtrades">SELECT taomish.uuid_generate_v4() AS uuid,
    xtob.trade_obligation_id AS tradeid,
    xtob.tenant_id AS tenantid,
    xtob.trade_quantity AS quantity,
    to_char(xtob.delivery_end_date, 'FMMonthYYYY'::text) AS shipmentmonth,
        CASE
            WHEN (xtob.trade_transaction_type = 1) THEN 'sell'::text
            ELSE 'buy'::text
        END AS trantype,
    xtob.trade_obligation_state AS state,
    xpt.trader_name AS trader,
    xpt.commodity,
    xpt.profitcenter,
    xpt.counterparty_code AS counterparty,
    xpt.company
   FROM (taomish.xceler_physicaltradeservice_physicaltrade xpt
     JOIN taomish.xceler_physicaltradeservice_tradeobligation xtob ON ((((xtob.trade_id)::text = (xpt.trade_id)::text) AND ((xtob.tenant_id)::text = (xpt.tenant_id)::text))));</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-164">
        <createView fullDefinition="false" viewName="xceler_dashboardservice_opentrades">SELECT taomish.uuid_generate_v4() AS uuid,
    xtob.trade_obligation_id AS tradeid,
    xtob.tenant_id AS tenantid,
    xtob.trade_quantity AS quantity,
    to_char(xtob.delivery_end_date, 'FMMonthYYYY'::text) AS shipmentmonth,
        CASE
            WHEN (xtob.trade_transaction_type = 1) THEN 'sell'::text
            ELSE 'buy'::text
        END AS trantype,
    xpt.trader_name AS trader,
    xpt.commodity,
    xpt.profitcenter,
    xpt.counterparty_code AS counterparty,
    xpt.company
   FROM (taomish.xceler_physicaltradeservice_physicaltrade xpt
     JOIN taomish.xceler_physicaltradeservice_tradeobligation xtob ON ((((xtob.trade_quantity - xtob.planned_quantity) &lt;&gt; (0)::double precision) AND ((xtob.trade_id)::text = (xpt.trade_id)::text) AND ((xtob.tenant_id)::text = (xpt.tenant_id)::text))));</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-165">
        <createView fullDefinition="false" viewName="xceler_dashboardservice_plannedunplannedqty">SELECT taomish.uuid_generate_v4() AS uuid,
    xtob.trade_obligation_id AS tradeid,
    xtob.tenant_id AS tenantid,
    xtob.trade_quantity AS quantity,
    xtob.trade_obligation_state AS state,
    to_char(xtob.delivery_end_date, 'FMMonthYYYY'::text) AS shipmentmonth,
        CASE
            WHEN (xtob.trade_transaction_type = 1) THEN 'sell'::text
            ELSE 'buy'::text
        END AS trantype,
    xpt.trader_name AS trader,
    xpt.commodity,
    xpt.profitcenter,
    xpt.counterparty_code AS counterparty,
    xpt.company
   FROM (taomish.xceler_physicaltradeservice_physicaltrade xpt
     JOIN taomish.xceler_physicaltradeservice_tradeobligation xtob ON (((xtob.trade_obligation_state = 2) AND ((xtob.trade_id)::text = (xpt.trade_id)::text) AND ((xtob.tenant_id)::text = (xpt.tenant_id)::text))));</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-166">
        <createView fullDefinition="false" viewName="xceler_dashboardservice_revenuesplit">SELECT taomish.uuid_generate_v4() AS uuid,
    xtob.trade_obligation_id AS tradeid,
    xtob.tenant_id AS tenantid,
    xtob.trade_quantity AS quantity,
    to_char(xtob.delivery_end_date, 'FMMonthYYYY'::text) AS shipmentmonth,
        CASE
            WHEN (xtob.trade_transaction_type = 1) THEN 'sell'::text
            ELSE 'buy'::text
        END AS trantype,
    (xtob.planned_quantity * xtob.trade_price) AS revenue,
    xpt.trader_name AS trader,
    xpt.commodity,
    xpt.profitcenter,
    xpt.counterparty_code AS counterparty,
    xpt.company
   FROM (taomish.xceler_physicaltradeservice_physicaltrade xpt
     JOIN taomish.xceler_physicaltradeservice_tradeobligation xtob ON (((xtob.trade_transaction_type = 1) AND ((xtob.trade_id)::text = (xpt.trade_id)::text) AND ((xtob.tenant_id)::text = (xpt.tenant_id)::text))));</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-167">
        <createView fullDefinition="false" viewName="xceler_pricingservice_pricingreport">SELECT taomish.uuid_generate_v4() AS uuid,
    xpt.trade_id AS tradeid,
    xpt.tenant_id AS tenantid,
    xpt.planned_obligation_id AS obligationid,
    xpt.counterparty,
    xpt.profitcenter,
    xpt.price_type AS pricetype,
    xpt.commodity,
    xpc.price,
        CASE
            WHEN (xcop.trade_transaction_type = 1) THEN 'sell'::text
            ELSE 'buy'::text
        END AS tradetype,
    to_char(xpt.delivery_end_date, 'FMMonth YY'::text) AS shipmentmonth,
    xpt.trade_date_time AS tradedate,
    xcop.total_trade_qty AS tradequantity,
    xcop.quantity_uom AS quantityuom,
    xpc.quantity AS allocatedquantity,
    xpc.price_currency AS pricecurrency,
    xpc.quantity_uom AS quantityuomallocated
   FROM ((taomish.xceler_tradeplanningservice_plannedtradeobligation xpt
     LEFT JOIN taomish.xceler_physicaltradeservice_physicaltrade xcop ON (((xpt.trade_id)::text = (xcop.trade_id)::text)))
     LEFT JOIN taomish.xceler_pricingservice_priceallocation xpc ON (((xpt.planned_obligation_id)::text = (xpc.obligation_id)::text)));</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-168">
        <createView fullDefinition="false" viewName="xceler_report_physical_idt">SELECT taomish.uuid_generate_v4() AS uuid,
    xtp.tenant_id,
    xtp.trade_id,
    xtp.company,
    xtp.profitcenter,
    xtp.trade_date_time,
    xtp.external_reference,
    xtp.trade_transaction_type,
    xtp.trade_type,
    xtp.commodity,
    xtp.quantity,
    xtp.counterparty,
    xtp.period_end_date,
    xtp.quantity_uom,
    xtp.incoterm,
    xtp.load_location,
    xtp.trade_price,
    xtp.provisional_price,
    xtp.trade_price_currency,
    xtp.broker,
    xtp.price_type,
    round((xptt.priced_quantity)::numeric, 3) AS priced_quantity,
    xtp.status AS price_status,
    xtp.trade_status,
    xct.cost,
    xtp.trade_price AS average_price,
    xtp.trader_name
   FROM ((( SELECT x.tenant_id,
            x.trade_id,
            x.company,
            x.profitcenter,
            x.trade_date_time,
            x.external_reference,
            x.trade_transaction_type,
            x.trade_type,
            x.commodity,
            sum(x.quantity) AS quantity,
            x.counterparty,
            x.period_end_date,
            x.quantity_uom,
            x.incoterm,
            x.load_location,
            avg(x.trade_price) AS trade_price,
            x.provisional_price,
            x.trade_price_currency,
            x.broker,
            x.price_type,
            x.status,
            x.trade_status,
            x.trader_name
           FROM ( SELECT xtp_1.tenant_id,
                    xtp_1.trade_id,
                    xtp_1.company,
                    xtp_1.profitcenter,
                    xtp_1.trade_date_time,
                    min(xtp_1.broker_reference) AS external_reference,
                    xtp_1.trade_transaction_type,
                    xtp_1.trade_type,
                    min((xtp_1.commodity)::text) AS commodity,
                    sum(xtp_1.planned_quantity) AS quantity,
                    min((xtp_1.counterparty)::text) AS counterparty,
                    min(xtp_1.delivery_start_date) AS period_end_date,
                    xtp_1.quantityuom AS quantity_uom,
                    min((xtp_1.incoterm)::text) AS incoterm,
                        CASE
                            WHEN (min((xtp_1.unload_location)::text) IS NULL) THEN min((xtp_1.load_location)::text)
                            WHEN (min((xtp_1.unload_location)::text) = ''::text) THEN min((xtp_1.load_location)::text)
                            WHEN (min((xtp_1.unload_location)::text) = 'N/A'::text) THEN min((xtp_1.load_location)::text)
                            ELSE min((xtp_1.unload_location)::text)
                        END AS load_location,
                        CASE
                            WHEN (sum(xtp_1.planned_quantity) = (0)::double precision) THEN (0)::double precision
                            ELSE (sum((xtp_1.planned_quantity * xtp_1.trade_price)) / sum(xtp_1.planned_quantity))
                        END AS trade_price,
                    xtp_1.provisional_price,
                    xtp_1.trade_price_currency,
                    min((xtp_1.broker)::text) AS broker,
                    xtp_1.price_type,
                        CASE
                            WHEN ((xtp_1.price_type)::text = 'Fixed'::text) THEN 'PRICED'::text
                            WHEN (count(*) = sum(
                            CASE
                                WHEN ((xtp_1.obligation_state -&gt;&gt; 'PRICED'::text) = 'true'::text) THEN 1
                                ELSE 0
                            END)) THEN 'PRICED'::text
                            WHEN ((sum(
                            CASE
                                WHEN ((xtp_1.obligation_state -&gt;&gt; 'PRICED'::text) = 'true'::text) THEN 1
                                ELSE 0
                            END) = 0) AND (sum(
                            CASE
                                WHEN ((xtp_1.obligation_state -&gt;&gt; 'PARTIALLY_PRICED'::text) = 'true'::text) THEN 1
                                ELSE 0
                            END) = 0)) THEN 'UNPRICED'::text
                            ELSE 'PARTIALLY PRICED'::text
                        END AS status,
                        CASE
                            WHEN (count(*) = sum(
                            CASE
                                WHEN ((xtp_1.obligation_state -&gt;&gt; 'ACTUALIZED'::text) = 'true'::text) THEN 1
                                ELSE 0
                            END)) THEN 'Fulfilled'::text
                            ELSE 'Confirmed'::text
                        END AS trade_status,
                    xtp_1.trader AS trader_name
                   FROM ( SELECT xceler_tradeplanningservice_plannedtradeobligation.uuid,
                            xceler_tradeplanningservice_plannedtradeobligation.created_by,
                            xceler_tradeplanningservice_plannedtradeobligation.created_timestamp,
                            xceler_tradeplanningservice_plannedtradeobligation.tenant_id,
                            xceler_tradeplanningservice_plannedtradeobligation.updated_by,
                            xceler_tradeplanningservice_plannedtradeobligation.updated_timestamp,
                            xceler_tradeplanningservice_plannedtradeobligation.broker,
                            xceler_tradeplanningservice_plannedtradeobligation.circle_string_seq,
                            xceler_tradeplanningservice_plannedtradeobligation.commodity,
                            xceler_tradeplanningservice_plannedtradeobligation.company,
                            xceler_tradeplanningservice_plannedtradeobligation.counterparty,
                            xceler_tradeplanningservice_plannedtradeobligation.crop_origin,
                            xceler_tradeplanningservice_plannedtradeobligation.delivery_date,
                            xceler_tradeplanningservice_plannedtradeobligation.delivery_end_date,
                            xceler_tradeplanningservice_plannedtradeobligation.delivery_start_date,
                            xceler_tradeplanningservice_plannedtradeobligation.grade,
                            xceler_tradeplanningservice_plannedtradeobligation.incoterm,
                            xceler_tradeplanningservice_plannedtradeobligation.location,
                            xceler_tradeplanningservice_plannedtradeobligation.obligation_date,
                            xceler_tradeplanningservice_plannedtradeobligation.plan_id,
                            xceler_tradeplanningservice_plannedtradeobligation.plan_uuid,
                            xceler_tradeplanningservice_plannedtradeobligation.planned_obligation_id,
                            xceler_tradeplanningservice_plannedtradeobligation.planned_quantity,
                            xceler_tradeplanningservice_plannedtradeobligation.price_type,
                            xceler_tradeplanningservice_plannedtradeobligation.profitcenter,
                            xceler_tradeplanningservice_plannedtradeobligation.quantityuom,
                            xceler_tradeplanningservice_plannedtradeobligation.reference_number,
                            xceler_tradeplanningservice_plannedtradeobligation.trade_date_time,
                            xceler_tradeplanningservice_plannedtradeobligation.trade_id,
                            xceler_tradeplanningservice_plannedtradeobligation.trade_obligation_id,
                            xceler_tradeplanningservice_plannedtradeobligation.trade_obligation_uuid,
                            xceler_tradeplanningservice_plannedtradeobligation.trade_price,
                            xceler_tradeplanningservice_plannedtradeobligation.trade_price_currency,
                            xceler_tradeplanningservice_plannedtradeobligation.trade_price_uom,
                            xceler_tradeplanningservice_plannedtradeobligation.trade_quantity,
                            xceler_tradeplanningservice_plannedtradeobligation.trade_transaction_type,
                            xceler_tradeplanningservice_plannedtradeobligation.trade_type,
                            xceler_tradeplanningservice_plannedtradeobligation.trade_uuid,
                            xceler_tradeplanningservice_plannedtradeobligation.no_of_units,
                            xceler_tradeplanningservice_plannedtradeobligation.remarks,
                            xceler_tradeplanningservice_plannedtradeobligation.brand,
                            xceler_tradeplanningservice_plannedtradeobligation.season,
                            xceler_tradeplanningservice_plannedtradeobligation.load_location,
                            xceler_tradeplanningservice_plannedtradeobligation.unload_location,
                            xceler_tradeplanningservice_plannedtradeobligation.payment_term,
                            xceler_tradeplanningservice_plannedtradeobligation.trader,
                            xceler_tradeplanningservice_plannedtradeobligation.fx_rate,
                            xceler_tradeplanningservice_plannedtradeobligation.provisional_fx_rate,
                            xceler_tradeplanningservice_plannedtradeobligation.provisional_price_percentage,
                            xceler_tradeplanningservice_plannedtradeobligation.provisional_price_type,
                            xceler_tradeplanningservice_plannedtradeobligation.provisional_price,
                            xceler_tradeplanningservice_plannedtradeobligation.tradesettlementcurrency,
                            xceler_tradeplanningservice_plannedtradeobligation.trade_settlement_currency,
                            xceler_tradeplanningservice_plannedtradeobligation.premiun_cost,
                            xceler_tradeplanningservice_plannedtradeobligation.discount_cost,
                            xceler_tradeplanningservice_plannedtradeobligation.total_trade_qty,
                            xceler_tradeplanningservice_plannedtradeobligation.broker_reference_number,
                            xceler_tradeplanningservice_plannedtradeobligation.provisional_price_uom,
                            xceler_tradeplanningservice_plannedtradeobligation.provisional_price_currency,
                            xceler_tradeplanningservice_plannedtradeobligation.planned_obligation_status,
                            xceler_tradeplanningservice_plannedtradeobligation.parent_planned_obligation,
                            xceler_tradeplanningservice_plannedtradeobligation.shipment_month,
                            xceler_tradeplanningservice_plannedtradeobligation.external_record,
                            xceler_tradeplanningservice_plannedtradeobligation.delivery_term_clause,
                            xceler_tradeplanningservice_plannedtradeobligation.payment_terms_clause,
                            xceler_tradeplanningservice_plannedtradeobligation.quantity_terms_clause,
                            xceler_tradeplanningservice_plannedtradeobligation.quality_terms_clause,
                            xceler_tradeplanningservice_plannedtradeobligation.pricing_terms_clause,
                            xceler_tradeplanningservice_plannedtradeobligation.broker_reference,
                            xceler_tradeplanningservice_plannedtradeobligation.comments,
                            xceler_tradeplanningservice_plannedtradeobligation.trade_settlement_reference,
                            xceler_tradeplanningservice_plannedtradeobligation.doc_by_pass_id,
                            xceler_tradeplanningservice_plannedtradeobligation.package_type,
                            xceler_tradeplanningservice_plannedtradeobligation.balance_quantity,
                            xceler_tradeplanningservice_plannedtradeobligation.contract_term,
                            xceler_tradeplanningservice_plannedtradeobligation.external_package,
                            xceler_tradeplanningservice_plannedtradeobligation.external_package_unit,
                            xceler_tradeplanningservice_plannedtradeobligation.internal_package_unit,
                            xceler_tradeplanningservice_plannedtradeobligation.internal_package,
                            xceler_tradeplanningservice_plannedtradeobligation.provisional_pricing,
                            xceler_tradeplanningservice_plannedtradeobligation.weight_basis,
                            xceler_tradeplanningservice_plannedtradeobligation.tolerance_value,
                            xceler_tradeplanningservice_plannedtradeobligation.external_reference,
                            xceler_tradeplanningservice_plannedtradeobligation.price_ticker,
                            xceler_tradeplanningservice_plannedtradeobligation.special_instructions,
                            xceler_tradeplanningservice_plannedtradeobligation.match_type,
                            xceler_tradeplanningservice_plannedtradeobligation.settlement_tolerance_value,
                            xceler_tradeplanningservice_plannedtradeobligation.obligation_state,
                            xceler_tradeplanningservice_plannedtradeobligation.quotation_period_clause,
                            xceler_tradeplanningservice_plannedtradeobligation.commodity_code,
                            xceler_tradeplanningservice_plannedtradeobligation.location_type,
                            xceler_tradeplanningservice_plannedtradeobligation.load_location_type,
                            xceler_tradeplanningservice_plannedtradeobligation.unload_location_type,
                            xceler_tradeplanningservice_plannedtradeobligation.counterparty_name,
                            xceler_tradeplanningservice_plannedtradeobligation.company_code,
                            xceler_tradeplanningservice_plannedtradeobligation.profitcenter_code
                           FROM taomish.xceler_tradeplanningservice_plannedtradeobligation
                          WHERE (((xceler_tradeplanningservice_plannedtradeobligation.planned_obligation_status)::text = 'active'::text) AND ((xceler_tradeplanningservice_plannedtradeobligation.trade_type)::text = 'Physical'::text) AND (xceler_tradeplanningservice_plannedtradeobligation.external_record IS FALSE))) xtp_1
                  GROUP BY xtp_1.trade_id, xtp_1.tenant_id, xtp_1.price_type, xtp_1.commodity, xtp_1.company, xtp_1.trade_date_time, xtp_1.trade_type, xtp_1.incoterm, xtp_1.trade_transaction_type, xtp_1.external_reference, xtp_1.counterparty, xtp_1.quantityuom, xtp_1.profitcenter, xtp_1.provisional_price, xtp_1.trade_price_currency, xtp_1.trader) x
          GROUP BY x.trade_id, x.tenant_id, x.status, x.trade_status, x.company, x.profitcenter, x.trade_date_time, x.external_reference, x.trade_transaction_type, x.trade_type, x.commodity, x.counterparty, x.period_end_date, x.quantity_uom, x.incoterm, x.load_location, x.provisional_price, x.trade_price_currency, x.broker, x.price_type, x.trader_name) xtp
     LEFT JOIN taomish.xceler_pricingservice_advancedtradeprice xptt ON ((((xtp.tenant_id)::text = (xptt.tenant_id)::text) AND ((xtp.trade_id)::text = (xptt.obligation_id)::text))))
     LEFT JOIN ( SELECT sum(xcct.cost_value) AS cost,
            xcct.tenant_id,
            xcct.trade_id
           FROM taomish.xceler_costservice_tradecost xcct
          WHERE (((xcct.cost_type)::text = 'Per Unit'::text) AND ((xcct.type)::text = 'Secondary'::text))
          GROUP BY xcct.tenant_id, xcct.trade_id) xct ON ((((xct.tenant_id)::text = (xtp.tenant_id)::text) AND ((xct.trade_id)::text = (xtp.trade_id)::text))))
UNION
 SELECT taomish.uuid_generate_v4() AS uuid,
    xpet.tenant_id,
    xpet.trade_id,
    xpet.company,
    xpet.profitcenter,
    xpet.trade_date_time,
    xpet.broker_reference AS external_reference,
    xpet.trade_transaction_type,
    xpet.trade_type,
    xpet.commodity,
    xpet.quantity,
    xpet.counterparty_code AS counterparty,
    xpet.period_start_date AS period_end_date,
    xpet.quantity_uom,
    xpet.incoterm,
    xpet.load_location,
    xpet.trade_price,
    xpet.provisional_price,
    xpet.trade_price_currency,
    xpet.broker,
    xpet.price_type,
    xptt.priced_quantity,
    xptt.price_status,
    xpet.trade_approval_status AS trade_status,
    xct.cost,
    xptt.average_price,
    xpet.trader_name
   FROM (((taomish.xceler_physicaltradeservice_physicaltrade xpet
     LEFT JOIN taomish.xceler_pricingservice_advancedtradeprice xptt ON ((((xpet.tenant_id)::text = (xptt.tenant_id)::text) AND ((xpet.trade_id)::text = (xptt.obligation_id)::text))))
     LEFT JOIN taomish.xceler_physicaltradeservice_dealslip xds ON ((((xds.tenant_id)::text = (xpet.tenant_id)::text) AND ((xds.trade_id)::text = (xpet.trade_id)::text))))
     LEFT JOIN ( SELECT sum(xcct.cost_value) AS cost,
            xcct.tenant_id,
            xcct.trade_id
           FROM taomish.xceler_costservice_tradecost xcct
          WHERE (((xcct.cost_type)::text = 'Per Unit'::text) AND ((xcct.type)::text = 'Secondary'::text))
          GROUP BY xcct.tenant_id, xcct.trade_id) xct ON ((((xct.tenant_id)::text = (xpet.tenant_id)::text) AND ((xct.trade_id)::text = (xpet.trade_id)::text))))
  WHERE (((xpet.trade_type)::text = 'InterProfitCenter Physical'::text) AND ((xpet.trade_approval_status)::text &lt;&gt; 'void'::text));</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-169">
        <createView fullDefinition="false" viewName="xceler_report_purchasesalescontract">SELECT xpt.tenant_id,
    xpt.trade_id,
    xpt.uuid,
    xpt.trade_type,
    xpt.trade_date_time,
    xpt.price_type,
    xpt.trade_transaction_type,
    xpt.commodity,
    xpt.incoterm,
    xpt.quantity,
    xpt.load_location,
    xpt.discharge_location,
    xpt.period_end_date,
    xpt.is_provisional_pricing,
    xpt.quantity_uom,
    xpt.broker,
    xpt.origin,
    xpt.trade_price,
    xpt.trade_price_currency,
    xpt.counterparty,
    xpt.counterparty_code,
    xds.port,
    xds.company,
    xds.fob,
    xds.frieght,
    xds.insurance,
    xds.commission,
    xds.premium_disc,
    xds.rollover,
    xds.others,
    xpt.provisional_price,
    xtp.average_price,
    xtp.priced_quantity,
    xpt.trade_approval_status AS trade_status
   FROM ((taomish.xceler_physicaltradeservice_physicaltrade xpt
     LEFT JOIN taomish.xceler_physicaltradeservice_dealslip xds ON ((((xds.tenant_id)::text = (xpt.tenant_id)::text) AND ((xds.trade_id)::text = (xpt.trade_id)::text))))
     LEFT JOIN taomish.xceler_pricingservice_advancedtradeprice xtp ON ((((xtp.tenant_id)::text = (xpt.tenant_id)::text) AND ((xtp.obligation_id)::text = (xpt.trade_id)::text))));</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-170">
        <createView fullDefinition="false" viewName="vw_xceler_tradeplanningservice_contractlistingreport">SELECT taomish.uuid_generate_v4() AS uuid,
    xtp.tenant_id,
    xtp.trade_id,
    xtp.company,
    xtp.trade_date_time,
    xtp.profitcenter,
    xtp.trade_status,
    xtp.grade,
    xtp.commodity,
    xtp.period_end_date AS delivery_end_date,
    xtp.incoterm,
    xtp.load_location,
    xtp.unload_location,
    xtp.quantity,
    xtp.quantity_uom,
    xtp.trade_price,
    xtp.trade_price_currency,
    xtp.broker,
    xtp.broker_reference,
    xtp.trade_type,
    xtp.payment_term,
    xtp.counterparty,
    xtt1.parent AS country_of_receipt,
    xtt2.parent AS country_of_deliver
   FROM ((( SELECT xtp_1.tenant_id,
            xtp_1.trade_id,
            xtp_1.company,
            xtp_1.profitcenter,
            xtp_1.trade_date_time,
            min(xtp_1.broker_reference) AS broker_reference,
            xtp_1.trade_transaction_type,
            xtp_1.trade_type,
            min((xtp_1.commodity)::text) AS commodity,
            sum(xtp_1.planned_quantity) AS quantity,
            min((xtp_1.counterparty)::text) AS counterparty,
            min(xtp_1.delivery_start_date) AS period_end_date,
            xtp_1.quantityuom AS quantity_uom,
            min((xtp_1.incoterm)::text) AS incoterm,
            xtp_1.load_location,
            xtp_1.unload_location,
                CASE
                    WHEN (sum(xtp_1.planned_quantity) = (0)::double precision) THEN (0)::double precision
                    ELSE (sum((xtp_1.planned_quantity * xtp_1.trade_price)) / sum(xtp_1.planned_quantity))
                END AS trade_price,
            xtp_1.trade_price_currency,
            min((xtp_1.broker)::text) AS broker,
            xtp_1.price_type,
                CASE
                    WHEN ((xtp_1.price_type)::text = 'Fixed'::text) THEN 'PRICED'::text
                    WHEN (count(*) = sum(
                    CASE
                        WHEN ((xtp_1.obligation_state -&gt;&gt; 'PRICED'::text) = 'true'::text) THEN 1
                        ELSE 0
                    END)) THEN 'PRICED'::text
                    WHEN ((sum(
                    CASE
                        WHEN ((xtp_1.obligation_state -&gt;&gt; 'PRICED'::text) = 'true'::text) THEN 1
                        ELSE 0
                    END) = 0) AND (sum(
                    CASE
                        WHEN ((xtp_1.obligation_state -&gt;&gt; 'PARTIALLY_PRICED'::text) = 'true'::text) THEN 1
                        ELSE 0
                    END) = 0)) THEN 'UNPRICED'::text
                    ELSE 'PARTIALLY PRICED'::text
                END AS status,
                CASE
                    WHEN (count(*) = sum(
                    CASE
                        WHEN ((xtp_1.obligation_state -&gt;&gt; 'ACTUALIZED'::text) = 'true'::text) THEN 1
                        ELSE 0
                    END)) THEN 'Fulfilled'::text
                    ELSE 'Confirmed'::text
                END AS trade_status,
            xtp_1.trader AS trader_name,
            xtp_1.grade,
            xtp_1.payment_term
           FROM ( SELECT xceler_tradeplanningservice_plannedtradeobligation.uuid,
                    xceler_tradeplanningservice_plannedtradeobligation.created_by,
                    xceler_tradeplanningservice_plannedtradeobligation.created_timestamp,
                    xceler_tradeplanningservice_plannedtradeobligation.tenant_id,
                    xceler_tradeplanningservice_plannedtradeobligation.updated_by,
                    xceler_tradeplanningservice_plannedtradeobligation.updated_timestamp,
                    xceler_tradeplanningservice_plannedtradeobligation.broker,
                    xceler_tradeplanningservice_plannedtradeobligation.circle_string_seq,
                    xceler_tradeplanningservice_plannedtradeobligation.commodity,
                    xceler_tradeplanningservice_plannedtradeobligation.company,
                    xceler_tradeplanningservice_plannedtradeobligation.counterparty,
                    xceler_tradeplanningservice_plannedtradeobligation.crop_origin,
                    xceler_tradeplanningservice_plannedtradeobligation.delivery_date,
                    xceler_tradeplanningservice_plannedtradeobligation.delivery_end_date,
                    xceler_tradeplanningservice_plannedtradeobligation.delivery_start_date,
                    xceler_tradeplanningservice_plannedtradeobligation.grade,
                    xceler_tradeplanningservice_plannedtradeobligation.incoterm,
                    xceler_tradeplanningservice_plannedtradeobligation.location,
                    xceler_tradeplanningservice_plannedtradeobligation.obligation_date,
                    xceler_tradeplanningservice_plannedtradeobligation.plan_id,
                    xceler_tradeplanningservice_plannedtradeobligation.plan_uuid,
                    xceler_tradeplanningservice_plannedtradeobligation.planned_obligation_id,
                    xceler_tradeplanningservice_plannedtradeobligation.planned_quantity,
                    xceler_tradeplanningservice_plannedtradeobligation.price_type,
                    xceler_tradeplanningservice_plannedtradeobligation.profitcenter,
                    xceler_tradeplanningservice_plannedtradeobligation.quantityuom,
                    xceler_tradeplanningservice_plannedtradeobligation.reference_number,
                    xceler_tradeplanningservice_plannedtradeobligation.trade_date_time,
                    xceler_tradeplanningservice_plannedtradeobligation.trade_id,
                    xceler_tradeplanningservice_plannedtradeobligation.trade_obligation_id,
                    xceler_tradeplanningservice_plannedtradeobligation.trade_obligation_uuid,
                    xceler_tradeplanningservice_plannedtradeobligation.trade_price,
                    xceler_tradeplanningservice_plannedtradeobligation.trade_price_currency,
                    xceler_tradeplanningservice_plannedtradeobligation.trade_price_uom,
                    xceler_tradeplanningservice_plannedtradeobligation.trade_quantity,
                    xceler_tradeplanningservice_plannedtradeobligation.trade_transaction_type,
                    xceler_tradeplanningservice_plannedtradeobligation.trade_type,
                    xceler_tradeplanningservice_plannedtradeobligation.trade_uuid,
                    xceler_tradeplanningservice_plannedtradeobligation.no_of_units,
                    xceler_tradeplanningservice_plannedtradeobligation.remarks,
                    xceler_tradeplanningservice_plannedtradeobligation.brand,
                    xceler_tradeplanningservice_plannedtradeobligation.season,
                    xceler_tradeplanningservice_plannedtradeobligation.load_location,
                    xceler_tradeplanningservice_plannedtradeobligation.unload_location,
                    xceler_tradeplanningservice_plannedtradeobligation.payment_term,
                    xceler_tradeplanningservice_plannedtradeobligation.trader,
                    xceler_tradeplanningservice_plannedtradeobligation.fx_rate,
                    xceler_tradeplanningservice_plannedtradeobligation.provisional_fx_rate,
                    xceler_tradeplanningservice_plannedtradeobligation.provisional_price_percentage,
                    xceler_tradeplanningservice_plannedtradeobligation.provisional_price_type,
                    xceler_tradeplanningservice_plannedtradeobligation.provisional_price,
                    xceler_tradeplanningservice_plannedtradeobligation.tradesettlementcurrency,
                    xceler_tradeplanningservice_plannedtradeobligation.trade_settlement_currency,
                    xceler_tradeplanningservice_plannedtradeobligation.premiun_cost,
                    xceler_tradeplanningservice_plannedtradeobligation.discount_cost,
                    xceler_tradeplanningservice_plannedtradeobligation.total_trade_qty,
                    xceler_tradeplanningservice_plannedtradeobligation.broker_reference_number,
                    xceler_tradeplanningservice_plannedtradeobligation.provisional_price_uom,
                    xceler_tradeplanningservice_plannedtradeobligation.provisional_price_currency,
                    xceler_tradeplanningservice_plannedtradeobligation.planned_obligation_status,
                    xceler_tradeplanningservice_plannedtradeobligation.parent_planned_obligation,
                    xceler_tradeplanningservice_plannedtradeobligation.shipment_month,
                    xceler_tradeplanningservice_plannedtradeobligation.external_record,
                    xceler_tradeplanningservice_plannedtradeobligation.delivery_term_clause,
                    xceler_tradeplanningservice_plannedtradeobligation.payment_terms_clause,
                    xceler_tradeplanningservice_plannedtradeobligation.quantity_terms_clause,
                    xceler_tradeplanningservice_plannedtradeobligation.quality_terms_clause,
                    xceler_tradeplanningservice_plannedtradeobligation.pricing_terms_clause,
                    xceler_tradeplanningservice_plannedtradeobligation.broker_reference,
                    xceler_tradeplanningservice_plannedtradeobligation.comments,
                    xceler_tradeplanningservice_plannedtradeobligation.trade_settlement_reference,
                    xceler_tradeplanningservice_plannedtradeobligation.doc_by_pass_id,
                    xceler_tradeplanningservice_plannedtradeobligation.package_type,
                    xceler_tradeplanningservice_plannedtradeobligation.balance_quantity,
                    xceler_tradeplanningservice_plannedtradeobligation.contract_term,
                    xceler_tradeplanningservice_plannedtradeobligation.external_package,
                    xceler_tradeplanningservice_plannedtradeobligation.external_package_unit,
                    xceler_tradeplanningservice_plannedtradeobligation.internal_package_unit,
                    xceler_tradeplanningservice_plannedtradeobligation.internal_package,
                    xceler_tradeplanningservice_plannedtradeobligation.provisional_pricing,
                    xceler_tradeplanningservice_plannedtradeobligation.weight_basis,
                    xceler_tradeplanningservice_plannedtradeobligation.tolerance_value,
                    xceler_tradeplanningservice_plannedtradeobligation.external_reference,
                    xceler_tradeplanningservice_plannedtradeobligation.price_ticker,
                    xceler_tradeplanningservice_plannedtradeobligation.special_instructions,
                    xceler_tradeplanningservice_plannedtradeobligation.match_type,
                    xceler_tradeplanningservice_plannedtradeobligation.settlement_tolerance_value,
                    xceler_tradeplanningservice_plannedtradeobligation.obligation_state,
                    xceler_tradeplanningservice_plannedtradeobligation.quotation_period_clause,
                    xceler_tradeplanningservice_plannedtradeobligation.commodity_code,
                    xceler_tradeplanningservice_plannedtradeobligation.location_type,
                    xceler_tradeplanningservice_plannedtradeobligation.load_location_type,
                    xceler_tradeplanningservice_plannedtradeobligation.unload_location_type,
                    xceler_tradeplanningservice_plannedtradeobligation.counterparty_name,
                    xceler_tradeplanningservice_plannedtradeobligation.company_code,
                    xceler_tradeplanningservice_plannedtradeobligation.profitcenter_code
                   FROM taomish.xceler_tradeplanningservice_plannedtradeobligation
                  WHERE (((xceler_tradeplanningservice_plannedtradeobligation.planned_obligation_status)::text = 'active'::text) AND ((xceler_tradeplanningservice_plannedtradeobligation.trade_type)::text = ANY (ARRAY[('Physical'::character varying)::text, ('Paper'::character varying)::text])) AND (xceler_tradeplanningservice_plannedtradeobligation.external_record IS FALSE))) xtp_1
          GROUP BY xtp_1.trade_id, xtp_1.tenant_id, xtp_1.price_type, xtp_1.commodity, xtp_1.company, xtp_1.trade_date_time, xtp_1.trade_type, xtp_1.incoterm, xtp_1.trade_transaction_type, xtp_1.external_reference, xtp_1.counterparty, xtp_1.quantityuom, xtp_1.profitcenter, xtp_1.provisional_price, xtp_1.trade_price_currency, xtp_1.trader, xtp_1.grade, xtp_1.payment_term, xtp_1.load_location, xtp_1.unload_location) xtp
     LEFT JOIN taomish.xceler_configservice_location xtt1 ON ((((xtt1.name)::text = (xtp.load_location)::text) AND ((xtp.tenant_id)::text = (xtt1.tenant_id)::text))))
     LEFT JOIN taomish.xceler_configservice_location xtt2 ON ((((xtt2.name)::text = (xtp.unload_location)::text) AND ((xtp.tenant_id)::text = (xtt2.tenant_id)::text))))
UNION ALL
 SELECT taomish.uuid_generate_v4() AS uuid,
    xpt.tenant_id,
    xpt.trade_id,
    xpt.company,
    xpt.trade_date_time,
    xpt.profitcenter,
    xpt.trade_approval_status AS trade_status,
    xpt.grade,
    xpt.commodity,
    xpt.period_end_date AS delivery_end_date,
    xpt.incoterm,
    xpt.load_location,
    xpt.discharge_location AS unload_location,
    xpt.quantity,
    xpt.quantity_uom,
    xpt.trade_price,
    xpt.trade_price_currency,
    xpt.broker,
    xpt.broker_reference,
    xpt.trade_type,
    xpt.paymentterm AS payment_term,
    xpt.counterparty,
    xtt1.parent AS country_of_receipt,
    xtt2.parent AS country_of_deliver
   FROM ((( SELECT xpt_1.uuid,
            xpt_1.created_by,
            xpt_1.created_timestamp,
            xpt_1.tenant_id,
            xpt_1.updated_by,
            xpt_1.updated_timestamp,
            xpt_1.brand,
            xpt_1.broker,
            xpt_1.comments,
            xpt_1.commodity,
            xpt_1.company,
            xpt_1.contract_confirmation,
            xpt_1.counterparty,
            xpt_1.delivery_end_date,
            xpt_1.delivery_start_date,
            xpt_1.discharge_location,
            xpt_1.external_package,
            xpt_1.external_package_unit,
            xpt_1.external_reference,
            xpt_1.factory,
            xpt_1.future_contract_month,
            xpt_1.future_index,
            xpt_1.fxrate,
            xpt_1.grade,
            xpt_1.incoterm,
            xpt_1.internal_package,
            xpt_1.internal_package_unit,
            xpt_1.internal_profit_center,
            xpt_1.is_internal_trade,
            xpt_1.is_provisional_pricing,
            xpt_1.load_location,
            xpt_1.location,
            xpt_1.long_contract,
            xpt_1.origin,
            xpt_1.package_type,
            xpt_1.paymentterm,
            xpt_1.percentage,
            xpt_1.period_end_date,
            xpt_1.period_start_date,
            xpt_1.price_type,
            xpt_1.profitcenter,
            xpt_1.provisional_fx_rate,
            xpt_1.provisional_price,
            xpt_1.provisional_price_currency,
            xpt_1.provisional_price_type,
            xpt_1.provisional_price_uom,
            xpt_1.quantity,
            xpt_1.quantity_periodicity,
            xpt_1.quantity_tolerance_type,
            xpt_1.quantity_uom,
            xpt_1.season,
            xpt_1.special_instructions,
            xpt_1.tolerance_value,
            xpt_1.total_trade_qty,
            xpt_1.trade_date_time,
            xpt_1.trade_id,
            xpt_1.trade_price,
            xpt_1.trade_price_currency,
            xpt_1.trade_price_uom,
            xpt_1.trade_settlement_currency,
            xpt_1.trade_transaction_type,
            xpt_1.trader_name,
            xpt_1.load_location_type,
            xpt_1.location_type,
            xpt_1.mode_of_transport,
            xpt_1.total_units,
            xpt_1.unload_location_type,
            xpt_1.weight_basis,
            xpt_1.delivery_terms_clause,
            xpt_1.payment_terms_clause,
            xpt_1.pricing_terms_clause,
            xpt_1.quantity_terms_clause,
            xpt_1.quotation_period_clause,
            xpt_1.quality_terms_clause,
            xpt_1.commodity_code,
            xpt_1.company_code,
            xpt_1.profitcenter_code,
            xpt_1.internal_profitcenter_code,
            xpt_1.counterparty_code,
            xpt_1.manual_trade_id,
            xpt_1.broker_reference,
            xpt_1.paper_trade,
            xpt_1.settlement_tolerance_percentage,
            xpt_1.trade_type,
            xpt_1.total_trade_value,
            xpt_1.contract_term,
            xpt_1.settlement_tolerance_value,
            xpt_1.trade_approval_status,
            xpt_1.delivery_schedule
           FROM taomish.xceler_physicaltradeservice_physicaltrade xpt_1
          WHERE (((xpt_1.trade_type)::text = ANY (ARRAY[('Physical'::character varying)::text, ('Paper'::character varying)::text])) AND ((xpt_1.trade_approval_status)::text = ANY (ARRAY[('void'::character varying)::text, ('Draft'::character varying)::text])))) xpt
     LEFT JOIN taomish.xceler_configservice_location xtt1 ON ((((xtt1.name)::text = (xpt.load_location)::text) AND ((xpt.tenant_id)::text = (xtt1.tenant_id)::text))))
     LEFT JOIN taomish.xceler_configservice_location xtt2 ON ((((xtt2.name)::text = (xpt.discharge_location)::text) AND ((xpt.tenant_id)::text = (xtt2.tenant_id)::text))));</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-171">
        <createView fullDefinition="false" viewName="vw_transport_allocation_for_actualization_criteria">WITH ports AS (
         SELECT DISTINCT xcl.name,
            xcl.tenant_id
           FROM taomish.xceler_configservice_location xcl
          WHERE (xcl.status IS TRUE)
        )
 SELECT tac.tenant_id,
    (json_build_object('vesselName', jsonb_agg(DISTINCT tac.vessel_name), 'vesselId', jsonb_agg(DISTINCT tac.vessel_id), 'voyageNo', jsonb_agg(DISTINCT tac.voyage_no), 'loadPort', jsonb_agg(DISTINCT pp.name) FILTER (WHERE ((pp.tenant_id)::text = (tac.tenant_id)::text)), 'unloadPort', jsonb_agg(DISTINCT pp.name) FILTER (WHERE ((pp.tenant_id)::text = (tac.tenant_id)::text))))::text AS criteria_map
   FROM (taomish.vw_transport_allocation_for_actualization tac
     JOIN ports pp ON (((tac.tenant_id)::text = (pp.tenant_id)::text)))
  GROUP BY tac.tenant_id;</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-172">
        <createView fullDefinition="false" viewName="xceler_invoice_finance_report_view">SELECT taomish.uuid_generate_v4() AS uuid,
    table2.tenant_id,
    table2.invoice_number,
    table2.invoice_type,
    table2.invoice_date,
    table2.created_at,
    table2.company,
    table2.status,
    table2.price,
    table2.commodity,
    table2.settle_counterparty_country,
    table2.quantity,
    table2.uom,
    table2.vessel_name,
    table2.port_of_loading,
    table2.port_of_discharging,
    table2.trade_id,
    table2.total_amount,
    table2.payment_term,
    table2.incoterm,
    table2.trader,
    table2.invoice_amount,
    table2.remit_to,
    table2.payment_due_date,
    table2.generated_by,
    table2.b_name,
    table2.delivery_end_date,
    table2.shipment_month,
    table2.bl_date,
    table2.voyage_number,
    table2.remark,
    table2.planned_obligation_id,
    table2.contract_counterparty,
    table2.trade_type,
    table2.trade_date,
    table2.broker_ref,
    table2.plan_match_type,
    load_loc.ll_parent AS load_country,
    unload_loc.ul_parent AS unload_country,
    loc.name AS contract_counterparty_country,
    table2.contract_counterparty AS settle_counterparty,
    bankacc.bank_name
   FROM (((((( SELECT table1.tenant_id,
            table1.invoice_number,
            table1.invoice_type,
            table1.invoice_date,
            table1.created_at,
            table1.company,
            table1.status,
            table1.price,
            table1.commodity,
            table1.settle_counterparty_country,
            table1.quantity,
            table1.uom,
            table1.vessel_name,
            table1.port_of_loading,
            table1.port_of_discharging,
            table1.trade_id,
            table1.total_amount,
            table1.payment_term,
            table1.incoterm,
            table1.trader,
            table1.invoice_amount,
            table1.remit_to,
            table1.payment_due_date,
            table1.generated_by,
            table1.b_name,
            table1.delivery_end_date,
            table1.shipment_month,
            table1.bl_date,
            table1.voyage_number,
            table1.remark,
            table1.planned_obligation_id,
            table1.contract_counterparty,
            obli.trade_type,
            obli.trade_date_time AS trade_date,
            obli.broker_reference_number AS broker_ref,
            obli.match_type AS plan_match_type
           FROM (( SELECT invoice.tenant_id,
                    invoice.invoice_number,
                    invoice.invoice_type,
                    invoice.invoice_date,
                    invoice.created_timestamp AS created_at,
                    invoice.company,
                    invoice.status,
                    invoice.unit_price AS price,
                    invoice.commodity,
                    settle_cp.country_of_registration AS settle_counterparty_country,
                    invoice.quantity,
                    invoice.uom,
                    invoice.vessel_name,
                    invoice.port_of_loading,
                    invoice.port_of_discharging,
                    invoice.trade_id,
                    invoice.total AS total_amount,
                    invoice.terms_of_payment AS payment_term,
                    invoice.incoterm,
                    invoice.trader_name AS trader,
                    invoice.settlement_amount AS invoice_amount,
                    invoice.remit_to,
                    invoice.payment_due_date,
                    invoice.invoice_generated_by AS generated_by,
                    invoice.account_number AS b_name,
                    invoice.delivery_end_date,
                    to_char(invoice.delivery_end_date, 'Month'::text) AS shipment_month,
                    invoice.bl_date,
                    invoice.vessel_id AS voyage_number,
                    invoice.purpose AS remark,
                    invoice.planned_obligation_id,
                    invoice.counterparty AS contract_counterparty
                   FROM (( SELECT inv.uuid,
                            inv.created_by,
                            inv.created_timestamp,
                            inv.tenant_id,
                            inv.updated_by,
                            inv.updated_timestamp,
                            inv.account_number,
                            inv.adjustment_amount,
                            inv.amount,
                            inv.attachment_name,
                            inv.bank_address,
                            inv.bank_name,
                            inv.bl_date,
                            inv.bl_number,
                            inv.commodity,
                            inv.company,
                            inv.company_address,
                            inv.contract_number,
                            inv.counterparty,
                            inv.counterparty_address,
                            inv.counterparty_ref_number,
                            inv.currency,
                            inv.delivery_end_date,
                            inv.delivery_terms,
                            inv.finance_approved_by,
                            inv.finance_approved_date,
                            inv.fx_rate,
                            inv.incoterm,
                            inv.invoice_approved_by,
                            inv.invoice_date,
                            inv.invoice_document_url,
                            inv.invoice_generated_by,
                            inv.invoice_number,
                            inv.invoice_type,
                            inv.limits_or_tolerance,
                            inv.notify_party_address,
                            inv.notify_party_name,
                            inv.payment_amount,
                            inv.payment_confirmed_by,
                            inv.payment_confirmed_date,
                            inv.payment_date,
                            inv.payment_due_date,
                            inv.payment_ref_number,
                            inv.port_of_discharging,
                            inv.port_of_loading,
                            inv.posting_date,
                            inv.purpose,
                            inv.quantity,
                            inv.remit_to,
                            inv.settlement_amount,
                            inv.shipment,
                            inv.status,
                            inv.swift_code,
                            inv.terms_of_payment,
                            inv.total,
                            inv.trade_date,
                            inv.trade_id,
                            inv.trader_approval_date,
                            inv.trader_name,
                            inv.unit_price,
                            inv.uom,
                            inv.planned_obligation_ids,
                            inv.vessel_name,
                            inv.attachment_url,
                            inv.attached_file_name,
                            inv.financial_amount_type,
                            inv.external_reference,
                            inv.account_code,
                            inv.external_system_invoice_id,
                            inv.counter_party_phone_number,
                            inv.total_in_words,
                            inv.invoice_document,
                            inv.final_invoice_type,
                            inv.old_invoice_id,
                            inv.full_invoice_type,
                            inv.counterparty_type,
                            inv.planned_obligation_id,
                            inv.unpost_reason,
                            inv.vessel_id,
                            inv.split_number,
                            inv.trade_price_uom,
                            inv.parent_invoice_number
                           FROM taomish.xceler_tradesettlementservice_tradeinvoice inv
                          WHERE (lower((inv.status)::text) &lt;&gt; 'void'::text)) invoice
                     LEFT JOIN ( SELECT xcc.tenant_id AS scp_tenant_id,
                            xcc.name AS scp_name,
                            xcc.country_of_registration,
                            xcc.code
                           FROM taomish.xceler_configservice_counterparty xcc
                          WHERE (xcc.status = true)
                         LIMIT 1) settle_cp ON ((((settle_cp.scp_tenant_id)::text = (invoice.tenant_id)::text) AND ((settle_cp.scp_name)::text = (invoice.counterparty)::text))))) table1
             LEFT JOIN ( SELECT xtp.tenant_id AS obli_tenant_id,
                    xtp.planned_obligation_id AS obli_id,
                    xtp.broker_reference_number,
                    xtp.trade_date_time,
                    xtp.plan_id AS obli_plan_id,
                    xtp.counterparty AS obli_counterparty,
                    xtp.trade_type,
                    xtp.match_type
                   FROM taomish.xceler_tradeplanningservice_plannedtradeobligation xtp
                  WHERE ((xtp.planned_obligation_status)::text = 'active'::text)) obli ON ((((obli.obli_tenant_id)::text = (table1.tenant_id)::text) AND ((obli.obli_id)::text = (table1.planned_obligation_id)::text))))) table2
     LEFT JOIN ( SELECT xcc2.tenant_id AS ccp_tenant_id,
            xcc2.name AS ccp_name,
            xcc2.code,
            xcc2.country_of_registration
           FROM taomish.xceler_configservice_counterparty xcc2
         LIMIT 1) contract_cp ON ((((contract_cp.ccp_tenant_id)::text = (table2.tenant_id)::text) AND ((contract_cp.code)::text = (table2.contract_counterparty)::text))))
     LEFT JOIN ( SELECT xcl.tenant_id AS ll_tenantid,
            xcl.name AS ll_name,
            xcl.parent AS ll_parent
           FROM taomish.xceler_configservice_location xcl
          WHERE ((xcl.status = true) AND (lower((xcl.location_type)::text) = ANY (ARRAY['port'::text, 'terminal'::text])))) load_loc ON ((((load_loc.ll_tenantid)::text = (table2.tenant_id)::text) AND ((load_loc.ll_name)::text = (table2.port_of_loading)::text) AND (table2.port_of_loading IS NOT NULL))))
     LEFT JOIN ( SELECT xcl1.tenant_id AS ul_tenantid,
            xcl1.name AS ul_name,
            xcl1.parent AS ul_parent
           FROM taomish.xceler_configservice_location xcl1
          WHERE ((xcl1.status = true) AND (lower((xcl1.location_type)::text) = ANY (ARRAY['port'::text, 'terminal'::text])))) unload_loc ON ((((unload_loc.ul_tenantid)::text = (table2.tenant_id)::text) AND ((unload_loc.ul_name)::text = (table2.port_of_discharging)::text) AND (table2.port_of_discharging IS NOT NULL))))
     LEFT JOIN taomish.xceler_configservice_companybankaccount bankacc ON ((((bankacc.tenant_id)::text = (table2.tenant_id)::text) AND ((bankacc.name)::text = (table2.company)::text) AND ((bankacc.account_number)::text = (table2.b_name)::text))))
     LEFT JOIN ( SELECT xceler_configservice_location.uuid,
            xceler_configservice_location.created_by,
            xceler_configservice_location.created_timestamp,
            xceler_configservice_location.end_date,
            xceler_configservice_location.start_date,
            xceler_configservice_location.tenant_id,
            xceler_configservice_location.updated_by,
            xceler_configservice_location.updated_timestamp,
            xceler_configservice_location.description,
            xceler_configservice_location.is_tradeable,
            xceler_configservice_location.location_type,
            xceler_configservice_location.name,
            xceler_configservice_location.origin,
            xceler_configservice_location.parent,
            xceler_configservice_location.status,
            xceler_configservice_location.time_zone,
            xceler_configservice_location.code,
            xceler_configservice_location.username,
            xceler_configservice_location.valid_from,
            xceler_configservice_location.valid_to,
            xceler_configservice_location.high_risk_zone
           FROM taomish.xceler_configservice_location
         LIMIT 1) loc ON ((((loc.tenant_id)::text = (table2.tenant_id)::text) AND ((loc.code)::text = (contract_cp.country_of_registration)::text))))
  WHERE (table2.trade_id IS NOT NULL);</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-173">
        <createView fullDefinition="false" viewName="xceler_report_longcargo">WITH xti AS (
         SELECT xtt.tenant_id,
            xtt.planned_obligation_id,
            xtt.invoice_number,
            xtt.invoice_type,
            xtt.invoice_date,
            xtt.status,
            xtt.bl_number,
            xtp.trade_date_time,
            xtt.vessel_name,
            xtt.vessel_id,
            xtt.delivery_end_date,
            xtt.commodity,
            xtt.counterparty,
            xtili.quantity,
            xtt.uom,
            xtt.unit_price,
            xtt.currency,
            xtt.port_of_loading,
            xtp.match_type,
            xtili.split_number
           FROM ((taomish.xceler_tradesettlementservice_tradeinvoice xtt
             JOIN ( SELECT xceler_tradeplanningservice_plannedtradeobligation.planned_obligation_id,
                    xceler_tradeplanningservice_plannedtradeobligation.planned_obligation_status,
                    xceler_tradeplanningservice_plannedtradeobligation.tenant_id,
                    xceler_tradeplanningservice_plannedtradeobligation.trade_type,
                    xceler_tradeplanningservice_plannedtradeobligation.trade_date_time,
                    xceler_tradeplanningservice_plannedtradeobligation.match_type
                   FROM taomish.xceler_tradeplanningservice_plannedtradeobligation
                  WHERE (((xceler_tradeplanningservice_plannedtradeobligation.planned_obligation_status)::text = 'active'::text) AND ((xceler_tradeplanningservice_plannedtradeobligation.trade_type)::text = ANY (ARRAY[('Physical'::character varying)::text, ('Paper'::character varying)::text])))) xtp ON ((((xtp.planned_obligation_id)::text = (xtt.planned_obligation_id)::text) AND ((xtp.tenant_id)::text = (xtt.tenant_id)::text))))
             LEFT JOIN taomish.xceler_tradesettlementservice_tradeinvoicelineitem xtili ON ((((xtili.invoice_number)::text = (xtt.invoice_number)::text) AND ((xtili.tenant_id)::text = (xtt.tenant_id)::text))))
          WHERE (((xtt.status)::text = 'POSTED'::text) AND (xtili.voided = false) AND (xtt.planned_obligation_id IS NOT NULL))
        ), tlink AS (
         SELECT xceler_tradeplanningservice_tradelink.tenant_id,
            xceler_tradeplanningservice_tradelink.planned_obligation_id,
            xceler_tradeplanningservice_tradelink.linked_with,
            xceler_tradeplanningservice_tradelink.match_quantity,
            xceler_tradeplanningservice_tradelink.bl_no,
            xceler_tradeplanningservice_tradelink.split_sequence_number
           FROM taomish.xceler_tradeplanningservice_tradelink
        ), xsm AS (
         SELECT xceler_stock_movement.tenant_id,
            xceler_stock_movement.transfer_to,
            xceler_stock_movement.transfer_from,
            xceler_stock_movement.status,
            xceler_stock_movement.type,
            ((xceler_stock_movement.quantity -&gt;&gt; 'unit'::text))::double precision AS quantity,
            xceler_stock_movement.split_sequence_number,
            xceler_stock_movement.created_timestamp,
            xceler_stock_movement.sell_stock_id
           FROM taomish.xceler_stock_movement
          WHERE (((xceler_stock_movement.type)::text = ANY (ARRAY[('Sales-Draw'::character varying)::text, ('Build-Simple blending'::character varying)::text, ('Build'::character varying)::text])) AND ((xceler_stock_movement.status)::text &lt;&gt; 'Deleted'::text))
        ), xis AS (
         SELECT xis.tenant_id,
            xis.transfer_to,
            xis.vessel_name,
            xis.vessel_id,
            sum(xis.quantity) AS quantity,
            xis.uom,
            xis.created_timestamp
           FROM ( SELECT xsm.tenant_id,
                    xsm.transfer_to,
                        CASE (count(*) = sum(
                            CASE
                                WHEN ((xti.status)::text = 'POSTED'::text) THEN 1
                                ELSE 0
                            END))
                            WHEN true THEN 'true'::text
                            ELSE 'false'::text
                        END AS posted_count,
                    max((xti.vessel_name)::text) AS vessel_name,
                    max((xti.vessel_id)::text) AS vessel_id,
                    sum(round((xsm.quantity)::numeric, 3)) AS quantity,
                    max((xti.uom)::text) AS uom,
                    max(xsm.created_timestamp) AS created_timestamp
                   FROM (xsm
                     LEFT JOIN xti ON ((((xsm.tenant_id)::text = (xti.tenant_id)::text) AND ((xsm.transfer_from)::text = (xti.planned_obligation_id)::text) AND ((xti.invoice_type)::text = 'Purchase'::text) AND (xti.split_number = xsm.split_sequence_number))))
                  WHERE ((xsm.type)::text = 'Build-Simple blending'::text)
                  GROUP BY xsm.tenant_id, xsm.transfer_to) xis
          WHERE (xis.posted_count = 'true'::text)
          GROUP BY xis.tenant_id, xis.transfer_to, xis.vessel_name, xis.vessel_id, xis.uom, xis.created_timestamp
        ), xib AS (
         SELECT xsm.tenant_id,
            xsm.transfer_from,
            xsm.transfer_to,
            sum(xsm.quantity) AS quantity,
            xti1.vessel_id,
            xti1.vessel_name,
            xti1.trade_date_time,
            xti1.delivery_end_date,
            xti1.commodity,
            xti1.counterparty,
            xti1.uom,
            xti1.currency,
            xti1.port_of_loading,
            xti1.unit_price
           FROM ((( SELECT xti.planned_obligation_id,
                    xti.tenant_id,
                    xti.vessel_id,
                    xti.vessel_name,
                    xti.trade_date_time,
                    xti.delivery_end_date,
                    xti.commodity,
                    xti.counterparty,
                    xti.uom,
                    xti.currency,
                    xti.port_of_loading,
                    xti.unit_price
                   FROM xti
                  WHERE ((xti.invoice_type)::text = 'Purchase'::text)
                  GROUP BY xti.planned_obligation_id, xti.tenant_id, xti.vessel_id, xti.vessel_name, xti.trade_date_time, xti.delivery_end_date, xti.commodity, xti.counterparty, xti.uom, xti.currency, xti.port_of_loading, xti.unit_price) xti1
             JOIN xsm ON ((((xti1.tenant_id)::text = (xsm.tenant_id)::text) AND ((xti1.planned_obligation_id)::text = (xsm.transfer_from)::text) AND ((xsm.type)::text = 'Sales-Draw'::text))))
             LEFT JOIN ( SELECT xti.planned_obligation_id,
                    xti.tenant_id,
                    xti.status
                   FROM xti
                  WHERE ((xti.invoice_type)::text = ANY (ARRAY[('Sell'::character varying)::text, ('sell Provisional'::character varying)::text]))
                  GROUP BY xti.planned_obligation_id, xti.tenant_id, xti.status) xti2 ON ((((xti2.tenant_id)::text = (xsm.tenant_id)::text) AND ((xti2.planned_obligation_id)::text = (xsm.transfer_to)::text))))
          GROUP BY xsm.tenant_id, xsm.transfer_from, xsm.transfer_to, xti1.vessel_id, xti1.vessel_name, xti1.trade_date_time, xti1.delivery_end_date, xti1.commodity, xti1.counterparty, xti1.uom, xti1.currency, xti1.port_of_loading, xti1.unit_price
         HAVING (count(xti2.status) = 0)
        )
 SELECT taomish.uuid_generate_v4() AS uuid,
    longcargo.tenant_id,
    longcargo.planned_obligation_id,
    longcargo.invoice_number,
    longcargo.invoice_date,
    longcargo.linked_with,
    longcargo.trade_date_time,
    longcargo.vessel_name,
    longcargo.voyage_id,
    longcargo.delivery_end_date,
    longcargo.commodity,
    longcargo.counterparty,
    longcargo.quantity,
    longcargo.uom,
    longcargo.trade_price,
    longcargo.currency,
    longcargo.load_location,
    longcargo.bl_number,
    longcargo.inventory_type,
    longcargo.terminal,
    round(taomish.convert_currency_v2(longcargo.tenant_id, longcargo.currency, 'USD'::character varying, (round(((longcargo.trade_price * longcargo.quantity))::numeric, 2))::double precision, longcargo.trade_date_time), 2) AS converted_price,
    round(((longcargo.quantity * longcargo.trade_price))::numeric, 2) AS stock_value
   FROM ( SELECT taomish.uuid_generate_v4() AS uuid,
            xtib.tenant_id,
            xtib.planned_obligation_id,
            xtib.invoice_number,
            xtib.invoice_date,
            tlink.linked_with,
            xtib.trade_date_time,
            xtib.vessel_name,
            xtib.vessel_id AS voyage_id,
            xtib.delivery_end_date,
            xtib.commodity,
            xtib.counterparty,
                CASE
                    WHEN (tlink.match_quantity IS NOT NULL) THEN tlink.match_quantity
                    ELSE xtib.quantity
                END AS quantity,
            xtib.uom,
            xtib.unit_price AS trade_price,
            xtib.currency,
            xtib.port_of_loading AS load_location,
            xtib.bl_number,
            NULL::character varying AS inventory_type,
            NULL::character varying AS terminal
           FROM ((( SELECT xtib_1.tenant_id,
                    xtib_1.planned_obligation_id,
                    xtib_1.invoice_number,
                    xtib_1.invoice_type,
                    xtib_1.invoice_date,
                    xtib_1.status,
                    xtib_1.bl_number,
                    xtib_1.trade_date_time,
                    xtib_1.vessel_name,
                    xtib_1.vessel_id,
                    xtib_1.delivery_end_date,
                    xtib_1.commodity,
                    xtib_1.counterparty,
                    xtib_1.quantity,
                    xtib_1.uom,
                    xtib_1.unit_price,
                    xtib_1.currency,
                    xtib_1.port_of_loading,
                    xtib_1.match_type,
                    xtib_1.split_number
                   FROM xti xtib_1
                  WHERE (((xtib_1.status)::text = 'POSTED'::text) AND ((xtib_1.invoice_type)::text = 'Purchase'::text) AND ((xtib_1.match_type)::text = 'Vessel Plan'::text))) xtib
             LEFT JOIN ( SELECT tlink_1.tenant_id,
                    tlink_1.planned_obligation_id,
                    tlink_1.linked_with,
                    tlink_1.match_quantity,
                    tlink_1.bl_no,
                    tlink_1.split_sequence_number
                   FROM tlink tlink_1
                  WHERE (tlink_1.linked_with IS NOT NULL)) tlink ON ((((xtib.planned_obligation_id)::text = (tlink.planned_obligation_id)::text) AND ((xtib.tenant_id)::text = (tlink.tenant_id)::text) AND ((tlink.split_sequence_number)::double precision = xtib.split_number))))
             LEFT JOIN ( SELECT xti.planned_obligation_id,
                    xti.invoice_number,
                    xti.tenant_id
                   FROM xti
                  WHERE ((xti.invoice_type)::text = ANY (ARRAY[('Sell'::character varying)::text, ('Sell Provisional'::character varying)::text]))) xtis ON ((((xtis.planned_obligation_id)::text = (tlink.linked_with)::text) AND ((xtis.tenant_id)::text = (xtib.tenant_id)::text))))
          WHERE ((xtis.invoice_number IS NULL) AND (tlink.linked_with IS NOT NULL) AND ((xtib.vessel_name)::text &lt;&gt; ALL (ARRAY[('MT GREAT BLOSSOM'::character varying)::text, ('MR GREAT BLOSSOM'::character varying)::text])))
        UNION ALL
         SELECT taomish.uuid_generate_v4() AS uuid,
            xtib.tenant_id,
            xtib.transfer_from AS planned_obligation_id,
            NULL::character varying AS invoice_number,
            NULL::timestamp without time zone AS invoice_date,
            xsm.transfer_to AS linked_with,
            xtib.trade_date_time,
            xtib.vessel_name,
            xtib.vessel_id AS voyage_id,
            xtib.delivery_end_date,
            xtib.commodity,
            xtib.counterparty,
            xtib.quantity,
            xtib.uom,
            xtib.unit_price AS trade_price,
            xtib.currency,
            xtib.port_of_loading AS load_location,
            NULL::character varying AS bl_number,
            xi.inventory_type,
            xi.inventory_name AS terminal
           FROM (((xsm
             JOIN xib xtib ON ((((xsm.transfer_from)::text = (xtib.transfer_from)::text) AND ((xsm.tenant_id)::text = (xtib.tenant_id)::text) AND ((xsm.transfer_to)::text = (xtib.transfer_to)::text))))
             LEFT JOIN taomish.xceler_sell_stock xss ON ((((xss.tenant_id)::text = (xsm.tenant_id)::text) AND ((xss.sell_stock_id)::text = (xsm.sell_stock_id)::text))))
             LEFT JOIN taomish.xceler_inventory xi ON ((((xi.tenant_id)::text = (xsm.tenant_id)::text) AND ((xss.transfer_from_id)::text = (xi.inventory_id)::text))))
          WHERE ((xtib.vessel_name)::text &lt;&gt; ALL (ARRAY[('MT GREAT BLOSSOM'::character varying)::text, ('MR GREAT BLOSSOM'::character varying)::text]))
        UNION ALL
         SELECT taomish.uuid_generate_v4() AS uuid,
            xtib.tenant_id,
            xtib.planned_obligation_id,
            xtib.invoice_number,
            xtib.invoice_date,
            NULL::character varying AS linked_with,
            xtib.trade_date_time,
            xtib.vessel_name,
            xtib.vessel_id AS voyage_id,
            xtib.delivery_end_date,
            xtib.commodity,
            xtib.counterparty,
            xtib.quantity,
            xtib.uom,
            xtib.unit_price AS trade_price,
            xtib.currency,
            xtib.port_of_loading AS load_location,
            xtib.bl_number,
            NULL::character varying AS inventory_type,
            NULL::character varying AS terminal
           FROM (( SELECT xtib_1.tenant_id,
                    xtib_1.planned_obligation_id,
                    xtib_1.invoice_number,
                    xtib_1.invoice_type,
                    xtib_1.invoice_date,
                    xtib_1.status,
                    xtib_1.bl_number,
                    xtib_1.trade_date_time,
                    xtib_1.vessel_name,
                    xtib_1.vessel_id,
                    xtib_1.delivery_end_date,
                    xtib_1.commodity,
                    xtib_1.counterparty,
                    xtib_1.quantity,
                    xtib_1.uom,
                    xtib_1.unit_price,
                    xtib_1.currency,
                    xtib_1.port_of_loading,
                    xtib_1.match_type,
                    xtib_1.split_number
                   FROM xti xtib_1
                  WHERE (((xtib_1.status)::text = 'POSTED'::text) AND ((xtib_1.invoice_type)::text = 'Purchase'::text))) xtib
             LEFT JOIN ( SELECT ab.transfer_from,
                    ab.tenant_id,
                    ab.split_sequence_number
                   FROM ( SELECT xsm_1.transfer_from,
                            xsm_1.tenant_id,
                            xsm_1.split_sequence_number
                           FROM xsm xsm_1
                        UNION
                         SELECT tlink.planned_obligation_id,
                            tlink.tenant_id,
                            tlink.split_sequence_number
                           FROM tlink) ab) xsm ON ((((xsm.transfer_from)::text = (xtib.planned_obligation_id)::text) AND ((xsm.tenant_id)::text = (xtib.tenant_id)::text) AND (xsm.split_sequence_number = xtib.split_number))))
          WHERE ((xsm.transfer_from IS NULL) AND ((xtib.vessel_name)::text &lt;&gt; ALL (ARRAY[('MT GREAT BLOSSOM'::character varying)::text, ('MR GREAT BLOSSOM'::character varying)::text])))
        UNION ALL
         SELECT taomish.uuid_generate_v4() AS uuid,
            xis.tenant_id,
            xis.transfer_to AS planned_obligation_id,
            NULL::character varying AS invoice_number,
            NULL::timestamp without time zone AS invoice_date,
            NULL::character varying AS linked_with,
            xis.created_timestamp AS trade_date_time,
            xis.vessel_name,
            xis.vessel_id AS voyage_id,
            xis.created_timestamp AS delivery_end_date,
            xi.commodity,
            xi.company_name AS counterparty,
                CASE
                    WHEN (xsm.posted_quantity IS NULL) THEN (xis.quantity)::double precision
                    ELSE ((xis.quantity)::double precision - xsm.posted_quantity)
                END AS quantity,
            xis.uom,
            round((xi.average_price)::numeric, 2) AS trade_price,
            xi.inventory_currency AS currency,
            xi.storage_name AS load_location,
            NULL::character varying AS bl_number,
            xi.inventory_type,
            xis.transfer_to AS terminal
           FROM ((xis xis
             JOIN taomish.xceler_inventory xi ON ((((xi.tenant_id)::text = (xis.tenant_id)::text) AND ((xi.inventory_name)::text = (xis.transfer_to)::text))))
             LEFT JOIN ( SELECT xsm_1.transfer_from,
                    xsm_1.tenant_id,
                    sum(xsm_1.posted_quantity) AS posted_quantity
                   FROM ( SELECT xsm_2.tenant_id,
                            xsm_2.transfer_from,
                            sum(xti.quantity) AS posted_quantity
                           FROM (xsm xsm_2
                             JOIN xti ON ((((xsm_2.tenant_id)::text = (xti.tenant_id)::text) AND ((xsm_2.transfer_to)::text = (xti.planned_obligation_id)::text))))
                          WHERE ((xsm_2.type)::text = 'Sales-Draw'::text)
                          GROUP BY xsm_2.tenant_id, xsm_2.transfer_from) xsm_1
                  GROUP BY xsm_1.transfer_from, xsm_1.tenant_id) xsm ON ((((xsm.transfer_from)::text = (xis.transfer_to)::text) AND ((xsm.tenant_id)::text = (xis.tenant_id)::text))))
          WHERE (xis.vessel_name &lt;&gt; ALL (ARRAY['MT GREAT BLOSSOM'::text, 'MR GREAT BLOSSOM'::text]))
        UNION ALL
         SELECT taomish.uuid_generate_v4() AS uuid,
            xtib.tenant_id,
            xtib.planned_obligation_id,
            xtib.invoice_number,
            xtib.invoice_date,
            xmb1.transfer_to AS linked_with,
            xtib.trade_date_time,
            xtib.vessel_name,
            xtib.vessel_id AS voyage_id,
            xtib.delivery_end_date,
            xtib.commodity,
            xtib.counterparty,
            xmb1.quantity,
            xtib.uom,
            xtib.unit_price AS trade_price,
            xtib.currency,
            xtib.port_of_loading AS load_location,
            xtib.bl_number,
            xi.inventory_type,
            xi.inventory_name AS terminal
           FROM ((( SELECT xmb.tenant_id,
                    xmb.transfer_from,
                    xmb.transfer_to,
                    xmb.quantity,
                    xmb.split_sequence_number
                   FROM (( SELECT xsm1.tenant_id,
                            xsm1.transfer_to,
                            xsm1.transfer_from,
                            xsm1.status,
                            xsm1.type,
                            xsm1.quantity,
                            xsm1.split_sequence_number,
                            xsm1.created_timestamp,
                            xsm1.sell_stock_id
                           FROM xsm xsm1
                          WHERE ((xsm1.type)::text = 'Build'::text)) xmb
                     LEFT JOIN xsm xsm2 ON ((((xmb.tenant_id)::text = (xsm2.tenant_id)::text) AND ((xmb.transfer_from)::text = (xsm2.transfer_from)::text) AND ((xsm2.type)::text = 'Sales-Draw'::text))))
                  WHERE (xsm2.transfer_from IS NULL)) xmb1
             JOIN xti xtib ON ((((xmb1.tenant_id)::text = (xtib.tenant_id)::text) AND ((xmb1.transfer_from)::text = (xtib.planned_obligation_id)::text) AND (xtib.split_number = xmb1.split_sequence_number))))
             LEFT JOIN taomish.xceler_inventory xi ON ((((xi.tenant_id)::text = (xtib.tenant_id)::text) AND ((xi.inventory_name)::text = (xmb1.transfer_to)::text))))
          WHERE ((xtib.vessel_name)::text &lt;&gt; ALL (ARRAY[('MT GREAT BLOSSOM'::character varying)::text, ('MR GREAT BLOSSOM'::character varying)::text]))) longcargo;</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-174">
        <createView fullDefinition="false" viewName="vw_xceler_tradesettlementservice_tradeinvoicereport">SELECT taomish.uuid_generate_v4() AS uuid,
    xts.tenant_id,
    xts.invoice_number,
    xts.updated_timestamp AS apply_date,
    xts.invoice_date AS document_date,
    xts.trade_id,
    xtp.trade_price,
    xts.notify_party_name AS bill_to_name,
    xts.unit_price AS invoice_price,
    xts.quantity AS billed_qty,
    xts.settlement_amount AS ar_total,
    xts.commodity,
    xts.port_of_loading AS load_port,
    xts.vessel_name,
    xts.currency,
    xts.uom,
    xts.invoice_type,
        CASE
            WHEN ((xts.status)::text = 'POSTED'::text) THEN 'POSTED'::text
            ELSE 'UNPOSTED'::text
        END AS status
   FROM (taomish.xceler_tradesettlementservice_tradeinvoice xts
     LEFT JOIN ( SELECT xceler_tradeplanningservice_plannedtradeobligation.planned_obligation_id,
            xceler_tradeplanningservice_plannedtradeobligation.tenant_id,
            xceler_tradeplanningservice_plannedtradeobligation.trade_price
           FROM taomish.xceler_tradeplanningservice_plannedtradeobligation
          WHERE (((xceler_tradeplanningservice_plannedtradeobligation.planned_obligation_status)::text = 'active'::text) AND ((xceler_tradeplanningservice_plannedtradeobligation.trade_type)::text = ANY (ARRAY[('Physical'::character varying)::text, ('Paper'::character varying)::text])))) xtp ON ((((xts.planned_obligation_id)::text = (xtp.planned_obligation_id)::text) AND ((xts.tenant_id)::text = (xtp.tenant_id)::text))))
  WHERE ((xts.status)::text &lt;&gt; 'void'::text);</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-175">
        <createView fullDefinition="false" viewName="vw_xceler_idt_mirror_report">SELECT xpi.uuid,
    xpi.tenant_id,
    xpi.purchase_leg_ref,
    xpi.sell_leg_ref,
    xpi.status,
    xpi.from_profit_center,
    xpi.to_profit_center,
    xpi.commodity,
    xpi.trade_date_time,
    xpi.shipment_month,
    xpi.trade_price,
    xpi.quantity
   FROM taomish.xceler_physicaltradeservice_internaldealticker xpi
  WHERE ((xpi.status)::text = 'confirmed'::text);</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-176">
        <createView fullDefinition="false" viewName="xceler_report_idtmatchingreport">SELECT taomish.uuid_generate_v4() AS uuid,
    xpi.tenant_id,
    xpi.idt_id,
    xpp.planned_obligation_id AS purchase_trade_id,
    xpi.sell_leg_ref AS sell_trade_id,
    xpi.commodity,
    xpi.quantity,
    xpi.trade_price AS idt_price,
    xit.updated_timestamp AS match_date,
    xpp.trade_transaction_type,
    xpp.trade_price,
    xpp.profitcenter,
    xpp.counterparty,
    xpp.delivery_end_date AS period_end_date,
    xit.quantity AS matched_quantity
   FROM ((taomish.xceler_physicaltradeservice_internaldealticker xpi
     LEFT JOIN taomish.xceler_idt_transaction xit ON ((((xpi.idt_id)::text = (xit.idt_id)::text) AND ((xpi.tenant_id)::text = (xit.tenant_id)::text))))
     LEFT JOIN taomish.xceler_tradeplanningservice_plannedtradeobligation xpp ON ((((xit.buy_obligation_id)::text = (xpp.planned_obligation_id)::text) AND ((xpi.tenant_id)::text = (xpp.tenant_id)::text))))
  WHERE (((xpi.status)::text &lt;&gt; 'void'::text) AND (xpp.trade_transaction_type = 0))
UNION
 SELECT taomish.uuid_generate_v4() AS uuid,
    xpi.tenant_id,
    xpi.idt_id,
    xpi.purchase_leg_ref AS purchase_trade_id,
    xpp.planned_obligation_id AS sell_trade_id,
    xpp.commodity,
    xpi.quantity,
    xpi.trade_price AS idt_price,
    xit.updated_timestamp AS match_date,
    xpp.trade_transaction_type,
    xpp.trade_price,
    xpp.profitcenter,
    xpp.counterparty,
    xpp.delivery_end_date AS period_end_date,
    xit.quantity AS matched_quantity
   FROM ((taomish.xceler_physicaltradeservice_internaldealticker xpi
     LEFT JOIN taomish.xceler_idt_transaction xit ON ((((xpi.idt_id)::text = (xit.idt_id)::text) AND ((xpi.tenant_id)::text = (xit.tenant_id)::text))))
     LEFT JOIN taomish.xceler_tradeplanningservice_plannedtradeobligation xpp ON ((((xit.sell_obligation_id)::text = (xpp.planned_obligation_id)::text) AND ((xpi.tenant_id)::text = (xpp.tenant_id)::text))))
  WHERE (((xpi.status)::text &lt;&gt; 'void'::text) AND (xpp.trade_transaction_type = 1));</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-177">
        <createView fullDefinition="false" viewName="xceler_physicaltradeplanning_link">SELECT taomish.uuid_generate_v4() AS uuid,
    tpobbuy.tenant_id,
    tpobbuy.plan_id,
    tpobbuy.planned_obligation_id AS buy_trade_id,
    tpobbuy.commodity,
    tpobbuy.trader,
    tpobbuy.trade_price AS buy_trade_price,
    tpobbuy.trade_quantity AS buy_trade_quantity,
    tpobbuy.quantityuom AS buy_quantity_uom,
    tpobbuy.trade_date_time AS buy_trade_date,
    tpobsell.planned_obligation_id AS sell_trade_id,
    tpobbuy.counterparty AS buy_counter_party,
    tpobsell.trade_price AS sell_trade_price,
    tpobsell.trade_quantity AS sell_trade_quantity,
    tpobsell.quantityuom AS sell_quantity_uom,
    tpobsell.trade_date_time AS sell_trade_date,
    tpobbuy.load_location AS buy_load_location,
    tpobsell.unload_location AS sell_load_loaction,
    tpobbuy.broker,
    tpobbuy.profitcenter AS buy_profit_center,
    tpobsell.profitcenter AS sell_profit_center,
    tpstl.match_quantity
   FROM ((( SELECT tpob.uuid,
            tpob.created_by,
            tpob.created_timestamp,
            tpob.tenant_id,
            tpob.updated_by,
            tpob.updated_timestamp,
            tpob.broker,
            tpob.circle_string_seq,
            tpob.commodity,
            tpob.company,
            tpob.counterparty,
            tpob.crop_origin,
            tpob.delivery_date,
            tpob.delivery_end_date,
            tpob.delivery_start_date,
            tpob.grade,
            tpob.incoterm,
            tpob.location,
            tpob.obligation_date,
            tpob.plan_id,
            tpob.plan_uuid,
            tpob.planned_obligation_id,
            tpob.planned_quantity,
            tpob.price_type,
            tpob.profitcenter,
            tpob.quantityuom,
            tpob.reference_number,
            tpob.trade_date_time,
            tpob.trade_id,
            tpob.trade_obligation_id,
            tpob.trade_obligation_uuid,
            tpob.trade_price,
            tpob.trade_price_currency,
            tpob.trade_price_uom,
            tpob.trade_quantity,
            tpob.trade_transaction_type,
            tpob.trade_type,
            tpob.trade_uuid,
            tpob.no_of_units,
            tpob.remarks,
            tpob.brand,
            tpob.season,
            tpob.load_location,
            tpob.unload_location,
            tpob.payment_term,
            tpob.trader,
            tpob.fx_rate,
            tpob.provisional_fx_rate,
            tpob.provisional_price_percentage,
            tpob.provisional_price_type,
            tpob.provisional_price,
            tpob.tradesettlementcurrency,
            tpob.trade_settlement_currency,
            tpob.premiun_cost,
            tpob.discount_cost,
            tpob.total_trade_qty,
            tpob.broker_reference_number,
            tpob.provisional_price_uom,
            tpob.provisional_price_currency,
            tpob.planned_obligation_status,
            tpob.parent_planned_obligation,
            tpob.shipment_month,
            tpob.external_record,
            tpob.delivery_term_clause,
            tpob.payment_terms_clause,
            tpob.quantity_terms_clause,
            tpob.quality_terms_clause,
            tpob.pricing_terms_clause,
            tpob.broker_reference,
            tpob.comments,
            tpob.trade_settlement_reference,
            tpob.doc_by_pass_id,
            tpob.package_type,
            tpob.external_package,
            tpob.internal_package,
            tpob.internal_package_unit,
            tpob.external_package_unit,
            tpob.balance_quantity,
            tpob.contract_term,
            tpob.provisional_pricing,
            tpob.weight_basis,
            tpob.tolerance_value,
            tpob.external_reference,
            tpob.price_ticker,
            tpob.special_instructions,
            tpob.match_type,
            tpob.settlement_tolerance_value
           FROM taomish.xceler_tradeplanningservice_plannedtradeobligation tpob
          WHERE (tpob.trade_transaction_type = 0)) tpobbuy
     JOIN ( SELECT tpstl_1.uuid,
            tpstl_1.created_by,
            tpstl_1.created_timestamp,
            tpstl_1.tenant_id,
            tpstl_1.updated_by,
            tpstl_1.updated_timestamp,
            tpstl_1.planning_id,
            tpstl_1.planned_obligation_id,
            tpstl_1.linked_with,
            tpstl_1.match_quantity,
            tpstl_1.link_status,
            tpstl_1.buy_actualization_id,
            tpstl_1.sell_actualization_id,
            tpstl_1.allocated_quantity,
            tpstl_1.bl_no,
            tpstl_1.split_sequence_number,
            tpstl_1.status
           FROM taomish.xceler_tradeplanningservice_tradelink tpstl_1) tpstl ON (((tpobbuy.trade_obligation_id)::text = (tpstl.planned_obligation_id)::text)))
     JOIN ( SELECT tpob.uuid,
            tpob.created_by,
            tpob.created_timestamp,
            tpob.tenant_id,
            tpob.updated_by,
            tpob.updated_timestamp,
            tpob.broker,
            tpob.circle_string_seq,
            tpob.commodity,
            tpob.company,
            tpob.counterparty,
            tpob.crop_origin,
            tpob.delivery_date,
            tpob.delivery_end_date,
            tpob.delivery_start_date,
            tpob.grade,
            tpob.incoterm,
            tpob.location,
            tpob.obligation_date,
            tpob.plan_id,
            tpob.plan_uuid,
            tpob.planned_obligation_id,
            tpob.planned_quantity,
            tpob.price_type,
            tpob.profitcenter,
            tpob.quantityuom,
            tpob.reference_number,
            tpob.trade_date_time,
            tpob.trade_id,
            tpob.trade_obligation_id,
            tpob.trade_obligation_uuid,
            tpob.trade_price,
            tpob.trade_price_currency,
            tpob.trade_price_uom,
            tpob.trade_quantity,
            tpob.trade_transaction_type,
            tpob.trade_type,
            tpob.trade_uuid,
            tpob.no_of_units,
            tpob.remarks,
            tpob.brand,
            tpob.season,
            tpob.load_location,
            tpob.unload_location,
            tpob.payment_term,
            tpob.trader,
            tpob.fx_rate,
            tpob.provisional_fx_rate,
            tpob.provisional_price_percentage,
            tpob.provisional_price_type,
            tpob.provisional_price,
            tpob.tradesettlementcurrency,
            tpob.trade_settlement_currency,
            tpob.premiun_cost,
            tpob.discount_cost,
            tpob.total_trade_qty,
            tpob.broker_reference_number,
            tpob.provisional_price_uom,
            tpob.provisional_price_currency,
            tpob.planned_obligation_status,
            tpob.parent_planned_obligation,
            tpob.shipment_month,
            tpob.external_record,
            tpob.delivery_term_clause,
            tpob.payment_terms_clause,
            tpob.quantity_terms_clause,
            tpob.quality_terms_clause,
            tpob.pricing_terms_clause,
            tpob.broker_reference,
            tpob.comments,
            tpob.trade_settlement_reference,
            tpob.doc_by_pass_id,
            tpob.package_type,
            tpob.external_package,
            tpob.internal_package,
            tpob.internal_package_unit,
            tpob.external_package_unit,
            tpob.balance_quantity,
            tpob.contract_term,
            tpob.provisional_pricing,
            tpob.weight_basis,
            tpob.tolerance_value,
            tpob.external_reference,
            tpob.price_ticker,
            tpob.special_instructions,
            tpob.match_type,
            tpob.settlement_tolerance_value
           FROM taomish.xceler_tradeplanningservice_plannedtradeobligation tpob
          WHERE (tpob.trade_transaction_type = 1)) tpobsell ON (((tpobsell.trade_obligation_id)::text = (tpstl.linked_with)::text)))
  WHERE ((tpobbuy.profitcenter)::text &lt;&gt; (tpobsell.profitcenter)::text);</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-178">
        <createView fullDefinition="false" viewName="vw_xceler_report_benchmark_report">SELECT taomish.uuid_generate_v4() AS uuid,
    tab.voyage_no AS bookingid,
    tab.vessel_name AS vesselname,
    tab.tenant_id,
    tab.freight_capacity AS freightcapacity,
    tab.plan_id AS planid,
    NULL::text AS pic,
    tab.loadport,
    tab.unloadport,
    NULL::text AS laycandate,
    NULL::text AS etato,
    tab.allocation_date,
    NULL::text AS sailingdate,
    tab.buy_planned_obligation_id AS purchasecontractid,
    tab.sell_planned_obligation_id AS salecontractid,
    tab.sell_commodity AS commodity,
    tab.sell_counterparty AS buyer,
    tab.buy_trade_price AS buyprice,
    tab.buy_price_currency AS buypricecurrency,
    tab.buy_planned_quantity AS buyquantity,
    tab.buy_quantityuom AS buyquantityuom,
    tab.buy_created_timestamp AS buydate,
    tab.buy_counterparty AS supplier,
    tab.sell_trade_price AS sellprice,
    tab.sell_price_currency AS sellpricecurrency,
    tab.match_quantity AS sellquantity,
    tab.sell_price_uom AS sellquantityuom,
    tab.sell_created_timestamp AS selldate,
    tab.buy_broker AS buybroker,
    tab.sell_broker AS sellbroker,
    (tab.bl_number)::character varying(255) AS buyblnumber,
    NULL::text AS sellblnumber,
    tab.allocated_quantity AS buyloadquantity,
    tab.allocated_quantity AS sellloadquantity,
    tab.profitcenter,
    tab.deliveryenddate,
    (tab.stowage_no)::character varying(255) AS stowage,
    tab.buy_incoterm,
    tab.sell_incoterm,
    tab.origin,
    tab.sell_company,
    (tab.match_type)::text AS match_type,
    tab.sell_profitcenter,
    tab.sell_price_type,
    tab.voyage_no,
    tab.match_quantity,
    (tab.buy_trade_price)::numeric AS conversion_price,
    tab.bl_date
   FROM ((
                 SELECT xtp2.tenant_id,
                    xtp2.plan_id,
                    xtp2.trade_id AS sell_planned_obligation_id,
                    xtp2.counterparty AS sell_counterparty,
                    xtp2.commodity AS sell_commodity,
                    xtp2.planned_quantity AS sell_planned_quantity,
                    xtp2.trade_price AS sell_trade_price,
                    xtp2.trade_price_currency AS sell_price_currency,
                    xtp2.trade_price_uom AS sell_price_uom,
                    xtp2.trade_date_time AS sell_created_timestamp,
                    xtp1.counterparty AS buy_counterparty,
                    xtp1.planned_quantity AS buy_planned_quantity,
                    xtp1.quantityuom AS buy_quantityuom,
                    xtp1.trade_price AS buy_trade_price,
                    xtp1.trade_price_currency AS buy_price_currency,
                    xtp1.trade_date_time AS buy_created_timestamp,
                    xtp1.trade_id AS buy_planned_obligation_id,
                    xtt.match_quantity,
                    xtt.match_quantity AS allocated_quantity,
                    NULL::text AS stowage_no,
                    NULL::text AS bl_number,
                    NULL::timestamp without time zone AS bl_date,
                    xts.vessel_name,
                    xts.freight_capacity,
                    xtp1.load_location AS loadport,
                    xtp1.unload_location AS unloadport,
                    xts.voyage_no,
                        CASE
                            WHEN (xts.created_timestamp IS NOT NULL) THEN xts.created_timestamp
                            ELSE xtt.updated_timestamp
                        END AS allocation_date,
                    xtp1.profitcenter,
                    xtp1.price_type AS sell_price_type,
                    xtp1.incoterm AS sell_incoterm,
                    xtp2.incoterm AS buy_incoterm,
                    xtp1.broker AS buy_broker,
                    xtp2.broker AS sell_broker,
                    xtp1.delivery_end_date AS deliveryenddate,
                    xtp1.crop_origin AS origin,
                    xtp2.company AS sell_company,
                    xtp1.match_type,
                    xtp2.profitcenter AS sell_profitcenter
                   FROM ((((taomish.xceler_tradeplanningservice_tradelink xtt
                     LEFT JOIN ( SELECT xtp.uuid,
                            xtp.created_by,
                            xtp.created_timestamp,
                            xtp.tenant_id,
                            xtp.updated_by,
                            xtp.updated_timestamp,
                            xtp.broker,
                            xtp.circle_string_seq,
                            xtp.commodity,
                            xtp.company,
                            xtp.counterparty,
                            xtp.crop_origin,
                            xtp.delivery_date,
                            xtp.delivery_end_date,
                            xtp.delivery_start_date,
                            xtp.grade,
                            xtp.incoterm,
                            xtp.location,
                            xtp.obligation_date,
                            xtp.plan_id,
                            xtp.plan_uuid,
                            xtp.planned_obligation_id,
                            xtp.planned_quantity,
                            xtp.price_type,
                            xtp.profitcenter,
                            xtp.quantityuom,
                            xtp.reference_number,
                            xtp.trade_date_time,
                            xtp.trade_id,
                            xtp.trade_obligation_id,
                            xtp.trade_obligation_uuid,
                            xtp.trade_price,
                            xtp.trade_price_currency,
                            xtp.trade_price_uom,
                            xtp.trade_quantity,
                            xtp.trade_transaction_type,
                            xtp.trade_type,
                            xtp.trade_uuid,
                            xtp.no_of_units,
                            xtp.remarks,
                            xtp.brand,
                            xtp.season,
                            xtp.load_location,
                            xtp.unload_location,
                            xtp.payment_term,
                            xtp.trader,
                            xtp.fx_rate,
                            xtp.provisional_fx_rate,
                            xtp.provisional_price_percentage,
                            xtp.provisional_price_type,
                            xtp.provisional_price,
                            xtp.tradesettlementcurrency,
                            xtp.trade_settlement_currency,
                            xtp.premiun_cost,
                            xtp.discount_cost,
                            xtp.total_trade_qty,
                            xtp.broker_reference_number,
                            xtp.provisional_price_uom,
                            xtp.provisional_price_currency,
                            xtp.planned_obligation_status,
                            xtp.parent_planned_obligation,
                            xtp.shipment_month,
                            xtp.external_record,
                            xtp.delivery_term_clause,
                            xtp.payment_terms_clause,
                            xtp.quantity_terms_clause,
                            xtp.quality_terms_clause,
                            xtp.pricing_terms_clause,
                            xtp.broker_reference,
                            xtp.comments,
                            xtp.trade_settlement_reference,
                            xtp.doc_by_pass_id,
                            xtp.package_type,
                            xtp.balance_quantity,
                            xtp.contract_term,
                            xtp.external_package,
                            xtp.external_package_unit,
                            xtp.internal_package_unit,
                            xtp.internal_package,
                            xtp.provisional_pricing,
                            xtp.weight_basis,
                            xtp.tolerance_value,
                            xtp.external_reference,
                            xtp.price_ticker,
                            xtp.special_instructions,
                            xtp.match_type,
                            xtp.settlement_tolerance_value,
                            xtp.obligation_state,
                            xtp.quotation_period_clause
                           FROM taomish.xceler_tradeplanningservice_plannedtradeobligation xtp
                          WHERE (((xtp.planned_obligation_status)::text = 'active'::text) AND (xtp.external_record = false) AND ((xtp.trade_type)::text = 'Physical'::text))) xtp1 ON ((((xtp1.tenant_id)::text = (xtt.tenant_id)::text) AND ((xtp1.planned_obligation_id)::text = (xtt.planned_obligation_id)::text))))
                     LEFT JOIN ( SELECT xtps.uuid,
                            xtps.created_by,
                            xtps.created_timestamp,
                            xtps.tenant_id,
                            xtps.updated_by,
                            xtps.updated_timestamp,
                            xtps.broker,
                            xtps.circle_string_seq,
                            xtps.commodity,
                            xtps.company,
                            xtps.counterparty,
                            xtps.crop_origin,
                            xtps.delivery_date,
                            xtps.delivery_end_date,
                            xtps.delivery_start_date,
                            xtps.grade,
                            xtps.incoterm,
                            xtps.location,
                            xtps.obligation_date,
                            xtps.plan_id,
                            xtps.plan_uuid,
                            xtps.planned_obligation_id,
                            xtps.planned_quantity,
                            xtps.price_type,
                            xtps.profitcenter,
                            xtps.quantityuom,
                            xtps.reference_number,
                            xtps.trade_date_time,
                            xtps.trade_id,
                            xtps.trade_obligation_id,
                            xtps.trade_obligation_uuid,
                            xtps.trade_price,
                            xtps.trade_price_currency,
                            xtps.trade_price_uom,
                            xtps.trade_quantity,
                            xtps.trade_transaction_type,
                            xtps.trade_type,
                            xtps.trade_uuid,
                            xtps.no_of_units,
                            xtps.remarks,
                            xtps.brand,
                            xtps.season,
                            xtps.load_location,
                            xtps.unload_location,
                            xtps.payment_term,
                            xtps.trader,
                            xtps.fx_rate,
                            xtps.provisional_fx_rate,
                            xtps.provisional_price_percentage,
                            xtps.provisional_price_type,
                            xtps.provisional_price,
                            xtps.tradesettlementcurrency,
                            xtps.trade_settlement_currency,
                            xtps.premiun_cost,
                            xtps.discount_cost,
                            xtps.total_trade_qty,
                            xtps.broker_reference_number,
                            xtps.provisional_price_uom,
                            xtps.provisional_price_currency,
                            xtps.planned_obligation_status,
                            xtps.parent_planned_obligation,
                            xtps.shipment_month,
                            xtps.external_record,
                            xtps.delivery_term_clause,
                            xtps.payment_terms_clause,
                            xtps.quantity_terms_clause,
                            xtps.quality_terms_clause,
                            xtps.pricing_terms_clause,
                            xtps.broker_reference,
                            xtps.comments,
                            xtps.trade_settlement_reference,
                            xtps.doc_by_pass_id,
                            xtps.package_type,
                            xtps.balance_quantity,
                            xtps.contract_term,
                            xtps.external_package,
                            xtps.external_package_unit,
                            xtps.internal_package_unit,
                            xtps.internal_package,
                            xtps.provisional_pricing,
                            xtps.weight_basis,
                            xtps.tolerance_value,
                            xtps.external_reference,
                            xtps.price_ticker,
                            xtps.special_instructions,
                            xtps.match_type,
                            xtps.settlement_tolerance_value,
                            xtps.obligation_state,
                            xtps.quotation_period_clause
                           FROM taomish.xceler_tradeplanningservice_plannedtradeobligation xtps
                          WHERE (((xtps.planned_obligation_status)::text = 'active'::text) AND ((xtps.trade_type)::text = 'Physical'::text) AND (xtps.external_record = false))) xtp2 ON ((((xtp2.tenant_id)::text = (xtt.tenant_id)::text) AND ((xtp2.planned_obligation_id)::text = (xtt.linked_with)::text))))
                     LEFT JOIN taomish.xceler_transportallocationservice_seafreightdetails xts ON ((((xts.tenant_id)::text = (xts.tenant_id)::text) AND ((xts.plan_id)::text = (xtt.planning_id)::text))))
                     LEFT JOIN taomish.xceler_transportallocationservice_seafreightloaddetails xts2 ON ((((xts2.tenant_id)::text = (xtt.tenant_id)::text) AND ((xts2.vessel_id)::text = (xts.vessel_id)::text))))
                UNION
                 SELECT xtp.tenant_id,
                    xtps.plan_id,
                    xtps.trade_id AS sell_planned_obligation_id,
                    xtps.counterparty AS sell_counterparty,
                    xtps.commodity AS sell_commodity,
                    xtps.planned_quantity AS sell_planned_quantity,
                    xtps.trade_price AS sell_trade_price,
                    xtps.trade_price_currency AS sell_price_currency,
                    xtps.trade_price_uom AS sell_price_uom,
                    xtps.trade_date_time AS sell_created_timestamp,
                    xtpb.counterparty AS buy_counterparty,
                    xtpb.planned_quantity AS buy_planned_quantity,
                    xtpb.quantityuom AS buy_quantityuom,
                    xtpb.trade_price AS buy_trade_price,
                    xtpb.trade_price_currency AS buy_price_currency,
                    xtpb.trade_date_time AS buy_created_timestamp,
                    xtpb.trade_id AS buy_planned_obligation_id,
                    xtp.match_quantity,
                    xtp.match_quantity AS allocated_quantity,
                    NULL::text AS stowage_no,
                    NULL::text AS bl_number,
                    NULL::timestamp without time zone AS bl_date,
                    xts.vessel_name,
                    NULL::double precision AS freight_capacity,
                    xtpb.load_location AS loadport,
                    xtpb.unload_location AS unloadport,
                    xts.voyage_no,
                    xtp.updated_timestamp AS allocation_date,
                    xtpb.profitcenter,
                    xtpb.price_type AS sell_price_type,
                    xtps.incoterm AS sell_incoterm,
                    xtpb.incoterm AS buy_incoterm,
                    xtpb.broker AS buy_broker,
                    xtps.broker AS sell_broker,
                    xtpb.delivery_end_date AS deliveryenddate,
                    xtpb.crop_origin AS origin,
                    xtps.company AS sell_company,
                    xtps.match_type,
                    xtps.profitcenter AS sell_profitcenter
                   FROM (((( SELECT xtpb_1.uuid,
                            xtpb_1.created_by,
                            xtpb_1.created_timestamp,
                            xtpb_1.tenant_id,
                            xtpb_1.updated_by,
                            xtpb_1.updated_timestamp,
                            xtpb_1.broker,
                            xtpb_1.circle_string_seq,
                            xtpb_1.commodity,
                            xtpb_1.company,
                            xtpb_1.counterparty,
                            xtpb_1.crop_origin,
                            xtpb_1.delivery_date,
                            xtpb_1.delivery_end_date,
                            xtpb_1.delivery_start_date,
                            xtpb_1.grade,
                            xtpb_1.incoterm,
                            xtpb_1.location,
                            xtpb_1.obligation_date,
                            xtpb_1.plan_id,
                            xtpb_1.plan_uuid,
                            xtpb_1.planned_obligation_id,
                            xtpb_1.planned_quantity,
                            xtpb_1.price_type,
                            xtpb_1.profitcenter,
                            xtpb_1.quantityuom,
                            xtpb_1.reference_number,
                            xtpb_1.trade_date_time,
                            xtpb_1.trade_id,
                            xtpb_1.trade_obligation_id,
                            xtpb_1.trade_obligation_uuid,
                            xtpb_1.trade_price,
                            xtpb_1.trade_price_currency,
                            xtpb_1.trade_price_uom,
                            xtpb_1.trade_quantity,
                            xtpb_1.trade_transaction_type,
                            xtpb_1.trade_type,
                            xtpb_1.trade_uuid,
                            xtpb_1.no_of_units,
                            xtpb_1.remarks,
                            xtpb_1.brand,
                            xtpb_1.season,
                            xtpb_1.load_location,
                            xtpb_1.unload_location,
                            xtpb_1.payment_term,
                            xtpb_1.trader,
                            xtpb_1.fx_rate,
                            xtpb_1.provisional_fx_rate,
                            xtpb_1.provisional_price_percentage,
                            xtpb_1.provisional_price_type,
                            xtpb_1.provisional_price,
                            xtpb_1.tradesettlementcurrency,
                            xtpb_1.trade_settlement_currency,
                            xtpb_1.premiun_cost,
                            xtpb_1.discount_cost,
                            xtpb_1.total_trade_qty,
                            xtpb_1.broker_reference_number,
                            xtpb_1.provisional_price_uom,
                            xtpb_1.provisional_price_currency,
                            xtpb_1.planned_obligation_status,
                            xtpb_1.parent_planned_obligation,
                            xtpb_1.shipment_month,
                            xtpb_1.external_record,
                            xtpb_1.delivery_term_clause,
                            xtpb_1.payment_terms_clause,
                            xtpb_1.quantity_terms_clause,
                            xtpb_1.quality_terms_clause,
                            xtpb_1.pricing_terms_clause,
                            xtpb_1.broker_reference,
                            xtpb_1.comments,
                            xtpb_1.trade_settlement_reference,
                            xtpb_1.doc_by_pass_id,
                            xtpb_1.package_type,
                            xtpb_1.balance_quantity,
                            xtpb_1.contract_term,
                            xtpb_1.external_package,
                            xtpb_1.external_package_unit,
                            xtpb_1.internal_package_unit,
                            xtpb_1.internal_package,
                            xtpb_1.provisional_pricing,
                            xtpb_1.weight_basis,
                            xtpb_1.tolerance_value,
                            xtpb_1.external_reference,
                            xtpb_1.price_ticker,
                            xtpb_1.special_instructions,
                            xtpb_1.match_type,
                            xtpb_1.settlement_tolerance_value,
                            xtpb_1.obligation_state,
                            xtpb_1.quotation_period_clause
                           FROM taomish.xceler_tradeplanningservice_plannedtradeobligation xtpb_1
                          WHERE ((xtpb_1.trade_transaction_type = 0) AND ((xtpb_1.trade_type)::text = 'Physical'::text) AND ((xtpb_1.planned_obligation_status)::text = 'active'::text) AND ((xtpb_1.match_type)::text = ANY (ARRAY[('String'::character varying)::text, ('Circle'::character varying)::text])) AND (xtpb_1.external_record = false))) xtpb
                     LEFT JOIN ( SELECT xtps_1.uuid,
                            xtps_1.created_by,
                            xtps_1.created_timestamp,
                            xtps_1.tenant_id,
                            xtps_1.updated_by,
                            xtps_1.updated_timestamp,
                            xtps_1.broker,
                            xtps_1.circle_string_seq,
                            xtps_1.commodity,
                            xtps_1.company,
                            xtps_1.counterparty,
                            xtps_1.crop_origin,
                            xtps_1.delivery_date,
                            xtps_1.delivery_end_date,
                            xtps_1.delivery_start_date,
                            xtps_1.grade,
                            xtps_1.incoterm,
                            xtps_1.location,
                            xtps_1.obligation_date,
                            xtps_1.plan_id,
                            xtps_1.plan_uuid,
                            xtps_1.planned_obligation_id,
                            xtps_1.planned_quantity,
                            xtps_1.price_type,
                            xtps_1.profitcenter,
                            xtps_1.quantityuom,
                            xtps_1.reference_number,
                            xtps_1.trade_date_time,
                            xtps_1.trade_id,
                            xtps_1.trade_obligation_id,
                            xtps_1.trade_obligation_uuid,
                            xtps_1.trade_price,
                            xtps_1.trade_price_currency,
                            xtps_1.trade_price_uom,
                            xtps_1.trade_quantity,
                            xtps_1.trade_transaction_type,
                            xtps_1.trade_type,
                            xtps_1.trade_uuid,
                            xtps_1.no_of_units,
                            xtps_1.remarks,
                            xtps_1.brand,
                            xtps_1.season,
                            xtps_1.load_location,
                            xtps_1.unload_location,
                            xtps_1.payment_term,
                            xtps_1.trader,
                            xtps_1.fx_rate,
                            xtps_1.provisional_fx_rate,
                            xtps_1.provisional_price_percentage,
                            xtps_1.provisional_price_type,
                            xtps_1.provisional_price,
                            xtps_1.tradesettlementcurrency,
                            xtps_1.trade_settlement_currency,
                            xtps_1.premiun_cost,
                            xtps_1.discount_cost,
                            xtps_1.total_trade_qty,
                            xtps_1.broker_reference_number,
                            xtps_1.provisional_price_uom,
                            xtps_1.provisional_price_currency,
                            xtps_1.planned_obligation_status,
                            xtps_1.parent_planned_obligation,
                            xtps_1.shipment_month,
                            xtps_1.external_record,
                            xtps_1.delivery_term_clause,
                            xtps_1.payment_terms_clause,
                            xtps_1.quantity_terms_clause,
                            xtps_1.quality_terms_clause,
                            xtps_1.pricing_terms_clause,
                            xtps_1.broker_reference,
                            xtps_1.comments,
                            xtps_1.trade_settlement_reference,
                            xtps_1.doc_by_pass_id,
                            xtps_1.package_type,
                            xtps_1.balance_quantity,
                            xtps_1.contract_term,
                            xtps_1.external_package,
                            xtps_1.external_package_unit,
                            xtps_1.internal_package_unit,
                            xtps_1.internal_package,
                            xtps_1.provisional_pricing,
                            xtps_1.weight_basis,
                            xtps_1.tolerance_value,
                            xtps_1.external_reference,
                            xtps_1.price_ticker,
                            xtps_1.special_instructions,
                            xtps_1.match_type,
                            xtps_1.settlement_tolerance_value,
                            xtps_1.obligation_state,
                            xtps_1.quotation_period_clause
                           FROM taomish.xceler_tradeplanningservice_plannedtradeobligation xtps_1
                          WHERE ((xtps_1.trade_transaction_type = 1) AND ((xtps_1.planned_obligation_status)::text = 'active'::text) AND ((xtps_1.trade_type)::text = 'Physical'::text) AND ((xtps_1.match_type)::text = ANY (ARRAY[('String'::character varying)::text, ('Circle'::character varying)::text])) AND (xtps_1.external_record = false))) xtps ON ((((xtpb.plan_id)::text = (xtps.plan_id)::text) AND ((xtps.tenant_id)::text = (xtpb.tenant_id)::text))))
                     LEFT JOIN taomish.xceler_tradeplanningservice_physicaltradeplan xtp ON ((((xtp.planning_id)::text = (xtpb.plan_id)::text) AND ((xtp.tenant_id)::text = (xtpb.tenant_id)::text))))
                     LEFT JOIN taomish.xceler_transportallocationservice_seafreightdetails xts ON ((((xts.tenant_id)::text = (xtpb.tenant_id)::text) AND ((xts.plan_id)::text = (xtpb.plan_id)::text))))
        ) UNION ALL
         SELECT xtp1.tenant_id,
            xtp1.plan_id,
            xtp1.trade_id AS sell_planned_obligation_id,
            xtp1.counterparty AS sell_counterparty,
            xtp1.commodity AS sell_commodity,
            xtp1.planned_quantity AS sell_planned_quantity,
            xtp1.trade_price AS sell_trade_price,
            xtp1.trade_price_currency AS sell_price_currency,
            xtp1.trade_price_uom AS sell_price_uom,
            xtp1.trade_date_time AS sell_created_timestamp,
            NULL::character varying AS buy_counterparty,
            ((xtt.quantity -&gt;&gt; 'unit'::text))::double precision AS buy_planned_quantity,
            xtp1.quantityuom AS buy_quantityuom,
            xtp2.trade_price AS buy_trade_price,
            xtp1.trade_price_currency AS buy_price_currency,
            xtp1.trade_date_time AS buy_created_timestamp,
            xtp2.trade_id AS buy_planned_obligation_id,
            ((xtt.quantity -&gt;&gt; 'unit'::text))::double precision AS match_quantity,
            ((xtt.quantity -&gt;&gt; 'unit'::text))::double precision AS allocated_quantity,
            NULL::text AS stowage_no,
            xi.inventory_name AS bl_number,
            xtt.created_timestamp AS bl_date,
            xts.vessel_name,
            xts.freight_capacity,
            xi.storage_name AS loadport,
            xtp1.unload_location AS unloadport,
            xts.voyage_no,
                CASE
                    WHEN (xts.created_timestamp IS NOT NULL) THEN xts.created_timestamp
                    ELSE xtt.created_timestamp
                END AS allocation_date,
            xtp2.profitcenter,
            xtp1.price_type AS sell_price_type,
            xtp1.incoterm AS sell_incoterm,
            xtp1.incoterm AS buy_incoterm,
            xtp1.broker AS buy_broker,
            xtp1.broker AS sell_broker,
            xtp1.delivery_end_date AS deliveryenddate,
            xtp1.crop_origin AS origin,
            xtp1.company AS sell_company,
            'stock'::text AS allocation_type,
            xtp1.profitcenter AS sell_profitcenter
           FROM (((((taomish.xceler_stock_movement xtt
             LEFT JOIN taomish.xceler_sell_stock xss ON ((((xss.sell_stock_id)::text = (xtt.sell_stock_id)::text) AND ((xss.tenant_id)::text = (xtt.tenant_id)::text))))
             LEFT JOIN taomish.xceler_inventory xi ON ((((xi.inventory_id)::text = (xss.transfer_from_id)::text) AND ((xi.tenant_id)::text = (xss.tenant_id)::text))))
             LEFT JOIN ( SELECT xtp.uuid,
                    xtp.created_by,
                    xtp.created_timestamp,
                    xtp.tenant_id,
                    xtp.updated_by,
                    xtp.updated_timestamp,
                    xtp.broker,
                    xtp.circle_string_seq,
                    xtp.commodity,
                    xtp.company,
                    xtp.counterparty,
                    xtp.crop_origin,
                    xtp.delivery_date,
                    xtp.delivery_end_date,
                    xtp.delivery_start_date,
                    xtp.grade,
                    xtp.incoterm,
                    xtp.location,
                    xtp.obligation_date,
                    xtp.plan_id,
                    xtp.plan_uuid,
                    xtp.planned_obligation_id,
                    xtp.planned_quantity,
                    xtp.price_type,
                    xtp.profitcenter,
                    xtp.quantityuom,
                    xtp.reference_number,
                    xtp.trade_date_time,
                    xtp.trade_id,
                    xtp.trade_obligation_id,
                    xtp.trade_obligation_uuid,
                    xtp.trade_price,
                    xtp.trade_price_currency,
                    xtp.trade_price_uom,
                    xtp.trade_quantity,
                    xtp.trade_transaction_type,
                    xtp.trade_type,
                    xtp.trade_uuid,
                    xtp.no_of_units,
                    xtp.remarks,
                    xtp.brand,
                    xtp.season,
                    xtp.load_location,
                    xtp.unload_location,
                    xtp.payment_term,
                    xtp.trader,
                    xtp.fx_rate,
                    xtp.provisional_fx_rate,
                    xtp.provisional_price_percentage,
                    xtp.provisional_price_type,
                    xtp.provisional_price,
                    xtp.tradesettlementcurrency,
                    xtp.trade_settlement_currency,
                    xtp.premiun_cost,
                    xtp.discount_cost,
                    xtp.total_trade_qty,
                    xtp.broker_reference_number,
                    xtp.provisional_price_uom,
                    xtp.provisional_price_currency,
                    xtp.planned_obligation_status,
                    xtp.parent_planned_obligation,
                    xtp.shipment_month,
                    xtp.external_record,
                    xtp.delivery_term_clause,
                    xtp.payment_terms_clause,
                    xtp.quantity_terms_clause,
                    xtp.quality_terms_clause,
                    xtp.pricing_terms_clause,
                    xtp.broker_reference,
                    xtp.comments,
                    xtp.trade_settlement_reference,
                    xtp.doc_by_pass_id,
                    xtp.package_type,
                    xtp.balance_quantity,
                    xtp.contract_term,
                    xtp.external_package,
                    xtp.external_package_unit,
                    xtp.internal_package_unit,
                    xtp.internal_package,
                    xtp.provisional_pricing,
                    xtp.weight_basis,
                    xtp.tolerance_value,
                    xtp.external_reference,
                    xtp.price_ticker,
                    xtp.special_instructions,
                    xtp.match_type,
                    xtp.settlement_tolerance_value,
                    xtp.obligation_state,
                    xtp.quotation_period_clause
                   FROM taomish.xceler_tradeplanningservice_plannedtradeobligation xtp
                  WHERE (((xtp.planned_obligation_status)::text = 'active'::text) AND (xtp.external_record = false) AND ((xtp.trade_type)::text = 'Physical'::text))) xtp2 ON ((((xtp2.tenant_id)::text = (xtt.tenant_id)::text) AND ((xtp2.planned_obligation_id)::text = (xtt.transfer_from)::text))))
             LEFT JOIN ( SELECT xtp.uuid,
                    xtp.created_by,
                    xtp.created_timestamp,
                    xtp.tenant_id,
                    xtp.updated_by,
                    xtp.updated_timestamp,
                    xtp.broker,
                    xtp.circle_string_seq,
                    xtp.commodity,
                    xtp.company,
                    xtp.counterparty,
                    xtp.crop_origin,
                    xtp.delivery_date,
                    xtp.delivery_end_date,
                    xtp.delivery_start_date,
                    xtp.grade,
                    xtp.incoterm,
                    xtp.location,
                    xtp.obligation_date,
                    xtp.plan_id,
                    xtp.plan_uuid,
                    xtp.planned_obligation_id,
                    xtp.planned_quantity,
                    xtp.price_type,
                    xtp.profitcenter,
                    xtp.quantityuom,
                    xtp.reference_number,
                    xtp.trade_date_time,
                    xtp.trade_id,
                    xtp.trade_obligation_id,
                    xtp.trade_obligation_uuid,
                    xtp.trade_price,
                    xtp.trade_price_currency,
                    xtp.trade_price_uom,
                    xtp.trade_quantity,
                    xtp.trade_transaction_type,
                    xtp.trade_type,
                    xtp.trade_uuid,
                    xtp.no_of_units,
                    xtp.remarks,
                    xtp.brand,
                    xtp.season,
                    xtp.load_location,
                    xtp.unload_location,
                    xtp.payment_term,
                    xtp.trader,
                    xtp.fx_rate,
                    xtp.provisional_fx_rate,
                    xtp.provisional_price_percentage,
                    xtp.provisional_price_type,
                    xtp.provisional_price,
                    xtp.tradesettlementcurrency,
                    xtp.trade_settlement_currency,
                    xtp.premiun_cost,
                    xtp.discount_cost,
                    xtp.total_trade_qty,
                    xtp.broker_reference_number,
                    xtp.provisional_price_uom,
                    xtp.provisional_price_currency,
                    xtp.planned_obligation_status,
                    xtp.parent_planned_obligation,
                    xtp.shipment_month,
                    xtp.external_record,
                    xtp.delivery_term_clause,
                    xtp.payment_terms_clause,
                    xtp.quantity_terms_clause,
                    xtp.quality_terms_clause,
                    xtp.pricing_terms_clause,
                    xtp.broker_reference,
                    xtp.comments,
                    xtp.trade_settlement_reference,
                    xtp.doc_by_pass_id,
                    xtp.package_type,
                    xtp.balance_quantity,
                    xtp.contract_term,
                    xtp.external_package,
                    xtp.external_package_unit,
                    xtp.internal_package_unit,
                    xtp.internal_package,
                    xtp.provisional_pricing,
                    xtp.weight_basis,
                    xtp.tolerance_value,
                    xtp.external_reference,
                    xtp.price_ticker,
                    xtp.special_instructions,
                    xtp.match_type,
                    xtp.settlement_tolerance_value,
                    xtp.obligation_state,
                    xtp.quotation_period_clause
                   FROM taomish.xceler_tradeplanningservice_plannedtradeobligation xtp
                  WHERE (((xtp.planned_obligation_status)::text = 'active'::text) AND (xtp.external_record = false) AND ((xtp.trade_type)::text = 'Physical'::text))) xtp1 ON ((((xtp1.tenant_id)::text = (xtt.tenant_id)::text) AND ((xtp1.planned_obligation_id)::text = (xtt.transfer_to)::text))))
             LEFT JOIN taomish.xceler_transportallocationservice_seafreightdetails xts ON ((((xts.tenant_id)::text = (xts.tenant_id)::text) AND ((xts.plan_id)::text = (xtp1.plan_id)::text))))
          WHERE (((xtt.type)::text = 'Sales-Draw'::text) AND ((xtt.status)::text &lt;&gt; 'Deleted'::text) AND ((xtp1.trade_type)::text &lt;&gt; 'InterCompany'::text))) tab
  WHERE ((tab.sell_planned_obligation_id IS NOT NULL) AND (tab.buy_planned_obligation_id IS NOT NULL) AND (tab.allocation_date IS NOT NULL));</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-179">
        <createView fullDefinition="false" viewName="xceler_report_stringallocation">SELECT taomish.uuid_generate_v4() AS uuid,
    xtp.tenant_id,
    xtps.company AS sell_company,
    xtpb.trade_id AS purchase_contract_id,
    xtps.trade_id AS sale_contract_id,
    xtpb.trade_date_time AS buy_date,
    xtps.trade_date_time AS sell_date,
    xtpb.profitcenter AS buy_profitcenter,
    xtps.profitcenter AS sell_profitcenter,
    xtt.updated_timestamp AS allocation_date,
    xtps.commodity,
    xtp.match_type AS allocation_type,
    xtt.match_quantity,
    xtpb.quantityuom,
    xtpb.trade_price AS buy_price,
    xtps.trade_price AS sell_price,
    xtps.counterparty AS buyer,
    xtpb.counterparty AS supplier
   FROM (((( SELECT xtpb_1.uuid,
            xtpb_1.created_by,
            xtpb_1.created_timestamp,
            xtpb_1.tenant_id,
            xtpb_1.updated_by,
            xtpb_1.updated_timestamp,
            xtpb_1.broker,
            xtpb_1.circle_string_seq,
            xtpb_1.commodity,
            xtpb_1.company,
            xtpb_1.counterparty,
            xtpb_1.crop_origin,
            xtpb_1.delivery_date,
            xtpb_1.delivery_end_date,
            xtpb_1.delivery_start_date,
            xtpb_1.grade,
            xtpb_1.incoterm,
            xtpb_1.location,
            xtpb_1.obligation_date,
            xtpb_1.plan_id,
            xtpb_1.plan_uuid,
            xtpb_1.planned_obligation_id,
            xtpb_1.planned_quantity,
            xtpb_1.price_type,
            xtpb_1.profitcenter,
            xtpb_1.quantityuom,
            xtpb_1.reference_number,
            xtpb_1.trade_date_time,
            xtpb_1.trade_id,
            xtpb_1.trade_obligation_id,
            xtpb_1.trade_obligation_uuid,
            xtpb_1.trade_price,
            xtpb_1.trade_price_currency,
            xtpb_1.trade_price_uom,
            xtpb_1.trade_quantity,
            xtpb_1.trade_transaction_type,
            xtpb_1.trade_type,
            xtpb_1.trade_uuid,
            xtpb_1.no_of_units,
            xtpb_1.remarks,
            xtpb_1.brand,
            xtpb_1.season,
            xtpb_1.load_location,
            xtpb_1.unload_location,
            xtpb_1.payment_term,
            xtpb_1.trader,
            xtpb_1.fx_rate,
            xtpb_1.provisional_fx_rate,
            xtpb_1.provisional_price_percentage,
            xtpb_1.provisional_price_type,
            xtpb_1.provisional_price,
            xtpb_1.tradesettlementcurrency,
            xtpb_1.trade_settlement_currency,
            xtpb_1.premiun_cost,
            xtpb_1.discount_cost,
            xtpb_1.total_trade_qty,
            xtpb_1.broker_reference_number,
            xtpb_1.provisional_price_uom,
            xtpb_1.provisional_price_currency,
            xtpb_1.planned_obligation_status,
            xtpb_1.parent_planned_obligation,
            xtpb_1.shipment_month,
            xtpb_1.external_record,
            xtpb_1.delivery_term_clause,
            xtpb_1.payment_terms_clause,
            xtpb_1.quantity_terms_clause,
            xtpb_1.quality_terms_clause,
            xtpb_1.pricing_terms_clause,
            xtpb_1.broker_reference,
            xtpb_1.comments,
            xtpb_1.trade_settlement_reference,
            xtpb_1.doc_by_pass_id,
            xtpb_1.package_type,
            xtpb_1.balance_quantity,
            xtpb_1.contract_term,
            xtpb_1.external_package,
            xtpb_1.external_package_unit,
            xtpb_1.internal_package_unit,
            xtpb_1.internal_package,
            xtpb_1.provisional_pricing,
            xtpb_1.weight_basis,
            xtpb_1.tolerance_value,
            xtpb_1.external_reference,
            xtpb_1.price_ticker,
            xtpb_1.special_instructions,
            xtpb_1.match_type,
            xtpb_1.settlement_tolerance_value,
            xtpb_1.obligation_state,
            xtpb_1.quotation_period_clause,
            xtpb_1.commodity_code,
            xtpb_1.location_type,
            xtpb_1.load_location_type,
            xtpb_1.unload_location_type,
            xtpb_1.counterparty_name,
            xtpb_1.company_code,
            xtpb_1.profitcenter_code
           FROM taomish.xceler_tradeplanningservice_plannedtradeobligation xtpb_1
          WHERE ((xtpb_1.trade_transaction_type = 0) AND ((xtpb_1.trade_type)::text = 'Physical'::text) AND ((xtpb_1.planned_obligation_status)::text = 'active'::text))) xtpb
     LEFT JOIN taomish.xceler_tradeplanningservice_tradelink xtt ON ((((xtpb.planned_obligation_id)::text = (xtt.planned_obligation_id)::text) AND ((xtt.tenant_id)::text = (xtpb.tenant_id)::text))))
     LEFT JOIN ( SELECT xtps_1.uuid,
            xtps_1.created_by,
            xtps_1.created_timestamp,
            xtps_1.tenant_id,
            xtps_1.updated_by,
            xtps_1.updated_timestamp,
            xtps_1.broker,
            xtps_1.circle_string_seq,
            xtps_1.commodity,
            xtps_1.company,
            xtps_1.counterparty,
            xtps_1.crop_origin,
            xtps_1.delivery_date,
            xtps_1.delivery_end_date,
            xtps_1.delivery_start_date,
            xtps_1.grade,
            xtps_1.incoterm,
            xtps_1.location,
            xtps_1.obligation_date,
            xtps_1.plan_id,
            xtps_1.plan_uuid,
            xtps_1.planned_obligation_id,
            xtps_1.planned_quantity,
            xtps_1.price_type,
            xtps_1.profitcenter,
            xtps_1.quantityuom,
            xtps_1.reference_number,
            xtps_1.trade_date_time,
            xtps_1.trade_id,
            xtps_1.trade_obligation_id,
            xtps_1.trade_obligation_uuid,
            xtps_1.trade_price,
            xtps_1.trade_price_currency,
            xtps_1.trade_price_uom,
            xtps_1.trade_quantity,
            xtps_1.trade_transaction_type,
            xtps_1.trade_type,
            xtps_1.trade_uuid,
            xtps_1.no_of_units,
            xtps_1.remarks,
            xtps_1.brand,
            xtps_1.season,
            xtps_1.load_location,
            xtps_1.unload_location,
            xtps_1.payment_term,
            xtps_1.trader,
            xtps_1.fx_rate,
            xtps_1.provisional_fx_rate,
            xtps_1.provisional_price_percentage,
            xtps_1.provisional_price_type,
            xtps_1.provisional_price,
            xtps_1.tradesettlementcurrency,
            xtps_1.trade_settlement_currency,
            xtps_1.premiun_cost,
            xtps_1.discount_cost,
            xtps_1.total_trade_qty,
            xtps_1.broker_reference_number,
            xtps_1.provisional_price_uom,
            xtps_1.provisional_price_currency,
            xtps_1.planned_obligation_status,
            xtps_1.parent_planned_obligation,
            xtps_1.shipment_month,
            xtps_1.external_record,
            xtps_1.delivery_term_clause,
            xtps_1.payment_terms_clause,
            xtps_1.quantity_terms_clause,
            xtps_1.quality_terms_clause,
            xtps_1.pricing_terms_clause,
            xtps_1.broker_reference,
            xtps_1.comments,
            xtps_1.trade_settlement_reference,
            xtps_1.doc_by_pass_id,
            xtps_1.package_type,
            xtps_1.balance_quantity,
            xtps_1.contract_term,
            xtps_1.external_package,
            xtps_1.external_package_unit,
            xtps_1.internal_package_unit,
            xtps_1.internal_package,
            xtps_1.provisional_pricing,
            xtps_1.weight_basis,
            xtps_1.tolerance_value,
            xtps_1.external_reference,
            xtps_1.price_ticker,
            xtps_1.special_instructions,
            xtps_1.match_type,
            xtps_1.settlement_tolerance_value,
            xtps_1.obligation_state,
            xtps_1.quotation_period_clause,
            xtps_1.commodity_code,
            xtps_1.location_type,
            xtps_1.load_location_type,
            xtps_1.unload_location_type,
            xtps_1.counterparty_name,
            xtps_1.company_code,
            xtps_1.profitcenter_code
           FROM taomish.xceler_tradeplanningservice_plannedtradeobligation xtps_1
          WHERE ((xtps_1.trade_transaction_type = 1) AND ((xtps_1.trade_type)::text = 'Physical'::text) AND ((xtps_1.planned_obligation_status)::text = 'active'::text))) xtps ON ((((xtt.linked_with)::text = (xtps.planned_obligation_id)::text) AND ((xtps.tenant_id)::text = (xtt.tenant_id)::text))))
     LEFT JOIN taomish.xceler_tradeplanningservice_physicaltradeplan xtp ON ((((xtp.planning_id)::text = (xtpb.plan_id)::text) AND ((xtp.tenant_id)::text = (xtpb.tenant_id)::text))))
  WHERE ((xtt.linked_with IS NOT NULL) AND (xtp.match_type IS NOT NULL) AND (xtt.updated_timestamp IS NOT NULL) AND (xtpb.trade_id IS NOT NULL) AND (xtps.trade_id IS NOT NULL))
UNION
 SELECT taomish.uuid_generate_v4() AS uuid,
    xtps.tenant_id,
    xtps.company AS sell_company,
    xtpb.trade_id AS purchase_contract_id,
    xtps.trade_id AS sale_contract_id,
    xtpb.trade_date_time AS buy_date,
    xtps.trade_date_time AS sell_date,
    xtpb.profitcenter AS buy_profitcenter,
    xtps.profitcenter AS sell_profitcenter,
    xsm.updated_timestamp AS allocation_date,
    xtpb.commodity,
    'stock allocation'::character varying AS allocation_type,
    ((xsm.quantity -&gt;&gt; 'unit'::text))::double precision AS match_quantity,
    (xsm.quantity -&gt;&gt; 'uom'::text) AS quantityuom,
    xtpb.trade_price AS buy_price,
    xtps.trade_price AS sell_price,
    xtpb.counterparty AS buyer,
    xtps.counterparty AS supplier
   FROM ((( SELECT xceler_tradeplanningservice_plannedtradeobligation.uuid,
            xceler_tradeplanningservice_plannedtradeobligation.created_by,
            xceler_tradeplanningservice_plannedtradeobligation.created_timestamp,
            xceler_tradeplanningservice_plannedtradeobligation.tenant_id,
            xceler_tradeplanningservice_plannedtradeobligation.updated_by,
            xceler_tradeplanningservice_plannedtradeobligation.updated_timestamp,
            xceler_tradeplanningservice_plannedtradeobligation.broker,
            xceler_tradeplanningservice_plannedtradeobligation.circle_string_seq,
            xceler_tradeplanningservice_plannedtradeobligation.commodity,
            xceler_tradeplanningservice_plannedtradeobligation.company,
            xceler_tradeplanningservice_plannedtradeobligation.counterparty,
            xceler_tradeplanningservice_plannedtradeobligation.crop_origin,
            xceler_tradeplanningservice_plannedtradeobligation.delivery_date,
            xceler_tradeplanningservice_plannedtradeobligation.delivery_end_date,
            xceler_tradeplanningservice_plannedtradeobligation.delivery_start_date,
            xceler_tradeplanningservice_plannedtradeobligation.grade,
            xceler_tradeplanningservice_plannedtradeobligation.incoterm,
            xceler_tradeplanningservice_plannedtradeobligation.location,
            xceler_tradeplanningservice_plannedtradeobligation.obligation_date,
            xceler_tradeplanningservice_plannedtradeobligation.plan_id,
            xceler_tradeplanningservice_plannedtradeobligation.plan_uuid,
            xceler_tradeplanningservice_plannedtradeobligation.planned_obligation_id,
            xceler_tradeplanningservice_plannedtradeobligation.planned_quantity,
            xceler_tradeplanningservice_plannedtradeobligation.price_type,
            xceler_tradeplanningservice_plannedtradeobligation.profitcenter,
            xceler_tradeplanningservice_plannedtradeobligation.quantityuom,
            xceler_tradeplanningservice_plannedtradeobligation.reference_number,
            xceler_tradeplanningservice_plannedtradeobligation.trade_date_time,
            xceler_tradeplanningservice_plannedtradeobligation.trade_id,
            xceler_tradeplanningservice_plannedtradeobligation.trade_obligation_id,
            xceler_tradeplanningservice_plannedtradeobligation.trade_obligation_uuid,
            xceler_tradeplanningservice_plannedtradeobligation.trade_price,
            xceler_tradeplanningservice_plannedtradeobligation.trade_price_currency,
            xceler_tradeplanningservice_plannedtradeobligation.trade_price_uom,
            xceler_tradeplanningservice_plannedtradeobligation.trade_quantity,
            xceler_tradeplanningservice_plannedtradeobligation.trade_transaction_type,
            xceler_tradeplanningservice_plannedtradeobligation.trade_type,
            xceler_tradeplanningservice_plannedtradeobligation.trade_uuid,
            xceler_tradeplanningservice_plannedtradeobligation.no_of_units,
            xceler_tradeplanningservice_plannedtradeobligation.remarks,
            xceler_tradeplanningservice_plannedtradeobligation.brand,
            xceler_tradeplanningservice_plannedtradeobligation.season,
            xceler_tradeplanningservice_plannedtradeobligation.load_location,
            xceler_tradeplanningservice_plannedtradeobligation.unload_location,
            xceler_tradeplanningservice_plannedtradeobligation.payment_term,
            xceler_tradeplanningservice_plannedtradeobligation.trader,
            xceler_tradeplanningservice_plannedtradeobligation.fx_rate,
            xceler_tradeplanningservice_plannedtradeobligation.provisional_fx_rate,
            xceler_tradeplanningservice_plannedtradeobligation.provisional_price_percentage,
            xceler_tradeplanningservice_plannedtradeobligation.provisional_price_type,
            xceler_tradeplanningservice_plannedtradeobligation.provisional_price,
            xceler_tradeplanningservice_plannedtradeobligation.tradesettlementcurrency,
            xceler_tradeplanningservice_plannedtradeobligation.trade_settlement_currency,
            xceler_tradeplanningservice_plannedtradeobligation.premiun_cost,
            xceler_tradeplanningservice_plannedtradeobligation.discount_cost,
            xceler_tradeplanningservice_plannedtradeobligation.total_trade_qty,
            xceler_tradeplanningservice_plannedtradeobligation.broker_reference_number,
            xceler_tradeplanningservice_plannedtradeobligation.provisional_price_uom,
            xceler_tradeplanningservice_plannedtradeobligation.provisional_price_currency,
            xceler_tradeplanningservice_plannedtradeobligation.planned_obligation_status,
            xceler_tradeplanningservice_plannedtradeobligation.parent_planned_obligation,
            xceler_tradeplanningservice_plannedtradeobligation.shipment_month,
            xceler_tradeplanningservice_plannedtradeobligation.external_record,
            xceler_tradeplanningservice_plannedtradeobligation.delivery_term_clause,
            xceler_tradeplanningservice_plannedtradeobligation.payment_terms_clause,
            xceler_tradeplanningservice_plannedtradeobligation.quantity_terms_clause,
            xceler_tradeplanningservice_plannedtradeobligation.quality_terms_clause,
            xceler_tradeplanningservice_plannedtradeobligation.pricing_terms_clause,
            xceler_tradeplanningservice_plannedtradeobligation.broker_reference,
            xceler_tradeplanningservice_plannedtradeobligation.comments,
            xceler_tradeplanningservice_plannedtradeobligation.trade_settlement_reference,
            xceler_tradeplanningservice_plannedtradeobligation.doc_by_pass_id,
            xceler_tradeplanningservice_plannedtradeobligation.package_type,
            xceler_tradeplanningservice_plannedtradeobligation.balance_quantity,
            xceler_tradeplanningservice_plannedtradeobligation.contract_term,
            xceler_tradeplanningservice_plannedtradeobligation.external_package,
            xceler_tradeplanningservice_plannedtradeobligation.external_package_unit,
            xceler_tradeplanningservice_plannedtradeobligation.internal_package_unit,
            xceler_tradeplanningservice_plannedtradeobligation.internal_package,
            xceler_tradeplanningservice_plannedtradeobligation.provisional_pricing,
            xceler_tradeplanningservice_plannedtradeobligation.weight_basis,
            xceler_tradeplanningservice_plannedtradeobligation.tolerance_value,
            xceler_tradeplanningservice_plannedtradeobligation.external_reference,
            xceler_tradeplanningservice_plannedtradeobligation.price_ticker,
            xceler_tradeplanningservice_plannedtradeobligation.special_instructions,
            xceler_tradeplanningservice_plannedtradeobligation.match_type,
            xceler_tradeplanningservice_plannedtradeobligation.settlement_tolerance_value,
            xceler_tradeplanningservice_plannedtradeobligation.obligation_state,
            xceler_tradeplanningservice_plannedtradeobligation.quotation_period_clause,
            xceler_tradeplanningservice_plannedtradeobligation.commodity_code,
            xceler_tradeplanningservice_plannedtradeobligation.location_type,
            xceler_tradeplanningservice_plannedtradeobligation.load_location_type,
            xceler_tradeplanningservice_plannedtradeobligation.unload_location_type,
            xceler_tradeplanningservice_plannedtradeobligation.counterparty_name,
            xceler_tradeplanningservice_plannedtradeobligation.company_code,
            xceler_tradeplanningservice_plannedtradeobligation.profitcenter_code
           FROM taomish.xceler_tradeplanningservice_plannedtradeobligation
          WHERE ((xceler_tradeplanningservice_plannedtradeobligation.trade_transaction_type = 1) AND ((xceler_tradeplanningservice_plannedtradeobligation.trade_type)::text = 'Physical'::text) AND ((xceler_tradeplanningservice_plannedtradeobligation.planned_obligation_status)::text = 'active'::text))) xtps
     LEFT JOIN taomish.xceler_stock_movement xsm ON ((((xtps.planned_obligation_id)::text = (xsm.transfer_to)::text) AND ((xtps.tenant_id)::text = (xsm.tenant_id)::text) AND ((xsm.type)::text = 'Sales-Draw'::text) AND ((xsm.status)::text &lt;&gt; 'Deleted'::text))))
     LEFT JOIN ( SELECT xceler_tradeplanningservice_plannedtradeobligation.uuid,
            xceler_tradeplanningservice_plannedtradeobligation.created_by,
            xceler_tradeplanningservice_plannedtradeobligation.created_timestamp,
            xceler_tradeplanningservice_plannedtradeobligation.tenant_id,
            xceler_tradeplanningservice_plannedtradeobligation.updated_by,
            xceler_tradeplanningservice_plannedtradeobligation.updated_timestamp,
            xceler_tradeplanningservice_plannedtradeobligation.broker,
            xceler_tradeplanningservice_plannedtradeobligation.circle_string_seq,
            xceler_tradeplanningservice_plannedtradeobligation.commodity,
            xceler_tradeplanningservice_plannedtradeobligation.company,
            xceler_tradeplanningservice_plannedtradeobligation.counterparty,
            xceler_tradeplanningservice_plannedtradeobligation.crop_origin,
            xceler_tradeplanningservice_plannedtradeobligation.delivery_date,
            xceler_tradeplanningservice_plannedtradeobligation.delivery_end_date,
            xceler_tradeplanningservice_plannedtradeobligation.delivery_start_date,
            xceler_tradeplanningservice_plannedtradeobligation.grade,
            xceler_tradeplanningservice_plannedtradeobligation.incoterm,
            xceler_tradeplanningservice_plannedtradeobligation.location,
            xceler_tradeplanningservice_plannedtradeobligation.obligation_date,
            xceler_tradeplanningservice_plannedtradeobligation.plan_id,
            xceler_tradeplanningservice_plannedtradeobligation.plan_uuid,
            xceler_tradeplanningservice_plannedtradeobligation.planned_obligation_id,
            xceler_tradeplanningservice_plannedtradeobligation.planned_quantity,
            xceler_tradeplanningservice_plannedtradeobligation.price_type,
            xceler_tradeplanningservice_plannedtradeobligation.profitcenter,
            xceler_tradeplanningservice_plannedtradeobligation.quantityuom,
            xceler_tradeplanningservice_plannedtradeobligation.reference_number,
            xceler_tradeplanningservice_plannedtradeobligation.trade_date_time,
            xceler_tradeplanningservice_plannedtradeobligation.trade_id,
            xceler_tradeplanningservice_plannedtradeobligation.trade_obligation_id,
            xceler_tradeplanningservice_plannedtradeobligation.trade_obligation_uuid,
            xceler_tradeplanningservice_plannedtradeobligation.trade_price,
            xceler_tradeplanningservice_plannedtradeobligation.trade_price_currency,
            xceler_tradeplanningservice_plannedtradeobligation.trade_price_uom,
            xceler_tradeplanningservice_plannedtradeobligation.trade_quantity,
            xceler_tradeplanningservice_plannedtradeobligation.trade_transaction_type,
            xceler_tradeplanningservice_plannedtradeobligation.trade_type,
            xceler_tradeplanningservice_plannedtradeobligation.trade_uuid,
            xceler_tradeplanningservice_plannedtradeobligation.no_of_units,
            xceler_tradeplanningservice_plannedtradeobligation.remarks,
            xceler_tradeplanningservice_plannedtradeobligation.brand,
            xceler_tradeplanningservice_plannedtradeobligation.season,
            xceler_tradeplanningservice_plannedtradeobligation.load_location,
            xceler_tradeplanningservice_plannedtradeobligation.unload_location,
            xceler_tradeplanningservice_plannedtradeobligation.payment_term,
            xceler_tradeplanningservice_plannedtradeobligation.trader,
            xceler_tradeplanningservice_plannedtradeobligation.fx_rate,
            xceler_tradeplanningservice_plannedtradeobligation.provisional_fx_rate,
            xceler_tradeplanningservice_plannedtradeobligation.provisional_price_percentage,
            xceler_tradeplanningservice_plannedtradeobligation.provisional_price_type,
            xceler_tradeplanningservice_plannedtradeobligation.provisional_price,
            xceler_tradeplanningservice_plannedtradeobligation.tradesettlementcurrency,
            xceler_tradeplanningservice_plannedtradeobligation.trade_settlement_currency,
            xceler_tradeplanningservice_plannedtradeobligation.premiun_cost,
            xceler_tradeplanningservice_plannedtradeobligation.discount_cost,
            xceler_tradeplanningservice_plannedtradeobligation.total_trade_qty,
            xceler_tradeplanningservice_plannedtradeobligation.broker_reference_number,
            xceler_tradeplanningservice_plannedtradeobligation.provisional_price_uom,
            xceler_tradeplanningservice_plannedtradeobligation.provisional_price_currency,
            xceler_tradeplanningservice_plannedtradeobligation.planned_obligation_status,
            xceler_tradeplanningservice_plannedtradeobligation.parent_planned_obligation,
            xceler_tradeplanningservice_plannedtradeobligation.shipment_month,
            xceler_tradeplanningservice_plannedtradeobligation.external_record,
            xceler_tradeplanningservice_plannedtradeobligation.delivery_term_clause,
            xceler_tradeplanningservice_plannedtradeobligation.payment_terms_clause,
            xceler_tradeplanningservice_plannedtradeobligation.quantity_terms_clause,
            xceler_tradeplanningservice_plannedtradeobligation.quality_terms_clause,
            xceler_tradeplanningservice_plannedtradeobligation.pricing_terms_clause,
            xceler_tradeplanningservice_plannedtradeobligation.broker_reference,
            xceler_tradeplanningservice_plannedtradeobligation.comments,
            xceler_tradeplanningservice_plannedtradeobligation.trade_settlement_reference,
            xceler_tradeplanningservice_plannedtradeobligation.doc_by_pass_id,
            xceler_tradeplanningservice_plannedtradeobligation.package_type,
            xceler_tradeplanningservice_plannedtradeobligation.balance_quantity,
            xceler_tradeplanningservice_plannedtradeobligation.contract_term,
            xceler_tradeplanningservice_plannedtradeobligation.external_package,
            xceler_tradeplanningservice_plannedtradeobligation.external_package_unit,
            xceler_tradeplanningservice_plannedtradeobligation.internal_package_unit,
            xceler_tradeplanningservice_plannedtradeobligation.internal_package,
            xceler_tradeplanningservice_plannedtradeobligation.provisional_pricing,
            xceler_tradeplanningservice_plannedtradeobligation.weight_basis,
            xceler_tradeplanningservice_plannedtradeobligation.tolerance_value,
            xceler_tradeplanningservice_plannedtradeobligation.external_reference,
            xceler_tradeplanningservice_plannedtradeobligation.price_ticker,
            xceler_tradeplanningservice_plannedtradeobligation.special_instructions,
            xceler_tradeplanningservice_plannedtradeobligation.match_type,
            xceler_tradeplanningservice_plannedtradeobligation.settlement_tolerance_value,
            xceler_tradeplanningservice_plannedtradeobligation.obligation_state,
            xceler_tradeplanningservice_plannedtradeobligation.quotation_period_clause,
            xceler_tradeplanningservice_plannedtradeobligation.commodity_code,
            xceler_tradeplanningservice_plannedtradeobligation.location_type,
            xceler_tradeplanningservice_plannedtradeobligation.load_location_type,
            xceler_tradeplanningservice_plannedtradeobligation.unload_location_type,
            xceler_tradeplanningservice_plannedtradeobligation.counterparty_name,
            xceler_tradeplanningservice_plannedtradeobligation.company_code,
            xceler_tradeplanningservice_plannedtradeobligation.profitcenter_code
           FROM taomish.xceler_tradeplanningservice_plannedtradeobligation
          WHERE ((xceler_tradeplanningservice_plannedtradeobligation.trade_transaction_type = 0) AND ((xceler_tradeplanningservice_plannedtradeobligation.trade_type)::text = 'Physical'::text) AND ((xceler_tradeplanningservice_plannedtradeobligation.planned_obligation_status)::text = 'active'::text))) xtpb ON ((((xsm.transfer_from)::text = (xtpb.trade_id)::text) AND ((xsm.tenant_id)::text = (xtpb.tenant_id)::text))))
  WHERE ((xtpb.trade_id IS NOT NULL) AND (xsm.updated_timestamp IS NOT NULL));</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-180">
        <createView fullDefinition="false" viewName="xceler_dashboardservice_livephysicalopenposition">SELECT taomish.uuid_generate_v4() AS uuid,
    xcop.obligation_id AS tradeid,
    xcop.price_type AS tradetype,
    (xcop.trade_quantity - xcop.planned_quantity) AS openposition,
    xcop.quantityuom AS uom,
    xcop.planned_quantity AS closedposition,
    xcop.delivery_end_date AS deliveryenddate,
        CASE
            WHEN (xcop.trade_transaction_type = 1) THEN 'sell'::text
            ELSE 'buy'::text
        END AS trantype,
    xcop.commodity,
    xcop.profitcenter,
    xcop.counterparty,
    xcop.company,
    xptrd.trader_name AS trader,
    now() AS eodrundate,
    xcop.tenant_id AS tenantid
   FROM (taomish.xceler_eodservice_physicalobligationrawdata xcop
     JOIN taomish.xceler_eodservice_physicaltraderawdata xptrd ON ((((xcop.trade_id)::text = (xptrd.trade_id)::text) AND ((xcop.tenant_id)::text = (xptrd.tenant_id)::text))));</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-181">
        <createView fullDefinition="false" viewName="xceler_report_commodity_wise_position">SELECT taomish.uuid_generate_v4() AS uuid,
    tab.tenant_id,
    tab.commodity,
    tab.contract_month,
    sum(tab.buy_quantity) AS buy_quantity,
    sum(tab.sell_quantity) AS sell_quantity,
    (sum(tab.buy_quantity) - sum(tab.sell_quantity)) AS quantity,
    (sum(tab.buy_total_price_allocated_quantity) - sum(tab.sell_total_price_allocated_quantity)) AS total_price_quantity,
    ((sum(tab.buy_quantity) - sum(tab.sell_quantity)) - (sum(tab.buy_total_price_allocated_quantity) - sum(tab.sell_total_price_allocated_quantity))) AS unpriced_quantity
   FROM ( SELECT xceler_eodservice_physicalobligationrawdata.tenant_id,
            xceler_eodservice_physicalobligationrawdata.contract_month,
            xceler_eodservice_physicalobligationrawdata.commodity,
                CASE
                    WHEN (xceler_eodservice_physicalobligationrawdata.trade_transaction_type = 0) THEN sum(xceler_eodservice_physicalobligationrawdata.trade_quantity)
                    ELSE (0)::double precision
                END AS buy_quantity,
                CASE
                    WHEN (xceler_eodservice_physicalobligationrawdata.trade_transaction_type = 1) THEN sum(xceler_eodservice_physicalobligationrawdata.trade_quantity)
                    ELSE (0)::double precision
                END AS sell_quantity,
                CASE
                    WHEN (xceler_eodservice_physicalobligationrawdata.trade_transaction_type = 0) THEN
                    CASE
                        WHEN ((xceler_eodservice_physicalobligationrawdata.price_type)::text = 'Fixed'::text) THEN sum(xceler_eodservice_physicalobligationrawdata.trade_quantity)
                        ELSE sum(xceler_eodservice_physicalobligationrawdata.total_price_allocated_quantity)
                    END
                    ELSE (0)::double precision
                END AS buy_total_price_allocated_quantity,
                CASE
                    WHEN (xceler_eodservice_physicalobligationrawdata.trade_transaction_type = 1) THEN
                    CASE
                        WHEN ((xceler_eodservice_physicalobligationrawdata.price_type)::text = 'Fixed'::text) THEN sum(xceler_eodservice_physicalobligationrawdata.trade_quantity)
                        ELSE sum(xceler_eodservice_physicalobligationrawdata.total_price_allocated_quantity)
                    END
                    ELSE (0)::double precision
                END AS sell_total_price_allocated_quantity,
            xceler_eodservice_physicalobligationrawdata.price_type
           FROM taomish.xceler_eodservice_physicalobligationrawdata
          WHERE (xceler_eodservice_physicalobligationrawdata.realised_date IS NULL)
          GROUP BY xceler_eodservice_physicalobligationrawdata.contract_month, xceler_eodservice_physicalobligationrawdata.commodity, xceler_eodservice_physicalobligationrawdata.price_allocation_status, xceler_eodservice_physicalobligationrawdata.price_type, xceler_eodservice_physicalobligationrawdata.trade_transaction_type, xceler_eodservice_physicalobligationrawdata.tenant_id) tab
  GROUP BY tab.commodity, tab.contract_month, tab.tenant_id;</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-182">
        <createView fullDefinition="false" viewName="xceler_report_counterparty_wise_position">SELECT taomish.uuid_generate_v4() AS uuid,
    tab.tenant_id,
    tab.counterparty,
    tab.contract_month,
    sum(tab.sell_quantity) AS sell_quantity,
    sum(tab.sell_total_price_allocated_quantity) AS total_price_quantity,
    (sum(tab.sell_quantity) - sum(tab.sell_total_price_allocated_quantity)) AS unpriced_quantity
   FROM ( SELECT xceler_eodservice_physicalobligationrawdata.tenant_id,
            xceler_eodservice_physicalobligationrawdata.contract_month,
            xceler_eodservice_physicalobligationrawdata.counterparty,
                CASE
                    WHEN (xceler_eodservice_physicalobligationrawdata.trade_transaction_type = 1) THEN sum(xceler_eodservice_physicalobligationrawdata.trade_quantity)
                    ELSE (0)::double precision
                END AS sell_quantity,
                CASE
                    WHEN (xceler_eodservice_physicalobligationrawdata.trade_transaction_type = 1) THEN
                    CASE
                        WHEN ((xceler_eodservice_physicalobligationrawdata.price_type)::text = 'Fixed'::text) THEN sum(xceler_eodservice_physicalobligationrawdata.trade_quantity)
                        ELSE sum(xceler_eodservice_physicalobligationrawdata.total_price_allocated_quantity)
                    END
                    ELSE (0)::double precision
                END AS sell_total_price_allocated_quantity,
            xceler_eodservice_physicalobligationrawdata.price_type
           FROM taomish.xceler_eodservice_physicalobligationrawdata
          WHERE (xceler_eodservice_physicalobligationrawdata.realised_date IS NULL)
          GROUP BY xceler_eodservice_physicalobligationrawdata.contract_month, xceler_eodservice_physicalobligationrawdata.counterparty, xceler_eodservice_physicalobligationrawdata.price_allocation_status, xceler_eodservice_physicalobligationrawdata.price_type, xceler_eodservice_physicalobligationrawdata.trade_transaction_type, xceler_eodservice_physicalobligationrawdata.tenant_id) tab
  GROUP BY tab.counterparty, tab.contract_month, tab.tenant_id;</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-183">
        <createView fullDefinition="false" viewName="xceler_dashboardservice_physicalm2mrealizedpnl">SELECT taomish.uuid_generate_v4() AS uuid,
    xpord.obligation_id AS tradeid,
    xpord.price_type AS tradetype,
    xpord.trade_transaction_type AS trantype,
        CASE
            WHEN ((xpord.obligation_status)::text = 'planned'::text) THEN xpord.planned_quantity
            ELSE (xpord.trade_quantity - xpord.planned_quantity)
        END AS obligationquantity,
    xpord.trade_quantity AS quantity,
    xpord.quantityuom,
    xpord.price AS tradeprice,
    xpord.price_currency AS currency,
    xpord.actual_load_quantity AS actualloadquantity,
    xpord.actual_unload_quantity AS actualunloadquantity,
    xpord.obligation_status AS obligationstatus,
    xpord.planned_quantity AS plannedquantity,
    xptrd.trader_name AS trader,
    to_char(xpord.delivery_end_date, 'FMMonthYYYY'::text) AS deliveryenddate,
    pubrd.realized_date AS realizeddate,
    pubrd.realised_pnl_today AS realizedpnl,
    pubrd.realized_position AS realizedposition,
    pubrd.mtm_pnl AS m2mpnl,
    pubrd.eoduom AS m2muom,
    pubrd.eoduom AS realizeduom,
    pubrd.eod_run_date AS rundate,
    pubrd.commodity,
    pubrd.profitcenter,
    pubrd.counterparty,
    pubrd.company,
    pubrd.tenant_id AS tenantid,
        CASE
            WHEN (xtrdprc.priced_quantity IS NULL) THEN (0.0)::double precision
            ELSE xtrdprc.priced_quantity
        END AS pricedquantity
   FROM (((( SELECT xceler_eodservice_publisheddata.uuid,
            xceler_eodservice_publisheddata.created_by,
            xceler_eodservice_publisheddata.created_timestamp,
            xceler_eodservice_publisheddata.end_date,
            xceler_eodservice_publisheddata.start_date,
            xceler_eodservice_publisheddata.tenant_id,
            xceler_eodservice_publisheddata.updated_by,
            xceler_eodservice_publisheddata.updated_timestamp,
            xceler_eodservice_publisheddata.buy_open_position,
            xceler_eodservice_publisheddata.closed_pnl_today,
            xceler_eodservice_publisheddata.closed_position,
            xceler_eodservice_publisheddata.commodity,
            xceler_eodservice_publisheddata.company,
            xceler_eodservice_publisheddata.counterparty,
            xceler_eodservice_publisheddata.eod_currency,
            xceler_eodservice_publisheddata.eod_job_name,
            xceler_eodservice_publisheddata.eod_run_date,
            xceler_eodservice_publisheddata.eoduom,
            xceler_eodservice_publisheddata.finance_cost,
            xceler_eodservice_publisheddata.freight_cost,
            xceler_eodservice_publisheddata.fx_exposure,
            xceler_eodservice_publisheddata.fx_exposure_currency,
            xceler_eodservice_publisheddata.insurance_cost,
            xceler_eodservice_publisheddata.mtm_pnl,
            xceler_eodservice_publisheddata.mtm_settlement,
            xceler_eodservice_publisheddata.nbv,
            xceler_eodservice_publisheddata.obligationid,
            xceler_eodservice_publisheddata.other_cost,
            xceler_eodservice_publisheddata.pnl_monthly,
            xceler_eodservice_publisheddata.pnl_yearly,
            xceler_eodservice_publisheddata.price_currency,
            xceler_eodservice_publisheddata.price_exposure,
            xceler_eodservice_publisheddata.profitcenter,
            xceler_eodservice_publisheddata.raw_data_id,
            xceler_eodservice_publisheddata.realised_pnl_today,
            xceler_eodservice_publisheddata.realized_date,
            xceler_eodservice_publisheddata.realized_position,
            xceler_eodservice_publisheddata.sell_open_position,
            xceler_eodservice_publisheddata.tax_cost,
            xceler_eodservice_publisheddata.total_cost,
            xceler_eodservice_publisheddata.trade_id,
            xceler_eodservice_publisheddata.prev_mtm_pnl,
            xceler_eodservice_publisheddata.prev_open_buy_position,
            xceler_eodservice_publisheddata.prev_open_sell_position,
            xceler_eodservice_publisheddata.prev_realised_pnl,
            xceler_eodservice_publisheddata.prev_realised_postion,
            xceler_eodservice_publisheddata.prev_closed_postion,
            eachitem.oblid,
            eachitem.topdate
           FROM (taomish.xceler_eodservice_publisheddata
             JOIN ( SELECT xceler_eodservice_publisheddata_1.obligationid AS oblid,
                    max(xceler_eodservice_publisheddata_1.eod_run_date) AS topdate
                   FROM taomish.xceler_eodservice_publisheddata xceler_eodservice_publisheddata_1
                  GROUP BY xceler_eodservice_publisheddata_1.obligationid) eachitem ON (((eachitem.topdate = xceler_eodservice_publisheddata.eod_run_date) AND ((eachitem.oblid)::text = (xceler_eodservice_publisheddata.obligationid)::text))))) pubrd
     LEFT JOIN taomish.xceler_eodservice_physicalobligationrawdata xpord ON (((xpord.obligation_id)::text = (pubrd.obligationid)::text)))
     LEFT JOIN taomish.xceler_eodservice_physicaltraderawdata xptrd ON (((xpord.trade_id)::text = (xptrd.trade_id)::text)))
     LEFT JOIN taomish.xceler_pricingservice_advancedtradeprice xtrdprc ON (((xpord.trade_id)::text = (xtrdprc.obligation_id)::text)))
  WHERE (((pubrd.tenant_id)::text = (xpord.tenant_id)::text) AND ((pubrd.tenant_id)::text = (xptrd.tenant_id)::text));</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-184">
        <createView fullDefinition="false" viewName="xceler_dashboardservice_physicalopenposition">SELECT taomish.uuid_generate_v4() AS uuid,
    xtob.obligationid AS tradeid,
    xcop.price_type AS tradetype,
    (xtob.sell_open_position + xtob.buy_open_position) AS openposition,
    xtob.eoduom AS uom,
    xtob.closed_position AS closedposition,
    xcop.delivery_end_date AS deliveryenddate,
        CASE
            WHEN (xptrd.trade_transaction_type = 1) THEN 'sell'::text
            ELSE 'buy'::text
        END AS trantype,
    xtob.commodity,
    xtob.profitcenter,
    xtob.counterparty,
    xtob.company,
    xptrd.trader_name AS trader,
    xtob.eod_run_date AS eodrundate,
    xtob.tenant_id AS tenantid
   FROM ((taomish.xceler_eodservice_publisheddata xtob
     JOIN taomish.xceler_eodservice_physicalobligationrawdata xcop ON (((xtob.obligationid)::text = (xcop.obligation_id)::text)))
     JOIN taomish.xceler_eodservice_physicaltraderawdata xptrd ON ((((xtob.trade_id)::text = (xptrd.trade_id)::text) AND ((xtob.tenant_id)::text = (xptrd.tenant_id)::text) AND ((xtob.tenant_id)::text = (xcop.tenant_id)::text))));</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-185">
        <createView fullDefinition="false" viewName="xceler_report_positionreport">SELECT taomish.uuid_generate_v4() AS uuid,
    view.tenantid AS tenant_id,
    view.deliverymonth AS delivery_month,
    sum(view.buyopenposition) AS buy_open_position,
    sum(view.sellopenposition) AS sell_open_position,
    sum(view.m2mpnl) AS m2mpnl,
    sum(view.buy_value) AS buy_value,
    sum(view.sell_value) AS sell_value,
    sum(view.bmd) AS bmd,
    ((sum(view.buyopenposition) - sum(view.sellopenposition)) + sum(view.bmd)) AS long_short,
    view.commodity,
    view.profitcenter,
    view.rundate AS run_date,
    view.tradetype AS trade_type,
    sum(view.cost) AS cost
   FROM ( SELECT "position".tenantid,
            to_char("position".deliveryenddate, 'FMMonth-YYYY'::text) AS deliverymonth,
            "position".buyopenposition,
            "position".sellopenposition,
            "position".m2mpnl,
            "position".buy_value,
            "position".sell_value,
            "position".bmd,
            "position".commodity,
            "position".profitcenter,
            "position".rundate,
            "position".tradetype,
            "position".cost
           FROM ( SELECT taomish.uuid_generate_v4() AS uuid,
                    xpord.obligation_id AS tradeid,
                    xpord.trade_type AS tradetype,
                    xpord.trade_transaction_type AS trantype,
                    xpord.trade_quantity AS quantity,
                    xpord.price AS tradeprice,
                    xpord.price_currency AS currency,
                    xpord.obligation_status AS obligationstatus,
                    xpord.planned_quantity AS plannedquantity,
                    xptrd.trader_name AS trader,
                    xpord.delivery_end_date AS deliveryenddate,
                    pubrd.mtm_pnl AS m2mpnl,
                    pubrd.eoduom AS m2muom,
                    pubrd.eod_run_date AS rundate,
                    pubrd.commodity,
                    pubrd.profitcenter,
                    pubrd.counterparty,
                    pubrd.company,
                    pubrd.tenant_id AS tenantid,
                    pubrd.sell_open_position AS sellopenposition,
                    pubrd.buy_open_position AS buyopenposition,
                    0 AS bmd,
                    (pubrd.sell_open_position * xpord.price) AS sell_value,
                    (pubrd.buy_open_position * xpord.price) AS buy_value,
                    pubrd.total_cost AS cost
                   FROM (((( SELECT xceler_eodservice_publisheddata.uuid,
                            xceler_eodservice_publisheddata.created_by,
                            xceler_eodservice_publisheddata.created_timestamp,
                            xceler_eodservice_publisheddata.end_date,
                            xceler_eodservice_publisheddata.start_date,
                            xceler_eodservice_publisheddata.tenant_id,
                            xceler_eodservice_publisheddata.updated_by,
                            xceler_eodservice_publisheddata.updated_timestamp,
                            xceler_eodservice_publisheddata.buy_open_position,
                            xceler_eodservice_publisheddata.closed_pnl_today,
                            xceler_eodservice_publisheddata.closed_position,
                            xceler_eodservice_publisheddata.commodity,
                            xceler_eodservice_publisheddata.company,
                            xceler_eodservice_publisheddata.counterparty,
                            xceler_eodservice_publisheddata.eod_currency,
                            xceler_eodservice_publisheddata.eod_job_name,
                            xceler_eodservice_publisheddata.eod_run_date,
                            xceler_eodservice_publisheddata.eoduom,
                            xceler_eodservice_publisheddata.finance_cost,
                            xceler_eodservice_publisheddata.freight_cost,
                            xceler_eodservice_publisheddata.fx_exposure,
                            xceler_eodservice_publisheddata.fx_exposure_currency,
                            xceler_eodservice_publisheddata.insurance_cost,
                            xceler_eodservice_publisheddata.mtm_pnl,
                            xceler_eodservice_publisheddata.mtm_settlement,
                            xceler_eodservice_publisheddata.nbv,
                            xceler_eodservice_publisheddata.obligationid,
                            xceler_eodservice_publisheddata.other_cost,
                            xceler_eodservice_publisheddata.pnl_monthly,
                            xceler_eodservice_publisheddata.pnl_yearly,
                            xceler_eodservice_publisheddata.price_currency,
                            xceler_eodservice_publisheddata.price_exposure,
                            xceler_eodservice_publisheddata.profitcenter,
                            xceler_eodservice_publisheddata.raw_data_id,
                            xceler_eodservice_publisheddata.realised_pnl_today,
                            xceler_eodservice_publisheddata.realized_date,
                            xceler_eodservice_publisheddata.realized_position,
                            xceler_eodservice_publisheddata.sell_open_position,
                            xceler_eodservice_publisheddata.tax_cost,
                            xceler_eodservice_publisheddata.total_cost,
                            xceler_eodservice_publisheddata.trade_id,
                            xceler_eodservice_publisheddata.prev_mtm_pnl,
                            xceler_eodservice_publisheddata.prev_open_buy_position,
                            xceler_eodservice_publisheddata.prev_open_sell_position,
                            xceler_eodservice_publisheddata.trade_value,
                            xceler_eodservice_publisheddata.trader_name,
                            xceler_eodservice_publisheddata.prev_realised_pnl,
                            xceler_eodservice_publisheddata.prev_realised_postion,
                            xceler_eodservice_publisheddata.prev_closed_postion,
                            xceler_eodservice_publisheddata.total_netted_cost,
                            xceler_eodservice_publisheddata.total_added_cost,
                            xceler_eodservice_publisheddata.total_premium_discount,
                            xceler_eodservice_publisheddata.trade_type,
                            xceler_eodservice_publisheddata.price,
                            xceler_eodservice_publisheddata.trade_transaction_type,
                            xceler_eodservice_publisheddata.price_type,
                            xceler_eodservice_publisheddata.trade_date_time,
                            eachitem.oblid,
                            eachitem.topdate,
                            eachitem.oblid,
                            eachitem.topdate
                           FROM (taomish.xceler_eodservice_publisheddata
                             JOIN ( SELECT xepd.obligationid AS oblid,
                                    xepd.eod_run_date AS topdate
                                   FROM taomish.xceler_eodservice_publisheddata xepd) eachitem ON (((eachitem.topdate = xceler_eodservice_publisheddata.eod_run_date) AND ((eachitem.oblid)::text = (xceler_eodservice_publisheddata.obligationid)::text))))) pubrd(uuid, created_by, created_timestamp, end_date, start_date, tenant_id, updated_by, updated_timestamp, buy_open_position, closed_pnl_today, closed_position, commodity, company, counterparty, eod_currency, eod_job_name, eod_run_date, eoduom, finance_cost, freight_cost, fx_exposure, fx_exposure_currency, insurance_cost, mtm_pnl, mtm_settlement, nbv, obligationid, other_cost, pnl_monthly, pnl_yearly, price_currency, price_exposure, profitcenter, raw_data_id, realised_pnl_today, realized_date, realized_position, sell_open_position, tax_cost, total_cost, trade_id, prev_mtm_pnl, prev_open_buy_position, prev_open_sell_position, trade_value, trader_name, prev_realised_pnl, prev_realised_postion, prev_closed_postion, total_netted_cost, total_added_cost, total_premium_discount, trade_type, price, trade_transaction_type, price_type, trade_date_time, oblid, topdate, oblid_1, topdate_1)
                     LEFT JOIN taomish.xceler_eodservice_physicalobligationrawdata xpord ON (((xpord.obligation_id)::text = (pubrd.obligationid)::text)))
                     LEFT JOIN taomish.xceler_eodservice_physicaltraderawdata xptrd ON (((xpord.trade_id)::text = (xptrd.trade_id)::text)))
                     LEFT JOIN taomish.xceler_pricingservice_advancedtradeprice xtrdprc ON (((xpord.trade_id)::text = (xtrdprc.obligation_id)::text)))
                  WHERE (((pubrd.tenant_id)::text = (xpord.tenant_id)::text) AND ((pubrd.tenant_id)::text = (xptrd.tenant_id)::text) AND ((xpord.obligation_status)::text = 'unplanned'::text))
                UNION
                 SELECT taomish.uuid_generate_v4() AS uuid,
                    xpord.trade_id AS tradeid,
                    'future'::character varying AS tradetype,
                    xpord.trade_transaction_type AS trantype,
                    (xpord.lot * xpord.lot_size) AS quantity,
                    xpord.trade_price AS tradeprice,
                    xpord.currency,
                    xpord.netting_status AS obligationstatus,
                    (xpord.match_lot * xpord.lot_size) AS plannedquantity,
                    xpord.trader_name AS trader,
                    xpord.expiry_date AS deliveryenddate,
                    pubrd.mtm_pnl AS m2mpnl,
                    pubrd.eoduom AS m2muom,
                    pubrd.eod_run_date AS rundate,
                    pubrd.commodity,
                    pubrd.profitcenter,
                    pubrd.counterparty,
                    pubrd.company,
                    pubrd.tenant_id AS tenantid,
                    0 AS sellopenposition,
                    0 AS buyopenposition,
                    (pubrd.buy_open_position - pubrd.sell_open_position) AS bmd,
                    0 AS buy_value,
                    0 AS sell_value,
                    0 AS cost
                   FROM (( SELECT xceler_eodservice_futuretradeeodpublished.uuid,
                            xceler_eodservice_futuretradeeodpublished.created_by,
                            xceler_eodservice_futuretradeeodpublished.created_timestamp,
                            xceler_eodservice_futuretradeeodpublished.end_date,
                            xceler_eodservice_futuretradeeodpublished.start_date,
                            xceler_eodservice_futuretradeeodpublished.tenant_id,
                            xceler_eodservice_futuretradeeodpublished.updated_by,
                            xceler_eodservice_futuretradeeodpublished.updated_timestamp,
                            xceler_eodservice_futuretradeeodpublished.buy_open_position,
                            xceler_eodservice_futuretradeeodpublished.close_date,
                            xceler_eodservice_futuretradeeodpublished.closed_pnl,
                            xceler_eodservice_futuretradeeodpublished.closed_positon,
                            xceler_eodservice_futuretradeeodpublished.commodity,
                            xceler_eodservice_futuretradeeodpublished.company,
                            xceler_eodservice_futuretradeeodpublished.counterparty,
                            xceler_eodservice_futuretradeeodpublished.eod_currency,
                            xceler_eodservice_futuretradeeodpublished.eod_job_name,
                            xceler_eodservice_futuretradeeodpublished.eod_run_date,
                            xceler_eodservice_futuretradeeodpublished.eoduom,
                            xceler_eodservice_futuretradeeodpublished.mtm_pnl,
                            xceler_eodservice_futuretradeeodpublished.profitcenter,
                            xceler_eodservice_futuretradeeodpublished.raw_data_id,
                            xceler_eodservice_futuretradeeodpublished.sell_open_position,
                            xceler_eodservice_futuretradeeodpublished.trade_id,
                            xceler_eodservice_futuretradeeodpublished.prev_mtm_pnl,
                            xceler_eodservice_futuretradeeodpublished.prev_open_buy_position,
                            xceler_eodservice_futuretradeeodpublished.prev_open_sell_position,
                            xceler_eodservice_futuretradeeodpublished.prev_realised_pnl,
                            xceler_eodservice_futuretradeeodpublished.prev_realised_postion,
                            xceler_eodservice_futuretradeeodpublished.prev_closed_postion,
                            xceler_eodservice_futuretradeeodpublished.prev_closed_pnl,
                            eachitem.tradeid,
                            eachitem.topdate,
                            eachitem.tradeid,
                            eachitem.topdate
                           FROM (taomish.xceler_eodservice_futuretradeeodpublished
                             JOIN ( SELECT xceler_eodservice_futuretradeeodpublished_1.trade_id AS tradeid,
                                    xceler_eodservice_futuretradeeodpublished_1.eod_run_date AS topdate
                                   FROM taomish.xceler_eodservice_futuretradeeodpublished xceler_eodservice_futuretradeeodpublished_1) eachitem ON (((eachitem.topdate = xceler_eodservice_futuretradeeodpublished.eod_run_date) AND ((eachitem.tradeid)::text = (xceler_eodservice_futuretradeeodpublished.trade_id)::text))))) pubrd(uuid, created_by, created_timestamp, end_date, start_date, tenant_id, updated_by, updated_timestamp, buy_open_position, close_date, closed_pnl, closed_positon, commodity, company, counterparty, eod_currency, eod_job_name, eod_run_date, eoduom, mtm_pnl, profitcenter, raw_data_id, sell_open_position, trade_id, prev_mtm_pnl, prev_open_buy_position, prev_open_sell_position, prev_realised_pnl, prev_realised_postion, prev_closed_postion, prev_closed_pnl, tradeid, topdate, tradeid_1, topdate_1)
                     LEFT JOIN taomish.xceler_eodervice_futuretradeeodrawdata xpord ON (((xpord.trade_id)::text = (pubrd.trade_id)::text)))
                  WHERE ((xpord.netting_status)::text &lt;&gt; 'Fully Netted'::text)) "position") view
  GROUP BY view.deliverymonth, view.tenantid, view.commodity, view.profitcenter, view.rundate, view.tradetype;</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-186">
        <createView fullDefinition="false" viewName="xceler_valency_risk_report">SELECT taomish.uuid_generate_v4() AS uuid,
    tab.tenant_id,
    tab.origin,
    tab.eod_run_date,
    tab.commodity,
    tab.parent,
    sum(tab.buy_open_position) AS buy_open_position,
    sum(tab.sell_open_position) AS sell_open_position,
    sum(tab.inventory_open_position) AS inventory_open_position,
        CASE
            WHEN (sum((tab.buy_open_position + tab.inventory_open_position)) = (0)::double precision) THEN (0)::double precision
            ELSE (sum((tab.buy_price * (tab.buy_open_position + tab.inventory_open_position))) / sum((tab.buy_open_position + tab.inventory_open_position)))
        END AS buy_price,
        CASE
            WHEN (sum(tab.sell_open_position) = (0)::double precision) THEN (0)::double precision
            ELSE (sum((tab.sell_price * tab.sell_open_position)) / sum(tab.sell_open_position))
        END AS sell_price,
        CASE
            WHEN (sum((tab.buy_open_position + tab.inventory_open_position)) = (0)::double precision) THEN (0)::double precision
            ELSE (sum((tab.buy_total_price * (tab.buy_open_position + tab.inventory_open_position))) / sum((tab.buy_open_position + tab.inventory_open_position)))
        END AS freight_finance_cost,
        CASE
            WHEN (sum(tab.buy_open_position) = (0)::double precision) THEN (0)::double precision
            ELSE (sum((tab.buy_total_cost * (tab.buy_open_position + tab.inventory_open_position))) / sum((tab.buy_open_position + tab.inventory_open_position)))
        END AS buy_total_price,
    avg(tab.market_settlement_price) AS market_settlement_price
   FROM ( SELECT xep.tenant_id,
            xepr.profitcenter AS origin,
            xep.eod_run_date,
            xepr.price,
                CASE
                    WHEN ((xepr.trade_transaction_type = 0) AND ((xep.trade_type)::text = 'Physical'::text)) THEN xep.buy_open_position
                    ELSE (0)::double precision
                END AS buy_open_position,
                CASE
                    WHEN ((xepr.trade_transaction_type = 0) AND ((xep.trade_type)::text = 'Inventory Position'::text)) THEN xep.buy_open_position
                    ELSE (0)::double precision
                END AS inventory_open_position,
            COALESCE(xep.sell_open_position, (0)::double precision) AS sell_open_position,
            xep.commodity,
            xcc.parent,
            xepr.trade_transaction_type,
            (COALESCE(xepr.market_settlement_price, (0)::double precision) + COALESCE(xepr.premium_discount, (0)::real)) AS market_settlement_price,
            COALESCE(xepr.premium_discount, (0)::real) AS "coalesce",
                CASE
                    WHEN (xepr.trade_transaction_type = 0) THEN COALESCE(xepr.price, (0)::double precision)
                    ELSE (0)::double precision
                END AS buy_price,
                CASE
                    WHEN (xepr.trade_transaction_type = 1) THEN COALESCE(xepr.price, (0)::double precision)
                    ELSE (0)::double precision
                END AS sell_price,
                CASE
                    WHEN ((xepr.trade_transaction_type = 0) AND (xep.buy_open_position &lt;&gt; (0)::double precision)) THEN (COALESCE(xep.other_cost, (0)::double precision) / COALESCE(xep.buy_open_position, (1)::double precision))
                    ELSE (0)::double precision
                END AS buy_total_price,
                CASE
                    WHEN ((xepr.trade_transaction_type = 0) AND (xep.buy_open_position &lt;&gt; (0)::double precision)) THEN (COALESCE(xepr.price, (0)::double precision) + (COALESCE(xep.other_cost, (0)::double precision) / COALESCE(xep.buy_open_position, (1)::double precision)))
                    ELSE (0)::double precision
                END AS buy_total_cost
           FROM ((taomish.xceler_eodservice_publisheddata xep
             LEFT JOIN taomish.xceler_eodservice_physicalobligationrawdata xepr ON ((((xep.tenant_id)::text = (xepr.tenant_id)::text) AND ((xep.trade_id)::text = (xepr.trade_id)::text))))
             LEFT JOIN taomish.xceler_configservice_commodity xcc ON ((((xep.tenant_id)::text = (xcc.tenant_id)::text) AND ((xep.commodity)::text = (xcc.name)::text))))) tab
  GROUP BY tab.tenant_id, tab.origin, tab.eod_run_date, tab.commodity, tab.parent;</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-187">
        <addUniqueConstraint columnNames="transfer_id" constraintName="xceler_stock_movement_transfer_id_key" tableName="xceler_stock_movement_1"/>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-188">
        <createView fullDefinition="false" viewName="vw_planned_obligation_state">SELECT xtp.uuid,
    (xtp.json -&gt;&gt; 'PLANNED'::text) AS planned,
    (xtp.json -&gt;&gt; 'SETTLED'::text) AS settled,
    (xtp.json -&gt;&gt; 'PRICED'::text) AS priced,
    (xtp.json -&gt;&gt; 'ACTUALIZED'::text) AS actualized,
    (xtp.json -&gt;&gt; 'DELIVERY_STARTED'::text) AS deliverystarted,
    (xtp.json -&gt;&gt; 'PARTIALLY_PRICED'::text) AS partiallypriced
   FROM ( SELECT xtp1.uuid,
            to_jsonb(xtp1.obligation_state) AS json
           FROM taomish.xceler_tradeplanningservice_plannedtradeobligation xtp1
          GROUP BY xtp1.uuid) xtp;</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-189">
        <createView fullDefinition="false" viewName="xceler_stock_movement_detailed_view">WITH stock AS (
         WITH stock_data AS (
                 WITH status_list AS (
                         SELECT t.index,
                            t.status
                           FROM ( VALUES (1,'Pending'::text), (2,'Initiated'::text), (3,'Completed'::text)) t(index, status)
                        )
                 SELECT taomish.uuid_generate_v4() AS uuid,
                    max(xsm.created_timestamp) AS created_timestamp,
                    max(xsm.updated_timestamp) AS updated_timestamp,
                    xsm.tenant_id,
                    xsm.commodity,
                    xsm.transfer_from,
                    xsm.transfer_to,
                    xsm.type,
                    sum(((xsm.quantity -&gt;&gt; 'unit'::text))::numeric) AS quantity,
                    sum(((xsm.actual_received_qty -&gt;&gt; 'unit'::text))::numeric) AS actual_received_qty,
                    jsonb_agg(xsm.*) AS stock_movement_dtos,
                    jsonb_agg(xsm.transfer_id) AS transfer_ids,
                    max(status_list.index) AS status_index,
                    NULL::character varying AS sell_stock_id
                   FROM (taomish.xceler_stock_movement xsm
                     JOIN status_list ON ((status_list.status = (xsm.status)::text)))
                  WHERE ((xsm.type)::text = 'Build'::text)
                  GROUP BY xsm.tenant_id, xsm.commodity, xsm.transfer_from, xsm.transfer_to, xsm.type
                UNION ALL
                 SELECT taomish.uuid_generate_v4() AS uuid,
                    max(xsm.created_timestamp) AS max,
                    max(xsm.updated_timestamp) AS max,
                    xsm.tenant_id,
                    xsm.commodity,
                    xi.inventory_name AS transfer_from,
                    xss.transfer_to_id AS transfer_to,
                    xsm.type,
                    sum(((xsm.quantity -&gt;&gt; 'unit'::text))::numeric) AS quantity,
                    sum(((xsm.actual_received_qty -&gt;&gt; 'unit'::text))::numeric) AS actual_received_qty,
                    jsonb_agg(xsm.*) AS stock_movement_dtos,
                    jsonb_agg(xsm.transfer_id) AS transfer_ids,
                    max(status_list.index) AS status_index,
                    xsm.sell_stock_id
                   FROM (((taomish.xceler_sell_stock xss
                     JOIN taomish.xceler_stock_movement xsm ON ((((xss.sell_stock_id)::text = (xsm.sell_stock_id)::text) AND ((xsm.tenant_id)::text = (xss.tenant_id)::text))))
                     LEFT JOIN taomish.xceler_inventory xi ON ((((xss.transfer_from_id)::text = (xi.inventory_id)::text) AND ((xsm.tenant_id)::text = (xi.tenant_id)::text))))
                     JOIN status_list ON ((status_list.status = (xsm.status)::text)))
                  WHERE ((xsm.type)::text = ANY (ARRAY[('Sales-Draw'::character varying)::text, ('Stock Transfer'::character varying)::text, ('Processing'::character varying)::text, ('Write Off'::character varying)::text, ('Write On'::character varying)::text]))
                  GROUP BY xsm.tenant_id, xsm.commodity, xi.inventory_name, xss.transfer_to_id, xsm.type, xsm.sell_stock_id
                ), delivery_order_list AS (
                 SELECT xdo.sell_stock_id,
                    sum(xdo.draw_quantity) AS draw_quantity
                   FROM taomish.xceler_delivery_order xdo
                  GROUP BY xdo.sell_stock_id
                )
         SELECT stock_data.uuid,
            stock_data.created_timestamp,
            stock_data.updated_timestamp,
            stock_data.tenant_id,
            stock_data.commodity,
            stock_data.transfer_from,
                CASE
                    WHEN ((stock_data.type)::text = ANY (ARRAY[('Stock Transfer'::character varying)::text, ('Processing'::character varying)::text, ('Write Off'::character varying)::text, ('Write On'::character varying)::text])) THEN xi2.inventory_name
                    ELSE stock_data.transfer_to
                END AS transfer_to,
            stock_data.type,
            stock_data.quantity,
            stock_data.actual_received_qty,
            stock_data.stock_movement_dtos,
            (stock_data.stock_movement_dtos -&gt;&gt; 0) AS temp_stock_movement,
            stock_data.transfer_ids,
            stock_data.status_index,
            stock_data.sell_stock_id,
            dol.draw_quantity AS total_do_quantity
           FROM ((stock_data
             LEFT JOIN delivery_order_list dol ON (((dol.sell_stock_id)::text = (stock_data.sell_stock_id)::text)))
             LEFT JOIN taomish.xceler_inventory xi2 ON ((((xi2.tenant_id)::text = (stock_data.tenant_id)::text) AND ((xi2.inventory_id)::text = (stock_data.transfer_to)::text) AND ((stock_data.type)::text = ANY (ARRAY[('Stock Transfer'::character varying)::text, ('Processing'::character varying)::text, ('Write Off'::character varying)::text, ('Write On'::character varying)::text])))))
        )
 SELECT stock.uuid,
    stock.created_timestamp,
    stock.updated_timestamp,
    stock.tenant_id,
    stock.commodity,
    stock.transfer_from,
    stock.transfer_to,
    stock.type,
    stock.quantity,
    stock.actual_received_qty,
    stock.stock_movement_dtos,
    ((stock.temp_stock_movement)::jsonb -&gt;&gt; 'plan_id'::text) AS plan_id,
    ((stock.temp_stock_movement)::jsonb -&gt;&gt; 'vessel_plan_id'::text) AS vessel_plan_id,
    stock.transfer_ids,
    stock.status_index,
    stock.sell_stock_id,
    stock.total_do_quantity
   FROM stock;</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-190">
        <createView fullDefinition="false" viewName="xceler_report_stockdischarge">SELECT taomish.uuid_generate_v4() AS uuid,
    xi.storage_name,
    xi.inventory_name,
    string_agg(DISTINCT (xi.commodity)::text, ','::text) AS commodity,
    max(xi.created_timestamp) AS created_timestamp,
    xi.tenant_id,
    sum(((stock.quantity -&gt;&gt; 'unit'::text))::double precision) AS quantity,
    (stock.quantity -&gt;&gt; 'uom'::text) AS uom
   FROM (( SELECT stock_1.uuid,
            stock_1.tenant_id,
            stock_1.valid_to,
            stock_1.valid_from,
            stock_1.updated_timestamp,
            stock_1.created_timestamp,
            stock_1.updated_by,
            stock_1.created_by,
            stock_1.username,
            stock_1.transfer_id,
            stock_1.transfer_from,
            stock_1.transfer_to,
            stock_1.commodity,
            stock_1.type,
            stock_1.quantity,
            stock_1.price,
            stock_1.internal_packaging_type,
            stock_1.max_number_of_package,
            stock_1.status,
            stock_1.stage,
            stock_1.counterparty_approval,
            stock_1.finance_approval,
            stock_1.trader_approval,
            stock_1.actual_received_qty,
            stock_1.plan_id,
            stock_1.voyage_allocation_status,
            stock_1.trade_package_type,
            stock_1.purchase_id,
            stock_1.vessel_plan_id,
            stock_1.from_commodity,
            stock_1.sell_stock_id
           FROM taomish.xceler_stock_movement stock_1) stock
     LEFT JOIN taomish.xceler_inventory xi ON ((((xi.inventory_name)::text = (stock.transfer_to)::text) AND ((xi.tenant_id)::text = (stock.tenant_id)::text))))
  WHERE (((stock.type)::text = 'Stock Transfer'::text) AND ((stock.status)::text &lt;&gt; 'Deleted'::text))
  GROUP BY xi.storage_name, xi.inventory_name, xi.tenant_id, (stock.quantity -&gt;&gt; 'uom'::text);</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-191">
        <createView fullDefinition="false" viewName="xceler_stock_inventory_transfer_list_view">WITH stock_data AS (
         SELECT xsm.tenant_id,
            max(xsm.created_timestamp) AS created_timestamp,
            max(xsm.updated_timestamp) AS updated_timestamp,
            string_agg(DISTINCT (xsm.updated_by)::text, ', '::text) AS updated_by,
            string_agg(DISTINCT (xsm.created_by)::text, ', '::text) AS created_by,
            string_agg(DISTINCT (xsm.username)::text, ', '::text) AS username,
            string_agg(DISTINCT (xsm.transfer_id)::text, ', '::text) AS transfer_ids,
            xsm.transfer_from,
            xsm.transfer_to,
                CASE
                    WHEN ((xsm.type)::text = 'Stock Transfer-Simple blending'::text) THEN xsm.transfer_from
                    WHEN ((xsm.type)::text = ANY (ARRAY[('Build'::character varying)::text, ('Build-Simple blending'::character varying)::text])) THEN xsm.transfer_to
                    ELSE NULL::character varying
                END AS inv_name,
            xsm.sell_stock_id,
            xsm.plan_id,
            sum(((xsm.actual_received_qty -&gt;&gt; 'unit'::text))::numeric) AS actualized_quantity,
            sum(((xsm.quantity -&gt;&gt; 'unit'::text))::numeric) AS planned_quantity,
            string_agg(DISTINCT (xsm.quantity -&gt;&gt; 'uom'::text), ', '::text) AS quantity_uom,
            max((xsm.price -&gt;&gt; 'unit'::text)) AS transfer_price,
            string_agg(DISTINCT (xsm.price -&gt;&gt; 'uom'::text), ', '::text) AS transfer_price_uom,
            xsm.internal_packaging_type,
            max((xsm.type)::text) AS type,
            xsm.max_number_of_package
           FROM taomish.xceler_stock_movement xsm
          WHERE ((((xsm.type)::text = ANY (ARRAY[('Build'::character varying)::text, ('Build-Simple blending'::character varying)::text])) AND ((xsm.status)::text = 'Completed'::text)) OR (((xsm.type)::text = 'Stock Transfer-Simple blending'::text) AND ((xsm.status)::text &lt;&gt; 'Deleted'::text)))
          GROUP BY xsm.tenant_id, xsm.transfer_from, xsm.transfer_to,
                CASE
                    WHEN ((xsm.type)::text = 'Stock Transfer-Simple blending'::text) THEN xsm.transfer_from
                    WHEN ((xsm.type)::text = ANY (ARRAY[('Build'::character varying)::text, ('Build-Simple blending'::character varying)::text])) THEN xsm.transfer_to
                    ELSE NULL::character varying
                END, xsm.sell_stock_id, xsm.plan_id, xsm.internal_packaging_type, xsm.max_number_of_package
        UNION ALL
         SELECT xsm.tenant_id,
            max(xsm.created_timestamp) AS created_timestamp,
            max(xsm.updated_timestamp) AS updated_timestamp,
            string_agg(DISTINCT (xsm.updated_by)::text, ', '::text) AS updated_by,
            string_agg(DISTINCT (xsm.created_by)::text, ', '::text) AS created_by,
            string_agg(DISTINCT (xsm.username)::text, ', '::text) AS username,
            string_agg(DISTINCT (xsm.transfer_id)::text, ', '::text) AS transfer_ids,
            xi.inventory_name AS transfer_from,
            xsm.transfer_to,
            xi.inventory_name AS inv_name,
            xsm.sell_stock_id,
            xsm.plan_id,
            sum(((xsm.actual_received_qty -&gt;&gt; 'unit'::text))::numeric) AS actualized_quantity,
            sum(((xsm.quantity -&gt;&gt; 'unit'::text))::numeric) AS planned_quantity,
            string_agg(DISTINCT (xsm.quantity -&gt;&gt; 'uom'::text), ', '::text) AS quantity_uom,
            max((xsm.price -&gt;&gt; 'unit'::text)) AS transfer_price,
            string_agg(DISTINCT (xsm.price -&gt;&gt; 'uom'::text), ', '::text) AS transfer_price_uom,
            xsm.internal_packaging_type,
            max((xsm.type)::text) AS type,
            xsm.max_number_of_package
           FROM ((taomish.xceler_stock_movement xsm
             JOIN taomish.xceler_sell_stock xss ON ((((xss.sell_stock_id)::text = (xsm.sell_stock_id)::text) AND ((xsm.tenant_id)::text = (xss.tenant_id)::text))))
             JOIN taomish.xceler_inventory xi ON ((((xss.transfer_from_id)::text = (xi.inventory_id)::text) AND ((xss.tenant_id)::text = (xi.tenant_id)::text))))
          WHERE (((xsm.status)::text &lt;&gt; 'Deleted'::text) AND ((xsm.type)::text = ANY (ARRAY[('Stock Transfer'::character varying)::text, ('Processing'::character varying)::text, ('Write Off'::character varying)::text, ('Write On'::character varying)::text])))
          GROUP BY xsm.tenant_id, xi.inventory_name, xsm.transfer_to, xsm.sell_stock_id, xsm.plan_id, xsm.internal_packaging_type, xsm.max_number_of_package
        UNION ALL
         SELECT xsm.tenant_id,
            max(xsm.created_timestamp) AS created_timestamp,
            max(xsm.updated_timestamp) AS updated_timestamp,
            string_agg(DISTINCT (xsm.updated_by)::text, ', '::text) AS updated_by,
            string_agg(DISTINCT (xsm.created_by)::text, ', '::text) AS created_by,
            string_agg(DISTINCT (xsm.username)::text, ', '::text) AS username,
            string_agg(DISTINCT (xsm.transfer_id)::text, ', '::text) AS transfer_ids,
            xi2.inventory_name AS transfer_from,
            xsm.transfer_to,
            xi.inventory_name AS inv_name,
            xsm.sell_stock_id,
            xsm.plan_id,
            sum(((xsm.actual_received_qty -&gt;&gt; 'unit'::text))::numeric) AS actualized_quantity,
            sum(((xsm.quantity -&gt;&gt; 'unit'::text))::numeric) AS planned_quantity,
            string_agg(DISTINCT (xsm.quantity -&gt;&gt; 'uom'::text), ', '::text) AS quantity_uom,
            max((xsm.price -&gt;&gt; 'unit'::text)) AS transfer_price,
            string_agg(DISTINCT (xsm.price -&gt;&gt; 'uom'::text), ', '::text) AS transfer_price_uom,
            xsm.internal_packaging_type,
            max((xsm.type)::text) AS type,
            xsm.max_number_of_package
           FROM (((taomish.xceler_stock_movement xsm
             JOIN taomish.xceler_sell_stock xss ON ((((xss.sell_stock_id)::text = (xsm.sell_stock_id)::text) AND ((xsm.tenant_id)::text = (xss.tenant_id)::text))))
             JOIN taomish.xceler_inventory xi ON ((((xss.transfer_to_id)::text = (xi.inventory_id)::text) AND ((xss.tenant_id)::text = (xi.tenant_id)::text))))
             JOIN taomish.xceler_inventory xi2 ON ((((xss.transfer_from_id)::text = (xi2.inventory_id)::text) AND ((xss.tenant_id)::text = (xi2.tenant_id)::text))))
          WHERE (((xsm.status)::text = 'Completed'::text) AND ((xsm.type)::text = ANY (ARRAY[('Stock Transfer'::character varying)::text, ('Processing'::character varying)::text, ('Write Off'::character varying)::text, ('Write On'::character varying)::text])))
          GROUP BY xsm.tenant_id, xi.inventory_name, xi2.inventory_name, xsm.transfer_to, xsm.sell_stock_id, xsm.plan_id, xsm.internal_packaging_type, xsm.max_number_of_package
        UNION ALL
         SELECT xsm.tenant_id,
            max(xsm.created_timestamp) AS created_timestamp,
            max(xsm.updated_timestamp) AS updated_timestamp,
            string_agg(DISTINCT (xsm.updated_by)::text, ', '::text) AS updated_by,
            string_agg(DISTINCT (xsm.created_by)::text, ', '::text) AS created_by,
            string_agg(DISTINCT (xsm.username)::text, ', '::text) AS username,
            string_agg(DISTINCT (xsm.transfer_id)::text, ', '::text) AS transfer_ids,
            xi.inventory_name AS transfer_from,
            xsm.transfer_to,
            xi.inventory_name AS inv_name,
            xsm.sell_stock_id,
            xsm.plan_id,
            sum(((xsm.actual_received_qty -&gt;&gt; 'unit'::text))::numeric) AS actualized_quantity,
            sum(((xsm.quantity -&gt;&gt; 'unit'::text))::numeric) AS planned_quantity,
            string_agg(DISTINCT (xsm.quantity -&gt;&gt; 'uom'::text), ', '::text) AS quantity_uom,
            max((xsm.price -&gt;&gt; 'unit'::text)) AS transfer_price,
            string_agg(DISTINCT (xsm.price -&gt;&gt; 'uom'::text), ', '::text) AS transfer_price_uom,
            xsm.internal_packaging_type,
            max((xsm.type)::text) AS type,
            xsm.max_number_of_package
           FROM ((taomish.xceler_stock_movement xsm
             JOIN taomish.xceler_sell_stock xss ON (((xss.sell_stock_id)::text = (xsm.sell_stock_id)::text)))
             JOIN taomish.xceler_inventory xi ON (((xss.transfer_from_id)::text = (xi.inventory_id)::text)))
          WHERE (((xsm.type)::text = 'Sales-Draw'::text) AND ((xsm.status)::text = 'Completed'::text))
          GROUP BY xsm.tenant_id, xi.inventory_name, xsm.transfer_to, xsm.sell_stock_id, xsm.plan_id, xsm.internal_packaging_type, xsm.max_number_of_package
        UNION ALL
         SELECT xsm.tenant_id,
            max(xsm.created_timestamp) AS created_timestamp,
            max(xsm.updated_timestamp) AS updated_timestamp,
            string_agg(DISTINCT (xsm.updated_by)::text, ', '::text) AS updated_by,
            string_agg(DISTINCT (xsm.created_by)::text, ', '::text) AS created_by,
            string_agg(DISTINCT (xsm.username)::text, ', '::text) AS username,
            string_agg(DISTINCT (xsm.transfer_id)::text, ', '::text) AS transfer_ids,
            xsm.transfer_from,
            xsm.transfer_to,
            xsm.transfer_to AS inv_name,
            xsm.sell_stock_id,
            xsm.plan_id,
            sum(((xsm.actual_received_qty -&gt;&gt; 'unit'::text))::numeric) AS actualized_quantity,
            sum(((xsm.quantity -&gt;&gt; 'unit'::text))::numeric) AS planned_quantity,
            string_agg(DISTINCT (xsm.quantity -&gt;&gt; 'uom'::text), ', '::text) AS quantity_uom,
            max((xsm.price -&gt;&gt; 'unit'::text)) AS transfer_price,
            string_agg(DISTINCT (xsm.price -&gt;&gt; 'uom'::text), ', '::text) AS transfer_price_uom,
            xsm.internal_packaging_type,
            max((xsm.type)::text) AS type,
            xsm.max_number_of_package
           FROM taomish.xceler_stock_movement xsm
          WHERE (((xsm.type)::text = 'Stock Transfer-Simple blending'::text) AND ((xsm.status)::text = 'Completed'::text))
          GROUP BY xsm.tenant_id, xsm.transfer_from, xsm.transfer_to, xsm.sell_stock_id, xsm.plan_id, xsm.internal_packaging_type, xsm.max_number_of_package
        )
 SELECT taomish.uuid_generate_v4() AS uuid,
    stock_data.tenant_id,
    stock_data.created_timestamp,
    stock_data.updated_timestamp,
    stock_data.updated_by,
    stock_data.created_by,
    stock_data.username,
    stock_data.transfer_ids,
    stock_data.transfer_from,
    stock_data.transfer_to,
    stock_data.inv_name,
    stock_data.sell_stock_id,
    stock_data.plan_id,
    jsonb_build_object('unit', (stock_data.planned_quantity)::text, 'uom', stock_data.quantity_uom) AS quantity,
    jsonb_build_object('unit', (stock_data.actualized_quantity)::text, 'uom', stock_data.quantity_uom) AS actual_received_qty,
    jsonb_build_object('unit', stock_data.transfer_price, 'uom', stock_data.transfer_price_uom) AS price,
    stock_data.planned_quantity,
    stock_data.actualized_quantity,
    stock_data.quantity_uom,
    stock_data.transfer_price,
    stock_data.transfer_price_uom,
    stock_data.internal_packaging_type,
    stock_data.type,
    stock_data.max_number_of_package
   FROM stock_data
  ORDER BY stock_data.updated_timestamp DESC;</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-192">
        <createView fullDefinition="false" viewName="xceler_dashboardservice_futurem2mrealizedpnl">SELECT taomish.uuid_generate_v4() AS uuid,
    xpord.trade_id AS tradeid,
    'Future'::text AS tradetype,
    xpord.trade_transaction_type AS trantype,
    (xpord.lot * xpord.lot_size) AS quantity,
    xpord.uom AS futureuom,
    xpord.trade_price AS tradeprice,
    xpord.currency,
    xpord.trader_name AS trader,
    to_char(xpord.expiry_date, 'FMMonthYYYY'::text) AS deliveryenddate,
    pubrd.close_date AS realizeddate,
    pubrd.closed_pnl AS realizedpnl,
    pubrd.closed_positon AS realizedposition,
    pubrd.eoduom AS m2muom,
    pubrd.eoduom AS realizeduom,
    pubrd.mtm_pnl AS m2mpnl,
    pubrd.eod_run_date AS rundate,
    pubrd.commodity,
    pubrd.profitcenter,
    pubrd.counterparty,
    pubrd.company,
    pubrd.tenant_id AS tenantid
   FROM (( SELECT xceler_eodservice_futuretradeeodpublished.uuid,
            xceler_eodservice_futuretradeeodpublished.created_by,
            xceler_eodservice_futuretradeeodpublished.created_timestamp,
            xceler_eodservice_futuretradeeodpublished.end_date,
            xceler_eodservice_futuretradeeodpublished.start_date,
            xceler_eodservice_futuretradeeodpublished.tenant_id,
            xceler_eodservice_futuretradeeodpublished.updated_by,
            xceler_eodservice_futuretradeeodpublished.updated_timestamp,
            xceler_eodservice_futuretradeeodpublished.buy_open_position,
            xceler_eodservice_futuretradeeodpublished.close_date,
            xceler_eodservice_futuretradeeodpublished.closed_pnl,
            xceler_eodservice_futuretradeeodpublished.closed_positon,
            xceler_eodservice_futuretradeeodpublished.commodity,
            xceler_eodservice_futuretradeeodpublished.company,
            xceler_eodservice_futuretradeeodpublished.counterparty,
            xceler_eodservice_futuretradeeodpublished.eod_currency,
            xceler_eodservice_futuretradeeodpublished.eod_job_name,
            xceler_eodservice_futuretradeeodpublished.eod_run_date,
            xceler_eodservice_futuretradeeodpublished.eoduom,
            xceler_eodservice_futuretradeeodpublished.mtm_pnl,
            xceler_eodservice_futuretradeeodpublished.profitcenter,
            xceler_eodservice_futuretradeeodpublished.raw_data_id,
            xceler_eodservice_futuretradeeodpublished.sell_open_position,
            xceler_eodservice_futuretradeeodpublished.trade_id,
            xceler_eodservice_futuretradeeodpublished.prev_mtm_pnl,
            xceler_eodservice_futuretradeeodpublished.prev_open_buy_position,
            xceler_eodservice_futuretradeeodpublished.prev_open_sell_position,
            xceler_eodservice_futuretradeeodpublished.prev_realised_pnl,
            xceler_eodservice_futuretradeeodpublished.prev_realised_postion,
            xceler_eodservice_futuretradeeodpublished.prev_closed_postion,
            xceler_eodservice_futuretradeeodpublished.prev_closed_pnl,
            eachitem.tradeid,
            eachitem.topdate
           FROM (taomish.xceler_eodservice_futuretradeeodpublished
             JOIN ( SELECT xceler_eodservice_futuretradeeodpublished_1.trade_id AS tradeid,
                    max(xceler_eodservice_futuretradeeodpublished_1.eod_run_date) AS topdate
                   FROM taomish.xceler_eodservice_futuretradeeodpublished xceler_eodservice_futuretradeeodpublished_1
                  GROUP BY xceler_eodservice_futuretradeeodpublished_1.trade_id) eachitem ON (((eachitem.topdate = xceler_eodservice_futuretradeeodpublished.eod_run_date) AND ((eachitem.tradeid)::text = (xceler_eodservice_futuretradeeodpublished.trade_id)::text))))) pubrd
     LEFT JOIN taomish.xceler_eodervice_futuretradeeodrawdata xpord ON (((xpord.trade_id)::text = (pubrd.trade_id)::text)))
  ORDER BY xpord.trade_id;</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-193">
        <createView fullDefinition="false" viewName="xceler_dashboardservice_livefutureopenposition">SELECT taomish.uuid_generate_v4() AS uuid,
    xftrd.trade_id AS tradeid,
    'Future'::text AS tradetype,
    (xftrd.lot_size + xftrd.match_lot) AS openposition,
    xftrd.expiry_date AS deliveryenddate,
        CASE
            WHEN (xftrd.trade_transaction_type = 1) THEN 'sell'::text
            ELSE 'buy'::text
        END AS trantype,
    xftrd.commodity,
    xftrd.uom AS futureuom,
    xftrd.profitcenter,
    xftrd.counterparty,
    xftrd.company,
    xftrd.trader_name AS trader,
    now() AS eodrundate,
    xftrd.tenant_id AS tenantid
   FROM taomish.xceler_eodervice_futuretradeeodrawdata xftrd;</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-194">
        <createView fullDefinition="false" viewName="vw_xceler_pricingservice_staggeredpriceline">SELECT taomish.uuid_generate_v4() AS uuid,
    tp.price_line_id,
    tp.tenant_id,
    tp.obligation_id,
    tp.pricing_date,
    tp.basis,
    tp.others,
    tp.freight,
    tp.premium,
    tp.rollover,
    tp.insurance,
    tp.base_price,
    tp.commission,
    (((((((tp.basis + tp.others) + tp.freight) + tp.premium) + tp.rollover) + tp.insurance) + tp.base_price) + tp.commission) AS total,
    tp.priced_quantity,
    xpa.trade_quantity_uom,
    xpa.trade_price_currency,
    xpa.trade_price_uom,
        CASE
            WHEN ((xpa.fx_rate = (0)::double precision) OR (xpa.fx_rate IS NULL)) THEN (1)::double precision
            ELSE xpa.fx_rate
        END AS weight_conversion_factor,
    ((xpa.priced_quantity * ((((((((tp.basis + tp.others) + tp.freight) + tp.premium) + tp.rollover) + tp.insurance) + tp.base_price) + tp.commission))::double precision) /
        CASE
            WHEN ((xpa.fx_rate = (0)::double precision) OR (xpa.fx_rate IS NULL)) THEN (1)::double precision
            ELSE xpa.fx_rate
        END) AS amount,
    (tp.priced_quantity - tp.allocated_quantity) AS balance_quantity
   FROM (( SELECT xtp.price_line_id,
            xtp.tenant_id,
            xtp.obligation_id,
            xtp.pricing_date,
            xtp.priced_quantity,
            xtp.allocated_quantity,
            COALESCE(((xtp.json -&gt;&gt; 'Basis'::text))::numeric, (0)::numeric) AS basis,
            COALESCE(((xtp.json -&gt;&gt; 'Others'::text))::numeric, (0)::numeric) AS others,
            COALESCE(((xtp.json -&gt;&gt; 'Freight'::text))::numeric, (0)::numeric) AS freight,
            COALESCE(((xtp.json -&gt;&gt; 'Premium'::text))::numeric, (0)::numeric) AS premium,
            COALESCE(((xtp.json -&gt;&gt; 'Rollover'::text))::numeric, (0)::numeric) AS rollover,
            COALESCE(((xtp.json -&gt;&gt; 'Insurance'::text))::numeric, (0)::numeric) AS insurance,
            COALESCE(((xtp.json -&gt;&gt; 'Base Price'::text))::numeric, (0)::numeric) AS base_price,
            COALESCE(((xtp.json -&gt;&gt; 'Commission'::text))::numeric, (0)::numeric) AS commission
           FROM ( SELECT pc.price_line_id,
                    pc.tenant_id,
                    min(pc.allocated_quantity) AS allocated_quantity,
                    max((pc.obligation_id)::text) AS obligation_id,
                    max(pc.pricing_date) AS pricing_date,
                    max(pc.priced_quantity) AS priced_quantity,
                    jsonb_object_agg(pc.component, pc.price) AS json
                   FROM taomish.xceler_pricingservice_pricecomponent pc
                  GROUP BY pc.price_line_id, pc.tenant_id) xtp) tp
     JOIN taomish.xceler_pricingservice_advancedtradeprice xpa ON ((((xpa.tenant_id)::text = (tp.tenant_id)::text) AND ((xpa.obligation_id)::text = tp.obligation_id))));</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-195">
        <createView fullDefinition="false" viewName="vw_xceler_report_future_netting_history">SELECT taomish.uuid_generate_v4() AS uuid,
    xff.broker,
    xff.tenant_id,
    xff.commodity,
    xff.company,
    xff.exchange,
    xff.expiry_month,
    xff.netted_lots,
    xff.netting_id,
    xff.profitcenter,
    min(vxrf.netted_date) AS netted_date,
    sum(vxrf.realised_pnl) AS overall_realized_pnl,
    jsonb_agg(vxrf.*) AS netting_history_details
   FROM (taomish.xceler_futuretradeservice_futurenetting xff
     LEFT JOIN taomish.vw_xceler_report_futureclosing vxrf ON (((xff.netting_id)::text = (vxrf.netting_id)::text)))
  GROUP BY xff.uuid, xff.created_by, xff.created_timestamp, xff.tenant_id, xff.updated_by, xff.updated_timestamp, xff.broker, xff.commodity, xff.company, xff.exchange, xff.expiry_month, xff.netted_lots, xff.netting_id, xff.profitcenter;</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-196">
        <createView fullDefinition="false" viewName="xceler_dashboardservice_futurem2m">SELECT taomish.uuid_generate_v4() AS uuid,
    fm2mrz.tradeid,
    fm2mrz.tradetype,
    fm2mrz.trantype,
    fm2mrz.quantity,
    fm2mrz.tradeprice,
    fm2mrz.currency,
    fm2mrz.deliveryenddate,
    fm2mrz.realizeddate,
    fm2mrz.realizedpnl,
    fm2mrz.m2mpnl,
    fm2mrz.m2muom,
    fm2mrz.rundate,
    fm2mrz.commodity,
    fm2mrz.profitcenter,
    fm2mrz.counterparty,
    fm2mrz.company,
    fm2mrz.trader,
    fm2mrz.tenantid
   FROM taomish.xceler_dashboardservice_futurem2mrealizedpnl fm2mrz
  WHERE (fm2mrz.realizeddate IS NULL);</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-197">
        <createView fullDefinition="false" viewName="xceler_dashboardservice_futurerealized">SELECT taomish.uuid_generate_v4() AS uuid,
    fm2mrz.tradeid,
    fm2mrz.tradetype,
    fm2mrz.trantype,
    fm2mrz.quantity,
    fm2mrz.tradeprice,
    fm2mrz.currency,
    fm2mrz.deliveryenddate,
    fm2mrz.realizeddate,
    fm2mrz.realizedpnl,
    fm2mrz.m2mpnl,
    fm2mrz.m2muom,
    fm2mrz.rundate,
    fm2mrz.commodity,
    fm2mrz.profitcenter,
    fm2mrz.counterparty,
    fm2mrz.company,
    fm2mrz.trader,
    fm2mrz.tenantid
   FROM taomish.xceler_dashboardservice_futurem2mrealizedpnl fm2mrz
  WHERE (fm2mrz.realizeddate IS NULL);</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-198">
        <createView fullDefinition="false" viewName="xceler_dashboardservice_livefutopenposbycommodity">SELECT taomish.uuid_generate_v4() AS uuid,
    xdp.commodity,
    to_char(xdp.deliveryenddate, 'FMMonthYYYY'::text) AS shipmentmonth,
    xdp.trantype AS transactiontype,
    xdp.tradetype,
    xdp.tenantid,
    sum(xdp.openposition) AS openposition
   FROM taomish.xceler_dashboardservice_livefutureopenposition xdp
  GROUP BY xdp.tradetype, xdp.commodity, (to_char(xdp.deliveryenddate, 'FMMonthYYYY'::text)), xdp.trantype, xdp.tenantid;</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-199">
        <createView fullDefinition="false" viewName="xceler_dashboardservice_livefutopenposbycompany">SELECT taomish.uuid_generate_v4() AS uuid,
    xdp.company,
    to_char(xdp.deliveryenddate, 'FMMonthYYYY'::text) AS shipmentmonth,
    xdp.trantype AS transactiontype,
    xdp.tradetype,
    xdp.tenantid,
    sum(xdp.openposition) AS openposition
   FROM taomish.xceler_dashboardservice_livefutureopenposition xdp
  GROUP BY xdp.tradetype, xdp.company, (to_char(xdp.deliveryenddate, 'FMMonthYYYY'::text)), xdp.trantype, xdp.tenantid;</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-200">
        <createView fullDefinition="false" viewName="xceler_dashboardservice_livefutopenposbycounterparty">SELECT taomish.uuid_generate_v4() AS uuid,
    xdp.counterparty,
    to_char(xdp.deliveryenddate, 'FMMonthYYYY'::text) AS shipmentmonth,
    xdp.trantype AS transactiontype,
    xdp.tradetype,
    xdp.tenantid,
    sum(xdp.openposition) AS openposition
   FROM taomish.xceler_dashboardservice_livefutureopenposition xdp
  GROUP BY xdp.tradetype, xdp.counterparty, (to_char(xdp.deliveryenddate, 'FMMonthYYYY'::text)), xdp.trantype, xdp.tenantid;</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-201">
        <createView fullDefinition="false" viewName="xceler_dashboardservice_livefutopenposbyprofitcenter">SELECT taomish.uuid_generate_v4() AS uuid,
    xdp.profitcenter,
    to_char(xdp.deliveryenddate, 'FMMonthYYYY'::text) AS shipmentmonth,
    xdp.trantype AS transactiontype,
    xdp.tradetype,
    xdp.tenantid,
    sum(xdp.openposition) AS openposition
   FROM taomish.xceler_dashboardservice_livefutureopenposition xdp
  GROUP BY xdp.tradetype, xdp.profitcenter, (to_char(xdp.deliveryenddate, 'FMMonthYYYY'::text)), xdp.trantype, xdp.tenantid;</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-202">
        <createView fullDefinition="false" viewName="xceler_dashboardservice_livefutopenposbytrader">SELECT taomish.uuid_generate_v4() AS uuid,
    xdp.trader,
    to_char(xdp.deliveryenddate, 'FMMonthYYYY'::text) AS shipmentmonth,
    xdp.trantype AS transactiontype,
    xdp.tradetype,
    xdp.tenantid,
    sum(xdp.openposition) AS openposition
   FROM taomish.xceler_dashboardservice_livefutureopenposition xdp
  GROUP BY xdp.tradetype, xdp.trader, (to_char(xdp.deliveryenddate, 'FMMonthYYYY'::text)), xdp.trantype, xdp.tenantid;</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-203">
        <createView fullDefinition="false" viewName="xceler_dashboardservice_livephyopenposbycommodity">SELECT taomish.uuid_generate_v4() AS uuid,
    xdp.commodity,
    to_char(xdp.deliveryenddate, 'FMMonthYYYY'::text) AS shipmentmonth,
    xdp.trantype AS transactiontype,
    xdp.tradetype,
    xdp.tenantid,
    sum(xdp.openposition) AS openposition
   FROM taomish.xceler_dashboardservice_livephysicalopenposition xdp
  GROUP BY xdp.tradetype, xdp.commodity, (to_char(xdp.deliveryenddate, 'FMMonthYYYY'::text)), xdp.trantype, xdp.tenantid;</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-204">
        <createView fullDefinition="false" viewName="xceler_dashboardservice_livephyopenposbycompany">SELECT taomish.uuid_generate_v4() AS uuid,
    xdp.company,
    to_char(xdp.deliveryenddate, 'FMMonthYYYY'::text) AS shipmentmonth,
    xdp.trantype AS transactiontype,
    xdp.tradetype,
    xdp.tenantid,
    sum(xdp.openposition) AS openposition
   FROM taomish.xceler_dashboardservice_livephysicalopenposition xdp
  GROUP BY xdp.tradetype, xdp.company, (to_char(xdp.deliveryenddate, 'FMMonthYYYY'::text)), xdp.trantype, xdp.tenantid;</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-205">
        <createView fullDefinition="false" viewName="xceler_dashboardservice_livephyopenposbycounterparty">SELECT taomish.uuid_generate_v4() AS uuid,
    xdp.counterparty,
    to_char(xdp.deliveryenddate, 'FMMonthYYYY'::text) AS shipmentmonth,
    xdp.trantype AS transactiontype,
    xdp.tradetype,
    xdp.tenantid,
    sum(xdp.openposition) AS openposition
   FROM taomish.xceler_dashboardservice_livephysicalopenposition xdp
  GROUP BY xdp.tradetype, xdp.counterparty, (to_char(xdp.deliveryenddate, 'FMMonthYYYY'::text)), xdp.trantype, xdp.tenantid;</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-206">
        <createView fullDefinition="false" viewName="xceler_dashboardservice_livephyopenposbyprofitcenter">SELECT taomish.uuid_generate_v4() AS uuid,
    xdp.profitcenter,
    to_char(xdp.deliveryenddate, 'FMMonthYYYY'::text) AS shipmentmonth,
    xdp.trantype AS transactiontype,
    xdp.tradetype,
    xdp.tenantid,
    sum(xdp.openposition) AS openposition
   FROM taomish.xceler_dashboardservice_livephysicalopenposition xdp
  GROUP BY xdp.tradetype, xdp.profitcenter, (to_char(xdp.deliveryenddate, 'FMMonthYYYY'::text)), xdp.trantype, xdp.tenantid;</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-207">
        <createView fullDefinition="false" viewName="xceler_dashboardservice_livephyopenposbytrader">SELECT taomish.uuid_generate_v4() AS uuid,
    xdp.trader,
    to_char(xdp.deliveryenddate, 'FMMonthYYYY'::text) AS shipmentmonth,
    xdp.trantype AS transactiontype,
    xdp.tradetype,
    xdp.tenantid,
    sum(xdp.openposition) AS openposition
   FROM taomish.xceler_dashboardservice_livephysicalopenposition xdp
  GROUP BY xdp.tradetype, xdp.trader, (to_char(xdp.deliveryenddate, 'FMMonthYYYY'::text)), xdp.trantype, xdp.tenantid;</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-208">
        <createView fullDefinition="false" viewName="xceler_dashboardservice_pnldrawdown">SELECT taomish.uuid_generate_v4() AS uuid,
    to_char(xed.value_date, 'DDFMMonthYYYY'::text) AS eodvaluedate,
    xem.trader_name AS tradername,
    xem.profitcenter,
    xem.trade_type AS tradetype,
    xem.drawdown_limits AS "limit",
    xed.maxmtmpnl AS maxpnl,
    to_char(xed.maxmtmpnl_update_on, 'DDFMMonthYYYY'::text) AS maxpnldate,
    xed.new_max_pnl AS newmax,
    xed.todaysmtmpnl AS todayspnl,
    xed.pnl_chnage AS pnlchange,
    xed.tenant_id AS tenantid
   FROM (taomish.xceler_eodservice_marketlimitrawdata xem
     JOIN taomish.xceler_eodservice_dailypublishpnldrawdown xed ON (((xem.limit_id)::text = (xed.limit_id)::text)));</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-209">
        <createView fullDefinition="false" viewName="xceler_dashboardservice_unadjustedfuturetrades">SELECT taomish.uuid_generate_v4() AS uuid,
    ftraw.trade_id,
        CASE
            WHEN (ftraw.trade_transaction_type = 1) THEN 'sell'::text
            ELSE 'buy'::text
        END AS trantype,
    ftraw.commodity,
    ftraw.trade_date AS tradedate,
    ftraw.profitcenter,
    ftraw.expiry_month AS expirymonth,
    ftraw.execution_broker AS executionbroker,
    ftraw.lot,
    ftraw.trade_price AS tradeprice,
    ftraw.expiry_date AS expirydate,
    EXTRACT(days FROM ((ftraw.expiry_date)::timestamp with time zone - now())) AS daystoexpire,
    ftraw.future_index AS futureindex,
    ftraw.lot_size AS lotsize,
    ftraw.exchange_for AS exchangefor,
    ftraw.tag,
    ftpub.mtm_pnl,
    ftraw.company,
    ftraw.trader_name,
    ftraw.uom,
    (ftpub.prev_mtm_pnl - ftpub.mtm_pnl) AS pnlchange,
    ftraw.tenant_id
   FROM (taomish.xceler_eodservice_futuretradeeodpublished ftpub
     LEFT JOIN taomish.xceler_eodervice_futuretradeeodrawdata ftraw ON (((ftpub.trade_id)::text = (ftraw.trade_id)::text)))
  WHERE ((ftraw.netting_status)::text = 'Not Netted'::text);</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-210">
        <createView fullDefinition="false" viewName="xceler_dashboardservice_unadjustedfuturetradesgraph">SELECT taomish.uuid_generate_v4() AS uuid,
    ftraw.tenant_id,
        CASE
            WHEN (ftraw.trade_transaction_type = 1) THEN 'sell'::text
            ELSE 'buy'::text
        END AS trantype,
    to_char(ftraw.expiry_date, 'FMMonthYYYY'::text) AS expirymonth,
    ftraw.lot_size AS lotsize,
    ftraw.future_index AS futureindex
   FROM taomish.xceler_eodervice_futuretradeeodrawdata ftraw
  WHERE ((ftraw.netting_status)::text = 'Not&#13;
      Netted'::text);</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-211">
        <createView fullDefinition="false" viewName="xceler_report_daily_price_summary">SELECT taomish.uuid_generate_v4() AS uuid,
    xceler_riskservice_physicalcommodityprice.tenant_id,
    xceler_riskservice_physicalcommodityprice.name,
    xceler_riskservice_physicalcommodityprice.settlement_price,
    xceler_riskservice_physicalcommodityprice.shipment_month,
    xceler_riskservice_physicalcommodityprice.physical_comm_price_date AS price_date
   FROM taomish.xceler_riskservice_physicalcommodityprice;</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-212">
        <createView fullDefinition="false" viewName="xceler_report_intercompanylink">SELECT taomish.uuid_generate_v4() AS uuid,
    xpi.tenant_id,
    xtp.company,
    xpi.obligation_id,
    xtp1.trade_price AS bridge_price,
    xtp1.planned_quantity AS bridge_quantity,
    xtp.trade_date_time,
    xtp.counterparty,
    xtp.commodity,
    xtp.trade_price,
    xtp.trade_price_currency,
    xtp.planned_quantity,
    xtp.quantityuom,
    xtp.delivery_end_date,
    xpi.long_id,
    xtp1.counterparty AS long_counterparty,
    xtp1.company AS long_company,
    xpi.short_id,
    xtp2.counterparty AS short_counterparty,
    xtp2.company AS short_company
   FROM (((( SELECT xpi_1.uuid,
            xpi_1.tenant_id,
            xpi_1.valid_to,
            xpi_1.valid_from,
            xpi_1.updated_timestamp,
            xpi_1.created_timestamp,
            xpi_1.updated_by,
            xpi_1.created_by,
            xpi_1.username,
            xpi_1.settlement_data,
            xpi_1.settlement_type,
            xpi_1.inter_company_trade_details,
            (xpi_1.settlement_data -&gt;&gt; 'interCompanyName'::text) AS company_name,
            ((xpi_1.inter_company_trade_details -&gt; 1) -&gt;&gt; 'obligationId'::text) AS short_id,
            ((xpi_1.inter_company_trade_details -&gt; 0) -&gt;&gt; 'obligationId'::text) AS long_id,
            (xpi_1.settlement_data -&gt;&gt; 'transferPrice'::text) AS bridge_trade_price,
            (xpi_1.settlement_data -&gt;&gt; 'obligationId'::text) AS obligation_id
           FROM ( SELECT xpi_2.uuid,
                    xpi_2.tenant_id,
                    xpi_2.valid_to,
                    xpi_2.valid_from,
                    xpi_2.updated_timestamp,
                    xpi_2.created_timestamp,
                    xpi_2.updated_by,
                    xpi_2.created_by,
                    xpi_2.username,
                    xpi_2.settlement_data,
                    xpi_2.settlement_type,
                    ((xpi_2.settlement_data -&gt;&gt; 'interCompanyTradeDetails'::text))::json AS inter_company_trade_details
                   FROM taomish.xceler_physicaltrade_inter_company_trade xpi_2) xpi_1) xpi
     LEFT JOIN taomish.xceler_tradeplanningservice_plannedtradeobligation xtp ON ((((xtp.planned_obligation_id)::text = xpi.obligation_id) AND ((xtp.tenant_id)::text = (xpi.tenant_id)::text))))
     LEFT JOIN taomish.xceler_tradeplanningservice_plannedtradeobligation xtp1 ON ((((xtp1.planned_obligation_id)::text = xpi.long_id) AND ((xtp1.tenant_id)::text = (xpi.tenant_id)::text))))
     LEFT JOIN taomish.xceler_tradeplanningservice_plannedtradeobligation xtp2 ON ((((xtp2.planned_obligation_id)::text = xpi.short_id) AND ((xtp2.tenant_id)::text = (xpi.tenant_id)::text))));</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-213">
        <createView fullDefinition="false" viewName="xceler_report_provisionaltrade">SELECT taomish.uuid_generate_v4() AS uuid,
    (xtp.tenant_id)::text AS tenant_id,
    (xtp.trade_id)::text AS trade_id,
    xtp.planned_obligation_id,
    (xtp.trade_type)::text AS trade_type,
    xtp.trade_date_time AS trade_date,
    xtp.planned_quantity AS quantity,
    (xtp.quantityuom)::text AS quantity_uom,
    xtp.trade_price,
    (xtp.trade_price_currency)::text AS trade_price_currency,
    xtp.provisional_price,
    xtp.trade_transaction_type,
    (xtp.price_type)::text AS price_type,
    xtp.delivery_end_date,
    (xtp.commodity)::text AS commodity,
    (xtp.company)::text AS company,
    (xtp.counterparty)::text AS counterparty,
    (xtp.profitcenter)::text AS profitcenter,
    (xtp.planned_quantity - xtp.balance_quantity) AS planned_quantity,
    (xpst.price_status)::text AS price_status,
    xpst.average_price,
    xpst.priced_quantity,
    xpst.balance_quantity AS unpriced_quantity,
    (xtp.incoterm)::text AS incoterm,
    (xtp.plan_id)::text AS plan_id,
    xtp.updated_timestamp AS allocation_date,
    xaa.load_quantity AS actualized_quantity,
    (xtp.broker)::text AS broker,
    xptl.base_price AS fob_price,
    xptl.total AS total_price,
    xptl.priced_quantity AS quantitymt,
    xptl.freight,
    xptl.rollover AS brokerage,
    xptl.commission,
    xptl.others,
    xptl.insurance,
    xptl.premium,
    xptl.pricing_date AS price_date,
    xts.voyage_no,
    xts.vessel_name
   FROM ((((( SELECT xtp1.uuid,
            xtp1.created_by,
            xtp1.created_timestamp,
            xtp1.tenant_id,
            xtp1.updated_by,
            xtp1.updated_timestamp,
            xtp1.broker,
            xtp1.circle_string_seq,
            xtp1.commodity,
            xtp1.company,
            xtp1.counterparty,
            xtp1.crop_origin,
            xtp1.delivery_date,
            xtp1.delivery_end_date,
            xtp1.delivery_start_date,
            xtp1.grade,
            xtp1.incoterm,
            xtp1.location,
            xtp1.obligation_date,
            xtp1.plan_id,
            xtp1.plan_uuid,
            xtp1.planned_obligation_id,
            xtp1.planned_quantity,
            xtp1.price_type,
            xtp1.profitcenter,
            xtp1.quantityuom,
            xtp1.reference_number,
            xtp1.trade_date_time,
            xtp1.trade_id,
            xtp1.trade_obligation_id,
            xtp1.trade_obligation_uuid,
            xtp1.trade_price,
            xtp1.trade_price_currency,
            xtp1.trade_price_uom,
            xtp1.trade_quantity,
            xtp1.trade_transaction_type,
            xtp1.trade_type,
            xtp1.trade_uuid,
            xtp1.no_of_units,
            xtp1.remarks,
            xtp1.brand,
            xtp1.season,
            xtp1.load_location,
            xtp1.unload_location,
            xtp1.payment_term,
            xtp1.trader,
            xtp1.fx_rate,
            xtp1.provisional_fx_rate,
            xtp1.provisional_price_percentage,
            xtp1.provisional_price_type,
            xtp1.provisional_price,
            xtp1.tradesettlementcurrency,
            xtp1.trade_settlement_currency,
            xtp1.premiun_cost,
            xtp1.discount_cost,
            xtp1.total_trade_qty,
            xtp1.broker_reference_number,
            xtp1.provisional_price_uom,
            xtp1.provisional_price_currency,
            xtp1.planned_obligation_status,
            xtp1.parent_planned_obligation,
            xtp1.shipment_month,
            xtp1.external_record,
            xtp1.delivery_term_clause,
            xtp1.payment_terms_clause,
            xtp1.quantity_terms_clause,
            xtp1.quality_terms_clause,
            xtp1.pricing_terms_clause,
            xtp1.broker_reference,
            xtp1.comments,
            xtp1.trade_settlement_reference,
            xtp1.doc_by_pass_id,
            xtp1.package_type,
            xtp1.external_package,
            xtp1.internal_package,
            xtp1.internal_package_unit,
            xtp1.external_package_unit,
            xtp1.balance_quantity,
            xtp1.contract_term,
            xtp1.provisional_pricing,
            xtp1.weight_basis,
            xtp1.tolerance_value,
            xtp1.external_reference,
            xtp1.price_ticker,
            xtp1.special_instructions,
            xtp1.match_type,
            xtp1.settlement_tolerance_value
           FROM taomish.xceler_tradeplanningservice_plannedtradeobligation xtp1
          WHERE (((xtp1.price_type)::text = ANY (ARRAY[('PTBF'::character varying)::text, ('Basis'::character varying)::text])) AND (xtp1.provisional_pricing = true) AND ((xtp1.planned_obligation_status)::text = 'active'::text) AND (xtp1.external_record = false))) xtp
     LEFT JOIN taomish.xceler_pricingservice_advancedtradeprice xpst ON ((((xpst.tenant_id)::text = (xtp.tenant_id)::text) AND ((xpst.obligation_id)::text = (xtp.planned_obligation_id)::text))))
     LEFT JOIN taomish.vw_xceler_pricingservice_staggeredpriceline xptl ON ((((xptl.tenant_id)::text = (xtp.tenant_id)::text) AND (xptl.obligation_id = (xtp.planned_obligation_id)::text))))
     LEFT JOIN taomish.xceler_actualizationservice_actualizedquantity xaa ON ((((xaa.tenant_id)::text = (xtp.tenant_id)::text) AND ((xaa.planned_obligation_id)::text = (xtp.planned_obligation_id)::text))))
     LEFT JOIN taomish.xceler_transportallocationservice_seafreightdetails xts ON ((((xts.plan_id)::text = (xtp.plan_id)::text) AND ((xts.tenant_id)::text = (xtp.tenant_id)::text))));</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-214">
        <createView fullDefinition="false" viewName="xceler_dashboardservice_phyopenposbycommodity">SELECT taomish.uuid_generate_v4() AS uuid,
    xdp.commodity,
    to_char(xdp.deliveryenddate, 'FMMonthYYYY'::text) AS shipmentmonth,
    xdp.trantype AS transactiontype,
    xdp.tradetype,
    xdp.tenantid,
    sum(xdp.openposition) AS openposition
   FROM taomish.xceler_dashboardservice_physicalopenposition xdp
  GROUP BY xdp.tradetype, xdp.commodity, (to_char(xdp.deliveryenddate, 'FMMonthYYYY'::text)), xdp.trantype, xdp.tenantid;</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-215">
        <createView fullDefinition="false" viewName="xceler_dashboardservice_phyopenposbycompany">SELECT taomish.uuid_generate_v4() AS uuid,
    xdp.company,
    to_char(xdp.deliveryenddate, 'FMMonthYYYY'::text) AS shipmentmonth,
    xdp.trantype AS transactiontype,
    xdp.tradetype,
    xdp.tenantid,
    sum(xdp.openposition) AS openposition
   FROM taomish.xceler_dashboardservice_physicalopenposition xdp
  GROUP BY xdp.tradetype, xdp.company, (to_char(xdp.deliveryenddate, 'FMMonthYYYY'::text)), xdp.trantype, xdp.tenantid;</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-216">
        <createView fullDefinition="false" viewName="xceler_dashboardservice_phyopenposbycounterparty">SELECT taomish.uuid_generate_v4() AS uuid,
    xdp.counterparty,
    to_char(xdp.deliveryenddate, 'FMMonthYYYY'::text) AS shipmentmonth,
    xdp.trantype AS transactiontype,
    xdp.tradetype,
    xdp.tenantid,
    sum(xdp.openposition) AS openposition
   FROM taomish.xceler_dashboardservice_physicalopenposition xdp
  GROUP BY xdp.tradetype, xdp.counterparty, (to_char(xdp.deliveryenddate, 'FMMonthYYYY'::text)), xdp.trantype, xdp.tenantid;</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-217">
        <createView fullDefinition="false" viewName="xceler_dashboardservice_phyopenposbyprofitcenter">SELECT taomish.uuid_generate_v4() AS uuid,
    xdp.profitcenter,
    to_char(xdp.deliveryenddate, 'FMMonthYYYY'::text) AS shipmentmonth,
    xdp.trantype AS transactiontype,
    xdp.tradetype,
    xdp.tenantid,
    sum(xdp.openposition) AS openposition
   FROM taomish.xceler_dashboardservice_physicalopenposition xdp
  GROUP BY xdp.tradetype, xdp.profitcenter, (to_char(xdp.deliveryenddate, 'FMMonthYYYY'::text)), xdp.trantype, xdp.tenantid;</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-218">
        <createView fullDefinition="false" viewName="xceler_dashboardservice_phyopenposbytrader">SELECT taomish.uuid_generate_v4() AS uuid,
    xdp.trader,
    to_char(xdp.deliveryenddate, 'FMMonthYYYY'::text) AS shipmentmonth,
    xdp.trantype AS transactiontype,
    xdp.tradetype,
    xdp.tenantid,
    sum(xdp.openposition) AS openposition
   FROM taomish.xceler_dashboardservice_physicalopenposition xdp
  GROUP BY xdp.tradetype, xdp.trader, (to_char(xdp.deliveryenddate, 'FMMonthYYYY'::text)), xdp.trantype, xdp.tenantid;</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-219">
        <createView fullDefinition="false" viewName="xceler_dashboardservice_physicalm2m">SELECT taomish.uuid_generate_v4() AS uuid,
    phym2mrz.tradeid,
    phym2mrz.tradetype,
    phym2mrz.trantype,
    phym2mrz.quantity,
    phym2mrz.tradeprice,
    phym2mrz.currency,
    phym2mrz.deliveryenddate,
    phym2mrz.realizeddate,
    phym2mrz.realizedpnl,
    phym2mrz.m2mpnl,
    phym2mrz.m2muom,
    phym2mrz.rundate,
    phym2mrz.commodity,
    phym2mrz.profitcenter,
    phym2mrz.counterparty,
    phym2mrz.company,
    phym2mrz.trader,
    phym2mrz.tenantid
   FROM taomish.xceler_dashboardservice_physicalm2mrealizedpnl phym2mrz
  WHERE (phym2mrz.realizeddate IS NULL);</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-220">
        <createView fullDefinition="false" viewName="xceler_dashboardservice_physicalrealized">SELECT taomish.uuid_generate_v4() AS uuid,
    phym2mrz.tradeid,
    phym2mrz.tradetype,
    phym2mrz.trantype,
    phym2mrz.quantity,
    phym2mrz.tradeprice,
    phym2mrz.currency,
    phym2mrz.deliveryenddate,
    phym2mrz.realizeddate,
    phym2mrz.realizedpnl,
    phym2mrz.m2mpnl,
    phym2mrz.realizeduom,
    phym2mrz.rundate,
    phym2mrz.commodity,
    phym2mrz.profitcenter,
    phym2mrz.counterparty,
    phym2mrz.company,
    phym2mrz.trader,
    phym2mrz.tenantid
   FROM taomish.xceler_dashboardservice_physicalm2mrealizedpnl phym2mrz
  WHERE (phym2mrz.realizeddate IS NOT NULL);</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-221">
        <createView fullDefinition="false" viewName="xceler_report_pruploadandshipment">SELECT taomish.uuid_generate_v4() AS uuid,
    xts.tenant_id,
    xtp.broker,
    xtp.commodity,
    xtp.company,
    xtp.counterparty,
    xtp.delivery_end_date,
    xtp.grade,
    xtp.incoterm,
    xtp.price_type,
    xtp.profitcenter,
    xtp.quantityuom,
    xtp.trade_date_time AS trade_date,
    xtp.trade_id,
    xtp.trade_price_currency,
    xtp.trade_quantity,
        CASE
            WHEN (xtps.uuid IS NOT NULL) THEN 'Fullfilled'::text
            ELSE 'Confirmed'::text
        END AS trade_status,
        CASE
            WHEN (xtp.trade_transaction_type = 0) THEN 'BUY'::text
            ELSE 'SELL'::text
        END AS trade_transaction_type,
    xtp.trade_type,
    xtp.load_location,
    xtp.unload_location,
    xtp.external_record,
    xaa.load_quantity AS actualized_quantity,
    xts.vessel_name,
    xts.voyage_no AS trip_no,
    xbl.bl_date,
    xts.created_timestamp AS allocation_date,
    unload_loc.ul_parent AS unload_country,
    xcp.counterparty_type_code AS counterparty_type,
    'ACTUALIZED'::text AS obligation_state,
    xaa.planned_obligation_id,
    xaa.actualized_quantity_id,
    xbl.bl_number,
    xts.plan_id
   FROM ((((((taomish.xceler_transportallocationservice_seafreightdetails xts
     LEFT JOIN taomish.xceler_tradeplanningservice_plannedtradeobligation xtp ON ((((xts.plan_id)::text = (xtp.plan_id)::text) AND ((xts.tenant_id)::text = (xtp.tenant_id)::text))))
     JOIN ( SELECT mos.uuid,
            mos.settled,
            mos.stocked,
            mos.cndninvoiced,
            mos.deliverystarted,
            mos.provinvoiced,
            mos.actualized,
            mos.priced,
            mos.partiallyfxallocated,
            mos.discharged,
            mos.docbypassfinal,
            mos.fxallocated,
            mos.docbypassboth,
            mos.provpriced,
            mos.finalinvoiced,
            mos.initialinvoiced,
            mos.planned,
            mos.partiallysettled,
            mos.docbypasscommercial,
            mos.docbypasscndn,
            mos.docbypass,
            mos.partiallypriced
           FROM taomish.mvw_obligation_states mos
          WHERE (mos.actualized = 'true'::text)) xtps ON ((xtp.uuid = xtps.uuid)))
     LEFT JOIN taomish.xceler_actualizationservice_actualizedquantity xaa ON ((((xaa.planned_obligation_id)::text = (xtp.planned_obligation_id)::text) AND ((xaa.tenant_id)::text = (xtp.tenant_id)::text))))
     LEFT JOIN taomish.xceler_actualizationservice_billoflanding xbl ON (((xbl.split_sequence_number = xaa.split_sequence_number) AND ((xbl.planned_obligation_id)::text = (xtp.planned_obligation_id)::text) AND ((xbl.tenant_id)::text = (xaa.tenant_id)::text))))
     LEFT JOIN ( SELECT xcl1.tenant_id AS ul_tenantid,
            xcl1.name AS ul_name,
            xcl1.parent AS ul_parent
           FROM taomish.xceler_configservice_location xcl1
          WHERE (lower((xcl1.location_type)::text) = ANY (ARRAY['port'::text, 'terminal'::text]))) unload_loc ON ((((unload_loc.ul_tenantid)::text = (xts.tenant_id)::text) AND ((unload_loc.ul_name)::text = (xtp.unload_location)::text))))
     LEFT JOIN taomish.xceler_configservice_counterparty xcp ON ((((xts.tenant_id)::text = (xcp.tenant_id)::text) AND ((xcp.code)::text = (xtp.counterparty)::text))))
  WHERE (xtp.external_record IS FALSE);</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-222">
        <createView fullDefinition="false" viewName="xceler_pricingservice_priceallocationview">SELECT taomish.uuid_generate_v4() AS uuid,
    pt.created_by,
    pt.created_timestamp,
    pt.tenant_id,
    pt.updated_by,
    pt.updated_timestamp,
    pt.trade_id,
    pt.trade_price,
    pt.planned_quantity AS obligation_quantity,
    pt.obligation_state,
    pt.trade_obligation_id,
    pt.trade_price_uom,
    pt.quantityuom,
    pt.trade_settlement_currency,
    sum(COALESCE(pa.quantity, (0)::double precision)) AS total_price_allocated_quantity,
        CASE
            WHEN (((pt.obligation_state -&gt;&gt; 'PLANNED'::text) = 'false'::text) AND ((pt.obligation_state -&gt;&gt; 'ACTUALIZED'::text) = 'false'::text) AND ((pt.obligation_state -&gt;&gt; 'INITIAL_INVOICE'::text) = 'false'::text)) THEN 'Unplanned'::text
            WHEN (((pt.obligation_state -&gt;&gt; 'PLANNED'::text) = 'true'::text) AND ((pt.obligation_state -&gt;&gt; 'ACTUALIZED'::text) = 'false'::text) AND ((pt.obligation_state -&gt;&gt; 'INITIAL_INVOICE'::text) = 'false'::text)) THEN 'Planned'::text
            WHEN (((pt.obligation_state -&gt;&gt; 'PLANNED'::text) = 'true'::text) AND ((pt.obligation_state -&gt;&gt; 'ACTUALIZED'::text) = 'true'::text) AND ((pt.obligation_state -&gt;&gt; 'INITIAL_INVOICE'::text) = 'false'::text)) THEN 'Actualized'::text
            WHEN (((pt.obligation_state -&gt;&gt; 'PLANNED'::text) = 'true'::text) AND ((pt.obligation_state -&gt;&gt; 'ACTUALIZED'::text) = 'true'::text) AND ((pt.obligation_state -&gt;&gt; 'INITIAL_INVOICE'::text) = 'true'::text)) THEN 'Commercial Invoiced'::text
            ELSE NULL::text
        END AS obligation_status
   FROM (taomish.xceler_tradeplanningservice_plannedtradeobligation pt
     LEFT JOIN taomish.xceler_pricingservice_priceallocation pa ON (((pt.trade_obligation_id)::text = (pa.obligation_id)::text)))
  WHERE ((pt.planned_obligation_status)::text = 'active'::text)
  GROUP BY pt.created_by, pt.created_timestamp, pt.tenant_id, pt.updated_by, pt.updated_timestamp, pt.trade_id, pt.trade_price, pt.planned_quantity, pt.obligation_state, pt.trade_obligation_id, pt.trade_price_uom, pt.quantityuom, pt.trade_settlement_currency;</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-223">
        <createView fullDefinition="false" viewName="vw_planned_obligations_doc_by_pass">SELECT xtp.updated_timestamp AS plan_max_time,
    taomish.uuid_generate_v4() AS uuid,
    xtp.created_by,
    xtp.updated_by,
    xtp.created_timestamp,
    xtp.updated_timestamp,
    xtp.tenant_id,
    xto.circle_string_seq,
    xto.broker,
    xto.commodity,
    xto.company,
    xto.counterparty,
    xto.crop_origin,
    xto.delivery_date,
    xto.delivery_end_date,
    xto.delivery_start_date,
    xto.grade,
    xto.incoterm,
    xto.location,
    xto.obligation_date,
    xto.doc_by_pass_id AS plan_id,
    (xtp.uuid)::character varying AS plan_uuid,
    xto.planned_obligation_id,
    xto.planned_quantity,
    xto.price_type,
    xto.profitcenter AS profit_center,
    COALESCE(xpt.price_status, (('No Price Line Found'::character varying)::text)::character varying) AS pricing_status,
    xto.quantityuom,
    xto.reference_number,
    xto.trade_date_time,
    xto.trade_id,
    xto.trade_obligation_id,
    xto.trade_obligation_uuid,
    xto.trade_price,
    xto.trade_price_currency,
    xto.trade_price_uom,
    xto.trade_quantity,
    xto.trade_transaction_type,
    xto.trade_type,
    xto.trade_uuid,
    xto.no_of_units,
    xto.remarks,
    xto.brand,
    xto.season,
    xto.load_location,
    xto.unload_location,
    xto.payment_term,
    xto.trader,
    xto.fx_rate,
    xto.provisional_fx_rate,
    xto.provisional_price_percentage,
    xto.provisional_price_type,
    xto.provisional_price,
    xto.trade_settlement_currency,
    xto.premiun_cost,
    xto.discount_cost,
    xto.total_trade_qty,
    xto.broker_reference_number,
    xto.provisional_price_uom,
    xto.provisional_price_currency,
    xto.planned_obligation_status,
    xto.parent_planned_obligation,
    xto.shipment_month,
    xto.external_record,
    xpp.quantity,
    xtp.match_type,
    xts.allocation_type,
    xts.vessel_id,
    xts.vessel_name,
    xto.trade_settlement_reference,
    false AS transport_allocated_status,
        CASE
            WHEN (states.priced = 'true'::text) THEN 'Fully Allocated'::text
            ELSE
            CASE
                WHEN (states.partiallypriced = 'true'::text) THEN 'Partially Allocated'::text
                ELSE 'Not Allocated'::text
            END
        END AS price_allocationstatus,
    (states.settled)::boolean AS settled,
    (states.stocked)::boolean AS stocked,
    (states.cndninvoiced)::boolean AS cndninvoiced,
    (states.deliverystarted)::boolean AS deliverystarted,
    (states.provinvoiced)::boolean AS provinvoiced,
    (states.actualized)::boolean AS actualized,
    (states.priced)::boolean AS priced,
    (states.partiallyfxallocated)::boolean AS partiallyfxallocated,
    (states.discharged)::boolean AS discharged,
    (states.docbypassfinal)::boolean AS docbypassfinal,
    (states.fxallocated)::boolean AS fxallocated,
    (states.docbypassboth)::boolean AS docbypassboth,
    (states.provpriced)::boolean AS provpriced,
    (states.finalinvoiced)::boolean AS finalinvoiced,
    (states.initialinvoiced)::boolean AS initialinvoiced,
    (states.planned)::boolean AS planned,
    (states.partiallysettled)::boolean AS partiallysettled,
    (states.docbypasscommercial)::boolean AS docbypasscommercial,
    (states.docbypasscndn)::boolean AS docbypasscndn,
    (states.docbypass)::boolean AS docbypass,
    (states.partiallypriced)::boolean AS partiallypriced,
    xto.balance_quantity,
    xto.obligation_state
   FROM (((((taomish.xceler_tradeplanningservice_physicaltradeplan xtp
     JOIN taomish.xceler_tradeplanningservice_plannedtradeobligation xto ON (((xtp.planning_id)::text = (xto.doc_by_pass_id)::text)))
     JOIN taomish.mvw_obligation_states states ON ((states.uuid = xto.uuid)))
     LEFT JOIN taomish.xceler_transportallocationservice_seafreightdetails xts ON (((xts.plan_id)::text = (xto.plan_id)::text)))
     LEFT JOIN taomish.xceler_pricingservice_advancedtradeprice xpt ON (((xpt.obligation_id)::text = (xto.trade_id)::text)))
     LEFT JOIN ( SELECT sum(cpp.quantity) AS quantity,
            cpp.obligation_id,
            cpp.tenant_id
           FROM taomish.xceler_pricingservice_priceallocation cpp
          GROUP BY cpp.obligation_id, cpp.tenant_id) xpp ON ((((xpp.obligation_id)::text = (xto.planned_obligation_id)::text) AND ((xpp.tenant_id)::text = (xto.tenant_id)::text))));</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-224">
        <createView fullDefinition="false" viewName="vw_xceler_report_ops_position_report">SELECT view1.uuid,
    view1.tenant_id,
    view1.trade_id,
    view1.trade_type,
    view1.trade_transaction_type,
    view1.trade_date_time,
    view1.commodity,
    view1.incoterm,
    view1.delivery_end_date,
    view1.counterparty,
    view1.planned_obligation_id,
    view1.trade_quantity,
    view1.company,
    view1.profitcenter,
    view1.quantityuom,
    view1.deliverymonth,
    view1.buy_position,
    view1.sell_position,
    view1.port,
    unload_loc.ul_parent AS country,
    view1.actualized_quantity,
    view1.invoiced_quantity
   FROM (( SELECT taomish.uuid_generate_v4() AS uuid,
            xtp.tenant_id,
            xtp.trade_id,
            xtp.planned_obligation_id,
            xtp.trade_type,
            xtp.trade_transaction_type,
            xtp.trade_date_time,
            xtp.commodity,
            xtp.incoterm,
            xtp.delivery_end_date,
            xtp.counterparty,
            sum(xtp.planned_quantity) AS trade_quantity,
            xtp.company,
            xtp.profitcenter,
            xtp.quantityuom,
            to_char(xtp.delivery_end_date, 'FMMonth-YYYY'::text) AS deliverymonth,
                CASE
                    WHEN (xtp.trade_transaction_type = 0) THEN sum(xtp.planned_quantity)
                    ELSE (0)::double precision
                END AS buy_position,
                CASE
                    WHEN (xtp.trade_transaction_type = 1) THEN sum(xtp.planned_quantity)
                    ELSE (0)::double precision
                END AS sell_position,
                CASE
                    WHEN (xtp.load_location IS NULL) THEN xtp.unload_location
                    ELSE xtp.load_location
                END AS port,
            xaa.load_quantity AS actualized_quantity,
            sum(xti.quantity) AS invoiced_quantity
           FROM ((( SELECT xtp_1.uuid,
                    xtp_1.created_by,
                    xtp_1.created_timestamp,
                    xtp_1.tenant_id,
                    xtp_1.updated_by,
                    xtp_1.updated_timestamp,
                    xtp_1.broker,
                    xtp_1.circle_string_seq,
                    xtp_1.commodity,
                    xtp_1.company,
                    xtp_1.counterparty,
                    xtp_1.crop_origin,
                    xtp_1.delivery_date,
                    xtp_1.delivery_end_date,
                    xtp_1.delivery_start_date,
                    xtp_1.grade,
                    xtp_1.incoterm,
                    xtp_1.location,
                    xtp_1.obligation_date,
                    xtp_1.plan_id,
                    xtp_1.plan_uuid,
                    xtp_1.planned_obligation_id,
                    xtp_1.planned_quantity,
                    xtp_1.price_type,
                    xtp_1.profitcenter,
                    xtp_1.quantityuom,
                    xtp_1.reference_number,
                    xtp_1.trade_date_time,
                    xtp_1.trade_id,
                    xtp_1.trade_obligation_id,
                    xtp_1.trade_obligation_uuid,
                    xtp_1.trade_price,
                    xtp_1.trade_price_currency,
                    xtp_1.trade_price_uom,
                    xtp_1.trade_quantity,
                    xtp_1.trade_transaction_type,
                    xtp_1.trade_type,
                    xtp_1.trade_uuid,
                    xtp_1.no_of_units,
                    xtp_1.remarks,
                    xtp_1.brand,
                    xtp_1.season,
                    xtp_1.load_location,
                    xtp_1.unload_location,
                    xtp_1.payment_term,
                    xtp_1.trader,
                    xtp_1.fx_rate,
                    xtp_1.provisional_fx_rate,
                    xtp_1.provisional_price_percentage,
                    xtp_1.provisional_price_type,
                    xtp_1.provisional_price,
                    xtp_1.tradesettlementcurrency,
                    xtp_1.trade_settlement_currency,
                    xtp_1.premiun_cost,
                    xtp_1.discount_cost,
                    xtp_1.total_trade_qty,
                    xtp_1.broker_reference_number,
                    xtp_1.provisional_price_uom,
                    xtp_1.provisional_price_currency,
                    xtp_1.planned_obligation_status,
                    xtp_1.parent_planned_obligation,
                    xtp_1.shipment_month,
                    xtp_1.external_record,
                    xtp_1.delivery_term_clause,
                    xtp_1.payment_terms_clause,
                    xtp_1.quantity_terms_clause,
                    xtp_1.quality_terms_clause,
                    xtp_1.pricing_terms_clause,
                    xtp_1.broker_reference,
                    xtp_1.comments,
                    xtp_1.trade_settlement_reference,
                    xtp_1.doc_by_pass_id,
                    xtp_1.package_type,
                    xtp_1.external_package,
                    xtp_1.internal_package,
                    xtp_1.internal_package_unit,
                    xtp_1.external_package_unit,
                    xtp_1.balance_quantity,
                    xtp_1.contract_term,
                    xtp_1.provisional_pricing,
                    xtp_1.weight_basis,
                    xtp_1.tolerance_value,
                    xtp_1.external_reference,
                    xtp_1.price_ticker,
                    xtp_1.special_instructions,
                    xtp_1.match_type,
                    xtp_1.settlement_tolerance_value,
                    xtp_1.obligation_state
                   FROM taomish.xceler_tradeplanningservice_plannedtradeobligation xtp_1
                  WHERE ((NOT ((xtp_1.trade_id)::text IN ( SELECT abc.trade_id
                           FROM ( SELECT xtp_2.tenant_id,
                                    xtp_2.trade_id,
                                    count(mvn.initialinvoiced) FILTER (WHERE (mvn.initialinvoiced = 'true'::text)) AS invoiced,
                                    count(*) AS total
                                   FROM (taomish.mvw_obligation_states mvn
                                     JOIN taomish.xceler_tradeplanningservice_plannedtradeobligation xtp_2 ON (((xtp_2.uuid = mvn.uuid) AND ((xtp_2.planned_obligation_status)::text = 'active'::text))))
                                  GROUP BY xtp_2.tenant_id, xtp_2.trade_id
                                  ORDER BY xtp_2.trade_id) abc
                          WHERE (abc.invoiced = abc.total)))) AND ((xtp_1.planned_obligation_status)::text = 'active'::text) AND (xtp_1.external_record = false))) xtp
             LEFT JOIN ( SELECT xceler_tradesettlementservice_tradeinvoice.tenant_id,
                    xceler_tradesettlementservice_tradeinvoice.quantity,
                    xceler_tradesettlementservice_tradeinvoice.planned_obligation_id,
                    xceler_tradesettlementservice_tradeinvoice.invoice_type
                   FROM taomish.xceler_tradesettlementservice_tradeinvoice
                  WHERE (((xceler_tradesettlementservice_tradeinvoice.status)::text &lt;&gt; 'void'::text) AND ((xceler_tradesettlementservice_tradeinvoice.final_invoice_type)::text = 'Normal Invoice'::text))) xti ON ((((xtp.tenant_id)::text = (xti.tenant_id)::text) AND ((xtp.planned_obligation_id)::text = (xti.planned_obligation_id)::text))))
             LEFT JOIN ( SELECT xaa2.trade_id,
                    xaa2.tenant_id,
                    sum(xaa2.unload_quantity) AS load_quantity,
                    xaa2.planned_obligation_id
                   FROM taomish.xceler_actualizationservice_actualizedquantity xaa2
                  GROUP BY xaa2.trade_id, xaa2.tenant_id, xaa2.planned_obligation_id) xaa ON ((((xtp.tenant_id)::text = (xaa.tenant_id)::text) AND ((xtp.planned_obligation_id)::text = (xaa.planned_obligation_id)::text))))
          WHERE ((xtp.trade_type)::text = ANY (ARRAY[('Physical'::character varying)::text, ('Paper'::character varying)::text]))
          GROUP BY xtp.tenant_id, xtp.trade_id, xtp.planned_obligation_id, xtp.trade_type, xtp.trade_transaction_type, xtp.trade_date_time, xtp.commodity, xtp.incoterm, xtp.delivery_end_date, xtp.counterparty, xtp.company, xtp.profitcenter, xtp.quantityuom, xtp.load_location, xtp.unload_location, xaa.load_quantity) view1
     LEFT JOIN ( SELECT xcl1.tenant_id AS ul_tenantid,
            xcl1.name AS ul_name,
            xcl1.parent AS ul_parent
           FROM taomish.xceler_configservice_location xcl1
          WHERE (lower((xcl1.location_type)::text) = ANY (ARRAY['port'::text, 'terminal'::text]))) unload_loc ON ((((unload_loc.ul_tenantid)::text = (view1.tenant_id)::text) AND ((unload_loc.ul_name)::text = (view1.port)::text))));</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-225">
        <createView fullDefinition="false" viewName="vw_xceler_staggered_price_report">SELECT taomish.uuid_generate_v4() AS uuid,
    xtp.tenant_id,
    xtp.trade_id,
    xtp.trade_type,
    xtp.provisional_pricing AS is_provisional_pricing,
    xtp.trade_date_time AS trade_date,
    xtp.planned_quantity AS quantity,
    xtp.quantityuom AS quantity_uom,
    xtp.trade_price,
    xtp.trade_price_uom AS trade_price_currency,
    xtp.provisional_price,
    xtp.trade_transaction_type,
    xtp.price_type,
    'Confirmed'::text AS trade_status,
    xtp.planned_obligation_id,
    xtp.delivery_end_date,
    xtp.commodity,
    xtp.company,
    xtp.counterparty,
    xtp.profitcenter,
    (xtp.planned_quantity - xtp.balance_quantity) AS planned_quantity,
        CASE
            WHEN (xos.priced = 'true'::text) THEN 'Priced'::text
            WHEN (xos.partiallypriced = 'true'::text) THEN 'Partially Priced'::text
            ELSE 'Unpriced'::text
        END AS price_status,
    xtp.trade_price AS average_price,
    xpp.priced_quantity,
        CASE
            WHEN (xpp.priced_quantity IS NULL) THEN xtp.planned_quantity
            WHEN (xos.priced = 'true'::text) THEN (0)::double precision
            ELSE (xtp.planned_quantity - xpp.priced_quantity)
        END AS balance_quantity,
        CASE
            WHEN (xos.finalinvoiced = 'true'::text) THEN 'invoice generated'::text
            ELSE NULL::text
        END AS invoice_status,
    xtp.incoterm,
    xtc.cost_value AS freight,
    xtp.plan_id,
    xtp.updated_timestamp AS allocation_date,
    xaa.load_quantity AS actualized_quantity,
    xaa.bl_number,
    xaa.bl_date,
    xtp.broker
   FROM (((((( SELECT xtt.uuid,
            xtt.created_by,
            xtt.created_timestamp,
            xtt.tenant_id,
            xtt.updated_by,
            xtt.updated_timestamp,
            xtt.broker,
            xtt.circle_string_seq,
            xtt.commodity,
            xtt.company,
            xtt.counterparty,
            xtt.crop_origin,
            xtt.delivery_date,
            xtt.delivery_end_date,
            xtt.delivery_start_date,
            xtt.grade,
            xtt.incoterm,
            xtt.location,
            xtt.obligation_date,
            xtt.plan_id,
            xtt.plan_uuid,
            xtt.planned_obligation_id,
            xtt.planned_quantity,
            xtt.price_type,
            xtt.profitcenter,
            xtt.quantityuom,
            xtt.reference_number,
            xtt.trade_date_time,
            xtt.trade_id,
            xtt.trade_obligation_id,
            xtt.trade_obligation_uuid,
            xtt.trade_price,
            xtt.trade_price_currency,
            xtt.trade_price_uom,
            xtt.trade_quantity,
            xtt.trade_transaction_type,
            xtt.trade_type,
            xtt.trade_uuid,
            xtt.no_of_units,
            xtt.remarks,
            xtt.brand,
            xtt.season,
            xtt.load_location,
            xtt.unload_location,
            xtt.payment_term,
            xtt.trader,
            xtt.fx_rate,
            xtt.provisional_fx_rate,
            xtt.provisional_price_percentage,
            xtt.provisional_price_type,
            xtt.provisional_price,
            xtt.tradesettlementcurrency,
            xtt.trade_settlement_currency,
            xtt.premiun_cost,
            xtt.discount_cost,
            xtt.total_trade_qty,
            xtt.broker_reference_number,
            xtt.provisional_price_uom,
            xtt.provisional_price_currency,
            xtt.planned_obligation_status,
            xtt.parent_planned_obligation,
            xtt.shipment_month,
            xtt.external_record,
            xtt.delivery_term_clause,
            xtt.payment_terms_clause,
            xtt.quantity_terms_clause,
            xtt.quality_terms_clause,
            xtt.pricing_terms_clause,
            xtt.broker_reference,
            xtt.comments,
            xtt.trade_settlement_reference,
            xtt.doc_by_pass_id,
            xtt.package_type,
            xtt.balance_quantity,
            xtt.contract_term,
            xtt.external_package,
            xtt.external_package_unit,
            xtt.internal_package_unit,
            xtt.internal_package,
            xtt.provisional_pricing,
            xtt.weight_basis,
            xtt.tolerance_value,
            xtt.external_reference,
            xtt.price_ticker,
            xtt.special_instructions,
            xtt.match_type,
            xtt.settlement_tolerance_value,
            xtt.obligation_state,
            xtt.quotation_period_clause
           FROM taomish.xceler_tradeplanningservice_plannedtradeobligation xtt
          WHERE ((xtt.provisional_pricing = true) AND ((xtt.planned_obligation_status)::text = 'active'::text) AND (xtt.external_record = false) AND ((xtt.price_type)::text = ANY (ARRAY[('PTBF'::character varying)::text, ('Basis'::character varying)::text])))) xtp
     LEFT JOIN ( SELECT xct.tenant_id,
            xct.trade_id,
            sum(xct.cost_value) AS cost_value
           FROM taomish.xceler_costservice_tradecost xct
          WHERE (((xct.cost_type)::text = 'Per Unit'::text) AND ((xct.name)::text ~~* '%Freight%'::text))
          GROUP BY xct.tenant_id, xct.trade_id) xtc ON ((((xtc.tenant_id)::text = (xtp.tenant_id)::text) AND ((xtc.trade_id)::text = (xtp.trade_id)::text))))
     LEFT JOIN taomish.vw_xceler_pricingservice_staggeredpriceline xptl ON ((((xptl.tenant_id)::text = (xtp.tenant_id)::text) AND (xptl.obligation_id = (xtp.planned_obligation_id)::text))))
     LEFT JOIN taomish.mvw_obligation_states xos ON ((xos.uuid = xtp.uuid)))
     LEFT JOIN ( SELECT xpp_1.obligation_id,
            xpp_1.tenant_id,
            sum(xpp_1.quantity) AS priced_quantity
           FROM taomish.xceler_pricingservice_priceallocation xpp_1
          GROUP BY xpp_1.obligation_id, xpp_1.tenant_id) xpp ON ((((xtp.planned_obligation_id)::text = (xpp.obligation_id)::text) AND ((xtp.tenant_id)::text = (xpp.tenant_id)::text))))
     LEFT JOIN ( SELECT xa.tenant_id,
            xa.planned_obligation_id,
            sum(xa.load_quantity) AS load_quantity,
            max((xab.bl_number)::text) AS bl_number,
            max(xab.bl_date) AS bl_date
           FROM (taomish.xceler_actualizationservice_actualizedquantity xa
             JOIN taomish.xceler_actualizationservice_billoflanding xab ON ((((xa.planned_obligation_id)::text = (xab.planned_obligation_id)::text) AND ((xa.tenant_id)::text = (xab.tenant_id)::text) AND (xab.split_sequence_number = xa.split_sequence_number))))
          GROUP BY xa.tenant_id, xa.planned_obligation_id) xaa ON ((((xaa.tenant_id)::text = (xtp.tenant_id)::text) AND ((xaa.planned_obligation_id)::text = (xtp.planned_obligation_id)::text))));</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-226">
        <addUniqueConstraint columnNames="inventory_id" constraintName="xceler_inventory_inventory_id_key" tableName="xceler_inventory"/>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-227">
        <createView fullDefinition="false" viewName="xceler_vesselplanning_plandetails">WITH obligation_status(plan_id, status) AS (
         SELECT temp.plan_id,
                CASE
                    WHEN (temp.status_code = 3) THEN 'DELIVERY_STARTED'::text
                    WHEN (temp.status_code = 2) THEN 'PLANNED'::text
                    WHEN (temp.status_code = 1) THEN 'SETTLED'::text
                    ELSE NULL::text
                END AS status
           FROM ( SELECT xtp_1.plan_id,
                    max(
                        CASE
                            WHEN ((x.actualized = 'true'::text) OR (x.deliverystarted = 'true'::text)) THEN 3
                            WHEN (x.planned = 'true'::text) THEN 2
                            WHEN (x.settled = 'true'::text) THEN 1
                            ELSE NULL::integer
                        END) AS status_code
                   FROM (taomish.mvw_obligation_states x
                     JOIN taomish.xceler_tradeplanningservice_plannedtradeobligation xtp_1 ON ((x.uuid = xtp_1.uuid)))
                  GROUP BY xtp_1.plan_id) temp
        )
 SELECT COALESCE(bpt.buyquantity, (0.0)::double precision) AS buyquantity,
    COALESCE(spt.sellquantity, (0.0)::double precision) AS sellquantity,
    'MT'::text AS buyquantityuom,
    'MT'::text AS sellquantiyuom,
    sfd.vessel_name,
    sfd.voyage_no AS vessel_id,
    xtp.uuid,
    xtp.created_by,
    xtp.created_timestamp,
    xtp.tenant_id,
    xtp.updated_by,
    xtp.updated_timestamp,
    xtp.comment,
    xtp.match_quantity,
    xtp.match_type,
    xtp.planning_date,
    xtp.planning_id,
    xtp.settlement_currency,
    xtp.settlement_price,
    sld.load_port,
    suld.discharge_port,
    COALESCE(bpt.status, spt.status) AS status
   FROM (((((taomish.xceler_tradeplanningservice_physicaltradeplan xtp
     LEFT JOIN ( SELECT xtp_1.plan_id,
            xtp_1.tenant_id,
            os.status,
            sum((
                CASE
                    WHEN ((xcu.conversion_factor IS NOT NULL) AND (xcu.conversion_factor &lt;&gt; (0)::double precision)) THEN xcu.conversion_factor
                    ELSE (1)::double precision
                END * xtp_1.planned_quantity)) AS buyquantity
           FROM ((taomish.xceler_tradeplanningservice_plannedtradeobligation xtp_1
             LEFT JOIN obligation_status os ON (((os.plan_id)::text = (xtp_1.plan_id)::text)))
             LEFT JOIN taomish.xceler_configservice_uomconversion xcu ON ((((xcu.tenant_id)::text = (xtp_1.tenant_id)::text) AND ((xcu.name)::text = (xtp_1.quantityuom)::text) AND ((xcu.to_uom)::text = 'MT'::text))))
          WHERE (xtp_1.trade_transaction_type = 0)
          GROUP BY os.status, xtp_1.tenant_id, xtp_1.plan_id) bpt ON ((((bpt.plan_id)::text = (xtp.planning_id)::text) AND ((bpt.tenant_id)::text = (xtp.tenant_id)::text))))
     LEFT JOIN ( SELECT xtp_1.plan_id,
            xtp_1.tenant_id,
            os.status,
            sum((
                CASE
                    WHEN ((xcu.conversion_factor IS NOT NULL) AND (xcu.conversion_factor &lt;&gt; (0)::double precision)) THEN xcu.conversion_factor
                    ELSE (1)::double precision
                END * xtp_1.planned_quantity)) AS sellquantity
           FROM ((taomish.xceler_tradeplanningservice_plannedtradeobligation xtp_1
             LEFT JOIN obligation_status os ON (((os.plan_id)::text = (xtp_1.plan_id)::text)))
             LEFT JOIN taomish.xceler_configservice_uomconversion xcu ON ((((xcu.tenant_id)::text = (xtp_1.tenant_id)::text) AND ((xcu.name)::text = (xtp_1.quantityuom)::text) AND ((xcu.to_uom)::text = 'MT'::text))))
          WHERE (xtp_1.trade_transaction_type = 1)
          GROUP BY os.status, xtp_1.tenant_id, xtp_1.plan_id) spt ON ((((spt.plan_id)::text = (xtp.planning_id)::text) AND ((spt.tenant_id)::text = (xtp.tenant_id)::text))))
     LEFT JOIN ( SELECT xts.uuid,
            xts.created_by,
            xts.created_timestamp,
            xts.tenant_id,
            xts.updated_by,
            xts.updated_timestamp,
            xts.notes,
            xts.planned_obligation_id,
            xts.trade_id,
            xts.trade_type,
            xts.charterparty,
            xts.freight_capacity,
            xts.imo,
            xts.vessel_capacity,
            xts.vessel_flag,
            xtb.voyage_no,
            xts.vessel_name,
            xts.year,
            xts.barge,
            xts.connecting_vessel,
            xts.planned_obligation_ids,
            xts.tugboat,
            xts.plan_id,
            xts.allocation_type,
            xts.vessel_id
           FROM (taomish.xceler_transportallocationservice_seafreightdetails xts
             LEFT JOIN taomish.xceler_transportallocationservice_bookingmanagement xtb ON ((((xts.vessel_id)::text = (xtb.booking_number)::text) AND ((xts.tenant_id)::text = (xtb.tenant_id)::text))))) sfd ON ((((sfd.plan_id)::text = (xtp.planning_id)::text) AND ((sfd.tenant_id)::text = (xtp.tenant_id)::text))))
     LEFT JOIN ( SELECT DISTINCT ON (xts1.vessel_id) xts1.uuid,
            xts1.created_by,
            xts1.created_timestamp,
            xts1.tenant_id,
            xts1.updated_by,
            xts1.updated_timestamp,
            xts1.laycan_date,
            xts1.load_port,
            xts1.load_rate,
            xts1.notes,
            xts1.sailing_date,
            xts1.vessel_id,
            xts1.barge,
            xts1.tugboat,
            xts1.laycanfrom,
            xts1.laycanto,
            xts1.laycan_from,
            xts1.laycan_to
           FROM (taomish.xceler_transportallocationservice_seafreightloaddetails xts1
             LEFT JOIN taomish.xceler_transportallocationservice_bookingmanagement xtb ON ((((xts1.vessel_id)::text = (xtb.booking_number)::text) AND ((xts1.tenant_id)::text = (xtb.tenant_id)::text))))) sld ON ((((sld.vessel_id)::text = (sfd.vessel_id)::text) AND ((sld.tenant_id)::text = (sfd.tenant_id)::text))))
     LEFT JOIN ( SELECT DISTINCT ON (xts2.vessel_id) xts2.uuid,
            xts2.created_by,
            xts2.created_timestamp,
            xts2.tenant_id,
            xts2.updated_by,
            xts2.updated_timestamp,
            xts2.discharge_port,
            xts2.discharge_rate,
            xts2.eta_from,
            xts2.eta_to,
            xts2.notes,
            xts2.vessel_id
           FROM taomish.xceler_transportallocationservice_seafreightunloaddetails xts2) suld ON ((((suld.vessel_id)::text = (sfd.vessel_id)::text) AND ((suld.tenant_id)::text = (sfd.tenant_id)::text))));</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-228">
        <createView fullDefinition="false" viewName="vw_module_active_user_count">SELECT fin.tenant_id,
    (fin.result -&gt;&gt; 'ois'::text) AS ois,
    (fin.result -&gt;&gt; 'ctrm'::text) AS ctrm,
    (fin.result -&gt;&gt; 'treasury'::text) AS treasury
   FROM ( WITH service_counts AS (
                 SELECT xau.tenant_id,
                    jsonb_array_elements_text(((xau.product_subscription)::jsonb -&gt; 'selected'::text)) AS service
                   FROM taomish.xceler_authservice_usermaster xau
                  WHERE ((xau.product_subscription IS NOT NULL) AND (xau.user_master_status = true))
                )
         SELECT service_counts.tenant_id,
            jsonb_build_object('ctrm', count(*) FILTER (WHERE (service_counts.service = 'ctrm'::text)), 'ois', count(*) FILTER (WHERE (service_counts.service = 'ois'::text)), 'treasury', count(*) FILTER (WHERE (service_counts.service = 'treasury'::text))) AS result
           FROM service_counts
          GROUP BY service_counts.tenant_id) fin;</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-229">
        <addUniqueConstraint columnNames="statement_line, entry_date, transaction_date" constraintName="transaction_unique_constraint" tableName="treasury_statement_transaction"/>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-230">
        <createView fullDefinition="false" viewName="vw_workflow_config_steps">SELECT xceler_approval_service_approval_workflow_config.uuid,
    (step.value -&gt;&gt; 'sequence'::text) AS seq,
    step.value AS step
   FROM taomish.xceler_approval_service_approval_workflow_config,
    LATERAL jsonb_array_elements(xceler_approval_service_approval_workflow_config.workflow_steps) step(value);</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-231">
        <createView fullDefinition="false" viewName="vw_workflow_steps">SELECT xceler_approval_service_approval_workflow.uuid,
    (step.value -&gt;&gt; 'sequence'::text) AS seq,
    step.value AS step
   FROM taomish.xceler_approval_service_approval_workflow,
    LATERAL jsonb_array_elements(xceler_approval_service_approval_workflow.workflow_steps) step(value);</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-232">
        <createView fullDefinition="false" viewName="vw_xceler_intercompany_trade">SELECT xpict.uuid,
    xpict.tenant_id,
    (xpict.settlement_data -&gt;&gt; 'tradeId'::text) AS trade_id,
    (xpict.settlement_data -&gt;&gt; 'obligationId'::text) AS obligation_id,
    (b.value -&gt;&gt; 'tradeId'::text) AS buy_trade_id,
    (b.value -&gt;&gt; 'obligationId'::text) AS buy_obligation_id,
    (s.value -&gt;&gt; 'tradeId'::text) AS sell_trade_id,
    (s.value -&gt;&gt; 'obligationId'::text) AS sell_obligation_id
   FROM taomish.xceler_physicaltrade_inter_company_trade xpict,
    LATERAL jsonb_array_elements((xpict.settlement_data -&gt; 'interCompanyTradeDetails'::text)) b(value),
    LATERAL jsonb_array_elements((xpict.settlement_data -&gt; 'interCompanyTradeDetails'::text)) s(value)
  WHERE (((b.value -&gt;&gt; 'tradeTransactionType'::text) = 'BUY'::text) AND ((s.value -&gt;&gt; 'tradeTransactionType'::text) = 'SELL'::text));</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-233">
        <createView fullDefinition="false" viewName="xceler_dashboardservice_futureopenposition">SELECT xfut.uuid,
    xfut.trade_id AS tradeid,
    'Future'::text AS tradetype,
    (xfut.sell_open_position + xfut.buy_open_position) AS openposition,
    xftrd.expiry_date AS deliveryenddate,
    xftrd.uom AS futureuom,
        CASE
            WHEN (xftrd.trade_transaction_type = 1) THEN 'sell'::text
            ELSE 'buy'::text
        END AS trantype,
    xfut.commodity,
    xfut.profitcenter,
    xfut.counterparty,
    xfut.company,
    xftrd.trader_name AS trader,
    xfut.eod_run_date AS eodrundate,
    xfut.tenant_id AS tenantid
   FROM (taomish.xceler_eodservice_futuretradeeodpublished xfut
     JOIN taomish.xceler_eodervice_futuretradeeodrawdata xftrd ON ((((xfut.trade_id)::text = (xftrd.trade_id)::text) AND ((xfut.tenant_id)::text = (xftrd.tenant_id)::text))));</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-234">
        <createView fullDefinition="false" viewName="vw_planned_obligations_for_actualization">SELECT a.plan_max_time,
    a.uuid,
    a.created_by,
    a.updated_by,
    a.created_timestamp,
    a.updated_timestamp,
    a.tenant_id,
    a.circle_string_seq,
    a.broker,
    a.commodity,
    a.company,
    a.counterparty,
    a.crop_origin,
    a.delivery_date,
    a.delivery_end_date,
    a.delivery_start_date,
    a.grade,
    a.incoterm,
    a.location,
    a.obligation_date,
    a.plan_id,
    a.plan_uuid,
    a.planned_obligation_id,
    a.planned_quantity,
    a.price_type,
    a.profit_center,
    a.pricing_status,
    a.quantityuom,
    a.reference_number,
    a.trade_date_time,
    a.trade_id,
    a.trade_obligation_id,
    a.trade_obligation_uuid,
    a.trade_price,
    a.trade_price_currency,
    a.trade_price_uom,
    a.trade_quantity,
    a.trade_transaction_type,
    a.trade_type,
    a.trade_uuid,
    a.no_of_units,
    a.remarks,
    a.brand,
    a.season,
    a.load_location,
    a.unload_location,
    a.payment_term,
    a.trader,
    a.fx_rate,
    a.provisional_fx_rate,
    a.provisional_price_percentage,
    a.provisional_price_type,
    a.provisional_price,
    a.trade_settlement_currency,
    a.premiun_cost,
    a.discount_cost,
    a.total_trade_qty,
    a.broker_reference_number,
    a.provisional_price_uom,
    a.provisional_price_currency,
    a.planned_obligation_status,
    a.parent_planned_obligation,
    a.shipment_month,
    a.external_record,
    a.quantity,
    (a.match_type)::character varying AS match_type,
    a.allocation_type,
    a.voyage_no AS vessel_id,
    a.vessel_name,
    a.trade_settlement_reference,
    a.transport_allocated_status,
    a.price_allocationstatus,
    a.settled,
    a.stocked,
    a.cndninvoiced,
    a.deliverystarted,
    a.provinvoiced,
    a.actualized,
    a.priced,
    a.partiallyfxallocated,
    a.discharged,
    a.docbypassfinal,
    a.fxallocated,
    a.docbypassboth,
    a.provpriced,
    a.finalinvoiced,
    a.initialinvoiced,
    a.planned,
    a.partiallysettled,
    a.docbypasscommercial,
    a.docbypasscndn,
    a.docbypass,
    a.partiallypriced,
    a.balance_quantity,
    a.obligation_state
   FROM ( WITH obligations_to_fetch AS (
                 SELECT xtp_planned.uuid
                   FROM (taomish.mvw_obligation_states xtp_planned
                     JOIN taomish.mvw_obligation_states xtp_not_settled ON ((xtp_planned.uuid = xtp_not_settled.uuid)))
                  WHERE ((xtp_planned.planned = 'true'::text) AND (xtp_not_settled.settled = 'false'::text))
                )
         SELECT max(xtp.created_timestamp) OVER (PARTITION BY xtp.plan_id) AS plan_max_time,
            xtp.uuid,
            xtp.created_by,
            xtp.updated_by,
            xtp.created_timestamp,
            xtp.updated_timestamp,
            xtp.tenant_id,
            xtp.circle_string_seq,
            xtp.broker,
            xtp.commodity,
            xtp.company,
            xtp.counterparty,
            xtp.crop_origin,
            xtp.delivery_date,
            xtp.delivery_end_date,
            xtp.delivery_start_date,
            xtp.grade,
            xtp.incoterm,
            xtp.location,
            xtp.obligation_date,
            xtp.plan_id,
            xtp.plan_uuid,
            xtp.planned_obligation_id,
            xtp.planned_quantity,
            xtp.price_type,
            xtp.profitcenter AS profit_center,
            COALESCE(xpt.price_status, 'No Price Line Found'::character varying) AS pricing_status,
            xtp.quantityuom,
            xtp.reference_number,
            xtp.trade_date_time,
            xtp.trade_id,
            xtp.trade_obligation_id,
            xtp.trade_obligation_uuid,
            xtp.trade_price,
            xtp.trade_price_currency,
            xtp.trade_price_uom,
            xtp.trade_quantity,
            xtp.trade_transaction_type,
            xtp.trade_type,
            xtp.trade_uuid,
            xtp.no_of_units,
            xtp.remarks,
            xtp.brand,
            xtp.season,
            xtp.load_location,
            xtp.unload_location,
            xtp.payment_term,
            xtp.trader,
            xtp.fx_rate,
            xtp.provisional_fx_rate,
            xtp.provisional_price_percentage,
            xtp.provisional_price_type,
            xtp.provisional_price,
            xtp.trade_settlement_currency,
            xtp.trade_settlement_reference,
            xtp.premiun_cost,
            xtp.discount_cost,
            xtp.total_trade_qty,
            xtp.broker_reference_number,
            xtp.provisional_price_uom,
            xtp.provisional_price_currency,
            xtp.planned_obligation_status,
            xtp.parent_planned_obligation,
            xtp.shipment_month,
            xtp.external_record,
            xpp.quantity,
            xtp.match_type,
            xts.allocation_type,
            xts.voyage_no,
            xtp.balance_quantity,
            (states.settled)::boolean AS settled,
            (states.stocked)::boolean AS stocked,
            (states.cndninvoiced)::boolean AS cndninvoiced,
            (states.deliverystarted)::boolean AS deliverystarted,
            (states.provinvoiced)::boolean AS provinvoiced,
            (states.actualized)::boolean AS actualized,
            (states.priced)::boolean AS priced,
            (states.partiallyfxallocated)::boolean AS partiallyfxallocated,
            (states.discharged)::boolean AS discharged,
            (states.docbypassfinal)::boolean AS docbypassfinal,
            (states.fxallocated)::boolean AS fxallocated,
            (states.docbypassboth)::boolean AS docbypassboth,
            (states.provpriced)::boolean AS provpriced,
            (states.finalinvoiced)::boolean AS finalinvoiced,
            (states.initialinvoiced)::boolean AS initialinvoiced,
            (states.planned)::boolean AS planned,
            (states.partiallysettled)::boolean AS partiallysettled,
            (states.docbypasscommercial)::boolean AS docbypasscommercial,
            (states.docbypasscndn)::boolean AS docbypasscndn,
            (states.docbypass)::boolean AS docbypass,
            (states.partiallypriced)::boolean AS partiallypriced,
            xts.vessel_name,
            xtp.obligation_state,
                CASE
                    WHEN (((xtp.match_type)::text = 'Vessel Plan'::text) AND (xts.vessel_id IS NULL)) THEN true
                    ELSE false
                END AS transport_allocated_status,
                CASE
                    WHEN (states.priced = 'true'::text) THEN 'Fully Allocated'::text
                    ELSE
                    CASE
                        WHEN (states.partiallypriced = 'true'::text) THEN 'Partially Allocated'::text
                        ELSE 'Not Allocated'::text
                    END
                END AS price_allocationstatus
           FROM (((((taomish.xceler_tradeplanningservice_plannedtradeobligation xtp
             JOIN taomish.mvw_obligation_states states ON ((states.uuid = xtp.uuid)))
             JOIN obligations_to_fetch xtp2 ON ((xtp.uuid = xtp2.uuid)))
             LEFT JOIN ( SELECT sum(cpp.quantity) AS quantity,
                    cpp.obligation_id,
                    cpp.tenant_id
                   FROM taomish.xceler_pricingservice_priceallocation cpp
                  GROUP BY cpp.obligation_id, cpp.tenant_id) xpp ON ((((xpp.obligation_id)::text = (xtp.planned_obligation_id)::text) AND ((xpp.tenant_id)::text = (xtp.tenant_id)::text))))
             LEFT JOIN ( SELECT DISTINCT xceler_transportallocationservice_seafreightdetails.plan_id,
                    xceler_transportallocationservice_seafreightdetails.tenant_id,
                    xceler_transportallocationservice_seafreightdetails.allocation_type,
                    xceler_transportallocationservice_seafreightdetails.voyage_no,
                    xceler_transportallocationservice_seafreightdetails.vessel_name,
                    xceler_transportallocationservice_seafreightdetails.vessel_id
                   FROM taomish.xceler_transportallocationservice_seafreightdetails) xts ON ((((xts.plan_id)::text = (xtp.plan_id)::text) AND ((xts.tenant_id)::text = (xtp.tenant_id)::text))))
             LEFT JOIN taomish.xceler_pricingservice_advancedtradeprice xpt ON ((((xpt.obligation_id)::text = (xtp.trade_id)::text) AND ((xpt.tenant_id)::text = (xtp.tenant_id)::text))))) a
  ORDER BY a.plan_max_time DESC;</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-235">
        <createView fullDefinition="false" viewName="vw_xceler_pricing_details">SELECT xpa.uuid,
    xpa.created_by,
    xpa.created_timestamp,
    xpa.tenant_id,
    xpa.updated_by,
    xpa.updated_timestamp,
    xpa.price_line_id,
    xpa.obligation_id,
    xpa.trade_price_type,
    xpa.trade_quantity,
    xpa.trade_quantity_uom,
    xpa.price_status,
    xpa.priced_quantity,
    xtp.trade_price,
    xtp.trade_price_currency,
    xtp.trade_price_uom,
    COALESCE(xtp.provisional_price, (0)::double precision) AS provisional_price,
    COALESCE(xtp.fx_rate, (1)::double precision) AS fx_rate,
    xtp.trade_settlement_currency,
    xpa.trade_date,
    xpa.balance_quantity,
    xpa.average_price,
    xpa.priced_lot,
    xpa.balance_lot,
    xpa.trade_type,
    xtp.commodity,
    xpa.trade_transaction_type,
    xtp.delivery_start_date AS period_start_date,
    xtp.delivery_end_date AS period_end_date,
    xtp.incoterm,
    xtp.location,
    xtp.crop_origin AS origin,
    xtp.trader AS trader_name,
    xtp.counterparty,
    xtp.profitcenter AS profit_center,
    xtp.trade_id
   FROM (taomish.xceler_pricingservice_advancedtradeprice xpa
     JOIN taomish.xceler_tradeplanningservice_plannedtradeobligation xtp ON ((((xtp.tenant_id)::text = (xpa.tenant_id)::text) AND ((xtp.planned_obligation_id)::text = (xpa.obligation_id)::text))));</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-236">
        <addUniqueConstraint columnNames="facility_code, product_code, participant_code" constraintName="constraint_treasury_credit_utilization" tableName="xceler_treasury_credit_utilization"/>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-237">
        <addUniqueConstraint columnNames="campaign_name" constraintName="ois_campaign_campaign_name_key" tableName="ois_campaign"/>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-238">
        <addUniqueConstraint columnNames="lot_number" constraintName="ois_campaign_lot_number_key" tableName="ois_campaign"/>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-239">
        <addUniqueConstraint columnNames="strategy_id" constraintName="xceler_configservice_simple_processing_strategy_strategy_id_key" tableName="xceler_configservice_simple_processing_strategy"/>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-240">
        <addUniqueConstraint columnNames="internal_request_id" constraintName="xceler_e_invoice_tracking_internal_request_id_key" tableName="xceler_e_invoice_tracking"/>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-241">
        <createView fullDefinition="false" viewName="vw_settlement_grid_data">SELECT xtp2.uuid,
    xtp2.tenant_id,
    xtp2.created_timestamp,
    xtp2.updated_timestamp,
    xtp2.circle_string_seq,
    xtp2.reference_number,
    xtp2.planned_obligation_id,
    xtp2.trade_obligation_id,
    xtp2.trade_obligation_uuid,
    xtp2.plan_id,
    xtp2.plan_uuid,
    xtp2.trade_id,
    xtp2.trade_uuid,
    xtp2.no_of_units,
    xtp2.trade_transaction_type,
    xtp2.trade_date_time,
    xtp2.obligation_date,
    xtp2.commodity,
    xtp2.company,
    xtp2.counterparty,
    xtp2.trade_quantity,
    xtp2.delivery_date,
    xtp2.profitcenter,
    xtp2.incoterm,
    xtp2.location,
    xtp2.trade_type,
    xtp2.crop_origin,
    xtp2.quantityuom,
    xtp2.grade,
    xtp2.planned_quantity,
    xtp2.remarks,
    xtp2.brand,
    xtp2.season,
    xtp2.load_location,
    xtp2.unload_location,
    xtp2.provisional_price_type,
    xtp2.provisional_price,
    xtp2.provisional_price_percentage,
    xtp2.provisional_fx_rate,
    xtp2.payment_term,
    xtp2.fx_rate,
    xtp2.trader,
    xtp2.trade_settlement_currency,
    xtp2.delivery_start_date,
    xtp2.delivery_end_date,
    xtp2.broker,
    xtp2.price_type,
    xtp2.trade_price,
    xtp2.trade_price_currency,
    xtp2.trade_price_uom,
    xtp2.match_type,
    0 AS split_sequence_number,
    xtp2.doc_by_pass_id,
    xts.voyage_no AS vessel_id,
    xts.vessel_name,
    ( SELECT (count(*) &gt; 0)
           FROM taomish.xceler_actualizationservice_actualizedquantity xaa
          WHERE (((xaa.tenant_id)::text = (xtp2.tenant_id)::text) AND (xaa.split_sequence_number = (1)::double precision) AND ((xaa.planned_obligation_id)::text = (xtp2.planned_obligation_id)::text))) AS splitted
   FROM ((( SELECT DISTINCT xtp_1.uuid
           FROM taomish.mvw_obligation_states xtp_1
          WHERE (((xtp_1.actualized = 'true'::text) AND (xtp_1.initialinvoiced = 'false'::text) AND (xtp_1.provpriced = 'false'::text) AND (xtp_1.docbypass = 'false'::text)) OR ((xtp_1.discharged = 'true'::text) AND (xtp_1.finalinvoiced = 'false'::text) AND (xtp_1.docbypass = 'false'::text)) OR ((xtp_1.discharged = 'true'::text) AND (xtp_1.docbypass = 'true'::text) AND (xtp_1.docbypassfinal = 'false'::text)) OR ((xtp_1.provpriced = 'true'::text) AND (xtp_1.actualized = 'true'::text) AND (xtp_1.provinvoiced = 'false'::text)) OR ((xtp_1.provpriced = 'true'::text) AND (xtp_1.actualized = 'true'::text) AND (xtp_1.provinvoiced = 'true'::text) AND (xtp_1.priced = 'true'::text) AND (xtp_1.cndninvoiced = 'false'::text)) OR ((xtp_1.provpriced = 'true'::text) AND (xtp_1.actualized = 'true'::text) AND (xtp_1.provinvoiced = 'true'::text) AND (xtp_1.priced = 'false'::text) AND (xtp_1.partiallypriced = 'true'::text) AND (xtp_1.cndninvoiced = 'false'::text)) OR ((xtp_1.provpriced = 'true'::text) AND (xtp_1.discharged = 'true'::text) AND (xtp_1.provinvoiced = 'true'::text) AND (xtp_1.finalinvoiced = 'false'::text)) OR ((xtp_1.docbypass = 'true'::text) AND (xtp_1.docbypassboth = 'true'::text) AND (xtp_1.actualized = 'true'::text) AND (xtp_1.docbypasscommercial = 'false'::text)) OR ((xtp_1.docbypass = 'true'::text) AND (xtp_1.docbypassboth = 'true'::text) AND (xtp_1.actualized = 'true'::text) AND (xtp_1.docbypasscndn = 'false'::text)) OR ((xtp_1.docbypass = 'true'::text) AND (xtp_1.docbypassboth = 'false'::text) AND (xtp_1.actualized = 'true'::text) AND (xtp_1.docbypasscommercial = 'false'::text)))) xtp
     JOIN taomish.xceler_tradeplanningservice_plannedtradeobligation xtp2 ON ((xtp.uuid = xtp2.uuid)))
     LEFT JOIN taomish.xceler_transportallocationservice_seafreightdetails xts ON ((((xts.tenant_id)::text = (xtp2.tenant_id)::text) AND ((xts.plan_id)::text = (xtp2.plan_id)::text))));</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-242">
        <createView fullDefinition="false" viewName="vw_settlement_grid_data_v2">SELECT xtp2.uuid,
    xtp2.tenant_id,
    xtp2.created_timestamp,
    xtp2.updated_timestamp,
    xtp2.circle_string_seq,
    xtp2.reference_number,
    xtp2.planned_obligation_id,
    xtp2.trade_obligation_id,
    xtp2.trade_obligation_uuid,
    xtp2.plan_id,
    xtp2.plan_uuid,
    xtp2.trade_id,
    xtp2.trade_uuid,
    xtp2.no_of_units,
    xtp2.trade_transaction_type,
    xtp2.trade_date_time,
    xtp2.obligation_date,
    xtp2.commodity,
    xtp2.company,
    xtp2.counterparty,
    xtp2.trade_quantity,
    xtp2.delivery_date,
    xtp2.profitcenter,
    xtp2.incoterm,
    xtp2.location,
    xtp2.trade_type,
    xtp2.crop_origin,
    xtp2.quantityuom,
    xtp2.grade,
    xtp2.planned_quantity,
    xtp2.remarks,
    xtp2.brand,
    xtp2.season,
    xtp2.load_location,
    xtp2.unload_location,
    xtp2.provisional_price_type,
    xtp2.provisional_price,
    xtp2.provisional_price_percentage,
    xtp2.provisional_fx_rate,
    xtp2.payment_term,
    xtp2.fx_rate,
    xtp2.trader,
    xtp2.trade_settlement_currency,
    xtp2.delivery_start_date,
    xtp2.delivery_end_date,
    xtp2.broker,
    xtp2.price_type,
    xtp2.trade_price,
    xtp2.trade_price_currency,
    xtp2.trade_price_uom,
    xtp2.match_type,
    0 AS split_sequence_number,
    xtp2.doc_by_pass_id,
    xts.voyage_no AS vessel_id,
    xts.vessel_name,
    ( SELECT (count(*) &gt; 0)
           FROM taomish.xceler_actualizationservice_actualizedquantity xaa
          WHERE (((xaa.tenant_id)::text = (xtp2.tenant_id)::text) AND (xaa.split_sequence_number = (1)::double precision) AND ((xaa.planned_obligation_id)::text = (xtp2.planned_obligation_id)::text))) AS splitted
   FROM ((( SELECT DISTINCT xtp_1.uuid
           FROM taomish.mvw_obligation_states xtp_1
          WHERE (xtp_1.planned = 'true'::text)) xtp
     JOIN ( SELECT xtp1.uuid,
            xtp1.created_by,
            xtp1.created_timestamp,
            xtp1.tenant_id,
            xtp1.updated_by,
            xtp1.updated_timestamp,
            xtp1.broker,
            xtp1.circle_string_seq,
            xtp1.commodity,
            xtp1.company,
            xtp1.counterparty,
            xtp1.crop_origin,
            xtp1.delivery_date,
            xtp1.delivery_end_date,
            xtp1.delivery_start_date,
            xtp1.grade,
            xtp1.incoterm,
            xtp1.location,
            xtp1.obligation_date,
            xtp1.plan_id,
            xtp1.plan_uuid,
            xtp1.planned_obligation_id,
            xtp1.planned_quantity,
            xtp1.price_type,
            xtp1.profitcenter,
            xtp1.quantityuom,
            xtp1.reference_number,
            xtp1.trade_date_time,
            xtp1.trade_id,
            xtp1.trade_obligation_id,
            xtp1.trade_obligation_uuid,
            xtp1.trade_price,
            xtp1.trade_price_currency,
            xtp1.trade_price_uom,
            xtp1.trade_quantity,
            xtp1.trade_transaction_type,
            xtp1.trade_type,
            xtp1.trade_uuid,
            xtp1.no_of_units,
            xtp1.remarks,
            xtp1.brand,
            xtp1.season,
            xtp1.load_location,
            xtp1.unload_location,
            xtp1.payment_term,
            xtp1.trader,
            xtp1.fx_rate,
            xtp1.provisional_fx_rate,
            xtp1.provisional_price_percentage,
            xtp1.provisional_price_type,
            xtp1.provisional_price,
            xtp1.tradesettlementcurrency,
            xtp1.trade_settlement_currency,
            xtp1.premiun_cost,
            xtp1.discount_cost,
            xtp1.total_trade_qty,
            xtp1.broker_reference_number,
            xtp1.provisional_price_uom,
            xtp1.provisional_price_currency,
            xtp1.planned_obligation_status,
            xtp1.parent_planned_obligation,
            xtp1.shipment_month,
            xtp1.external_record,
            xtp1.delivery_term_clause,
            xtp1.payment_terms_clause,
            xtp1.quantity_terms_clause,
            xtp1.quality_terms_clause,
            xtp1.pricing_terms_clause,
            xtp1.broker_reference,
            xtp1.comments,
            xtp1.trade_settlement_reference,
            xtp1.doc_by_pass_id,
            xtp1.package_type,
            xtp1.external_package,
            xtp1.internal_package,
            xtp1.internal_package_unit,
            xtp1.external_package_unit,
            xtp1.balance_quantity,
            xtp1.contract_term,
            xtp1.provisional_pricing,
            xtp1.weight_basis,
            xtp1.tolerance_value,
            xtp1.external_reference,
            xtp1.price_ticker,
            xtp1.special_instructions,
            xtp1.match_type,
            xtp1.settlement_tolerance_value,
            xtp1.obligation_state
           FROM taomish.xceler_tradeplanningservice_plannedtradeobligation xtp1
          WHERE (xtp1.external_record IS FALSE)) xtp2 ON ((xtp.uuid = xtp2.uuid)))
     LEFT JOIN taomish.xceler_transportallocationservice_seafreightdetails xts ON ((((xts.tenant_id)::text = (xtp2.tenant_id)::text) AND ((xts.plan_id)::text = (xtp2.plan_id)::text))))
  ORDER BY xtp2.updated_timestamp DESC;</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-243">
        <createIndex indexName="xceler_tradeplanningservice_plannedtradeobligation_plan_id_idx" tableName="xceler_tradeplanningservice_plannedtradeobligation">
            <column name="tenant_id"/>
            <column name="plan_id"/>
        </createIndex>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-244">
        <createView fullDefinition="false" viewName="vw_unplanned_obligations_for_planning">SELECT xtp.tenant_id,
    xtp.trade_transaction_type,
    (json_build_object('trade_id', jsonb_agg(DISTINCT xtp.trade_id), 'planned_obligation_id', jsonb_agg(DISTINCT xtp.planned_obligation_id), 'commodity', jsonb_agg(DISTINCT xtp.commodity), 'crop_origin', jsonb_agg(DISTINCT xtp.crop_origin), 'shipment_month', jsonb_agg(DISTINCT xtp.shipment_month), 'counterparty', jsonb_agg(DISTINCT xtp.counterparty), 'load_location', jsonb_agg(DISTINCT xtp.load_location), 'unload_location', jsonb_agg(DISTINCT xtp.unload_location), 'trade_transaction_type', jsonb_agg(DISTINCT xtp.trade_transaction_type)))::text AS criteria_map
   FROM taomish.xceler_tradeplanningservice_plannedtradeobligation xtp
  WHERE (xtp.plan_id IS NULL)
  GROUP BY xtp.tenant_id, xtp.trade_transaction_type;</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-245">
        <addUniqueConstraint columnNames="tenant_id, planned_obligation_id" constraintName="unique_tenant_planned_obligation" tableName="xceler_tradeplanningservice_plannedtradeobligation"/>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-246">
        <createView fullDefinition="false" viewName="vw_trade_planning_trade_plan">SELECT vw_planned_obligations_for_actualization.plan_max_time,
    vw_planned_obligations_for_actualization.uuid,
    vw_planned_obligations_for_actualization.created_by,
    vw_planned_obligations_for_actualization.updated_by,
    vw_planned_obligations_for_actualization.created_timestamp,
    vw_planned_obligations_for_actualization.updated_timestamp,
    vw_planned_obligations_for_actualization.tenant_id,
    vw_planned_obligations_for_actualization.circle_string_seq,
    vw_planned_obligations_for_actualization.broker,
    vw_planned_obligations_for_actualization.commodity,
    vw_planned_obligations_for_actualization.company,
    vw_planned_obligations_for_actualization.counterparty,
    vw_planned_obligations_for_actualization.crop_origin,
    vw_planned_obligations_for_actualization.delivery_date,
    vw_planned_obligations_for_actualization.delivery_end_date,
    vw_planned_obligations_for_actualization.delivery_start_date,
    vw_planned_obligations_for_actualization.grade,
    vw_planned_obligations_for_actualization.incoterm,
    vw_planned_obligations_for_actualization.location,
    vw_planned_obligations_for_actualization.obligation_date,
    vw_planned_obligations_for_actualization.plan_id,
    vw_planned_obligations_for_actualization.plan_uuid,
    vw_planned_obligations_for_actualization.planned_obligation_id,
    vw_planned_obligations_for_actualization.planned_quantity,
    vw_planned_obligations_for_actualization.price_type,
    vw_planned_obligations_for_actualization.profit_center,
    vw_planned_obligations_for_actualization.pricing_status,
    vw_planned_obligations_for_actualization.quantityuom,
    vw_planned_obligations_for_actualization.reference_number,
    vw_planned_obligations_for_actualization.trade_date_time,
    vw_planned_obligations_for_actualization.trade_id,
    vw_planned_obligations_for_actualization.trade_obligation_id,
    vw_planned_obligations_for_actualization.trade_obligation_uuid,
    vw_planned_obligations_for_actualization.trade_price,
    vw_planned_obligations_for_actualization.trade_price_currency,
    vw_planned_obligations_for_actualization.trade_price_uom,
    vw_planned_obligations_for_actualization.trade_quantity,
    vw_planned_obligations_for_actualization.trade_transaction_type,
    vw_planned_obligations_for_actualization.trade_type,
    vw_planned_obligations_for_actualization.trade_uuid,
    vw_planned_obligations_for_actualization.no_of_units,
    vw_planned_obligations_for_actualization.remarks,
    vw_planned_obligations_for_actualization.brand,
    vw_planned_obligations_for_actualization.season,
    vw_planned_obligations_for_actualization.load_location,
    vw_planned_obligations_for_actualization.unload_location,
    vw_planned_obligations_for_actualization.payment_term,
    vw_planned_obligations_for_actualization.trader,
    vw_planned_obligations_for_actualization.fx_rate,
    vw_planned_obligations_for_actualization.provisional_fx_rate,
    vw_planned_obligations_for_actualization.provisional_price_percentage,
    vw_planned_obligations_for_actualization.provisional_price_type,
    vw_planned_obligations_for_actualization.provisional_price,
    vw_planned_obligations_for_actualization.trade_settlement_currency,
    vw_planned_obligations_for_actualization.premiun_cost,
    vw_planned_obligations_for_actualization.discount_cost,
    vw_planned_obligations_for_actualization.total_trade_qty,
    vw_planned_obligations_for_actualization.broker_reference_number,
    vw_planned_obligations_for_actualization.provisional_price_uom,
    vw_planned_obligations_for_actualization.provisional_price_currency,
    vw_planned_obligations_for_actualization.planned_obligation_status,
    vw_planned_obligations_for_actualization.parent_planned_obligation,
    vw_planned_obligations_for_actualization.shipment_month,
    vw_planned_obligations_for_actualization.external_record,
    vw_planned_obligations_for_actualization.quantity,
    vw_planned_obligations_for_actualization.match_type,
    vw_planned_obligations_for_actualization.allocation_type,
    vw_planned_obligations_for_actualization.vessel_id,
    vw_planned_obligations_for_actualization.vessel_name,
    vw_planned_obligations_for_actualization.trade_settlement_reference,
    vw_planned_obligations_for_actualization.transport_allocated_status,
    vw_planned_obligations_for_actualization.price_allocationstatus,
    vw_planned_obligations_for_actualization.settled,
    vw_planned_obligations_for_actualization.stocked,
    vw_planned_obligations_for_actualization.cndninvoiced,
    vw_planned_obligations_for_actualization.deliverystarted,
    vw_planned_obligations_for_actualization.provinvoiced,
    vw_planned_obligations_for_actualization.actualized,
    vw_planned_obligations_for_actualization.priced,
    vw_planned_obligations_for_actualization.partiallyfxallocated,
    vw_planned_obligations_for_actualization.discharged,
    vw_planned_obligations_for_actualization.docbypassfinal,
    vw_planned_obligations_for_actualization.fxallocated,
    vw_planned_obligations_for_actualization.docbypassboth,
    vw_planned_obligations_for_actualization.provpriced,
    vw_planned_obligations_for_actualization.finalinvoiced,
    vw_planned_obligations_for_actualization.initialinvoiced,
    vw_planned_obligations_for_actualization.planned,
    vw_planned_obligations_for_actualization.partiallysettled,
    vw_planned_obligations_for_actualization.docbypasscommercial,
    vw_planned_obligations_for_actualization.docbypasscndn,
    vw_planned_obligations_for_actualization.docbypass,
    vw_planned_obligations_for_actualization.partiallypriced,
    vw_planned_obligations_for_actualization.balance_quantity,
    vw_planned_obligations_for_actualization.obligation_state
   FROM taomish.vw_planned_obligations_for_actualization
UNION ALL
 SELECT vw_planned_obligations_doc_by_pass.plan_max_time,
    vw_planned_obligations_doc_by_pass.uuid,
    vw_planned_obligations_doc_by_pass.created_by,
    vw_planned_obligations_doc_by_pass.updated_by,
    vw_planned_obligations_doc_by_pass.created_timestamp,
    vw_planned_obligations_doc_by_pass.updated_timestamp,
    vw_planned_obligations_doc_by_pass.tenant_id,
    vw_planned_obligations_doc_by_pass.circle_string_seq,
    vw_planned_obligations_doc_by_pass.broker,
    vw_planned_obligations_doc_by_pass.commodity,
    vw_planned_obligations_doc_by_pass.company,
    vw_planned_obligations_doc_by_pass.counterparty,
    vw_planned_obligations_doc_by_pass.crop_origin,
    vw_planned_obligations_doc_by_pass.delivery_date,
    vw_planned_obligations_doc_by_pass.delivery_end_date,
    vw_planned_obligations_doc_by_pass.delivery_start_date,
    vw_planned_obligations_doc_by_pass.grade,
    vw_planned_obligations_doc_by_pass.incoterm,
    vw_planned_obligations_doc_by_pass.location,
    vw_planned_obligations_doc_by_pass.obligation_date,
    vw_planned_obligations_doc_by_pass.plan_id,
    vw_planned_obligations_doc_by_pass.plan_uuid,
    vw_planned_obligations_doc_by_pass.planned_obligation_id,
    vw_planned_obligations_doc_by_pass.planned_quantity,
    vw_planned_obligations_doc_by_pass.price_type,
    vw_planned_obligations_doc_by_pass.profit_center,
    vw_planned_obligations_doc_by_pass.pricing_status,
    vw_planned_obligations_doc_by_pass.quantityuom,
    vw_planned_obligations_doc_by_pass.reference_number,
    vw_planned_obligations_doc_by_pass.trade_date_time,
    vw_planned_obligations_doc_by_pass.trade_id,
    vw_planned_obligations_doc_by_pass.trade_obligation_id,
    vw_planned_obligations_doc_by_pass.trade_obligation_uuid,
    vw_planned_obligations_doc_by_pass.trade_price,
    vw_planned_obligations_doc_by_pass.trade_price_currency,
    vw_planned_obligations_doc_by_pass.trade_price_uom,
    vw_planned_obligations_doc_by_pass.trade_quantity,
    vw_planned_obligations_doc_by_pass.trade_transaction_type,
    vw_planned_obligations_doc_by_pass.trade_type,
    vw_planned_obligations_doc_by_pass.trade_uuid,
    vw_planned_obligations_doc_by_pass.no_of_units,
    vw_planned_obligations_doc_by_pass.remarks,
    vw_planned_obligations_doc_by_pass.brand,
    vw_planned_obligations_doc_by_pass.season,
    vw_planned_obligations_doc_by_pass.load_location,
    vw_planned_obligations_doc_by_pass.unload_location,
    vw_planned_obligations_doc_by_pass.payment_term,
    vw_planned_obligations_doc_by_pass.trader,
    vw_planned_obligations_doc_by_pass.fx_rate,
    vw_planned_obligations_doc_by_pass.provisional_fx_rate,
    vw_planned_obligations_doc_by_pass.provisional_price_percentage,
    vw_planned_obligations_doc_by_pass.provisional_price_type,
    vw_planned_obligations_doc_by_pass.provisional_price,
    vw_planned_obligations_doc_by_pass.trade_settlement_currency,
    vw_planned_obligations_doc_by_pass.premiun_cost,
    vw_planned_obligations_doc_by_pass.discount_cost,
    vw_planned_obligations_doc_by_pass.total_trade_qty,
    vw_planned_obligations_doc_by_pass.broker_reference_number,
    vw_planned_obligations_doc_by_pass.provisional_price_uom,
    vw_planned_obligations_doc_by_pass.provisional_price_currency,
    vw_planned_obligations_doc_by_pass.planned_obligation_status,
    vw_planned_obligations_doc_by_pass.parent_planned_obligation,
    vw_planned_obligations_doc_by_pass.shipment_month,
    vw_planned_obligations_doc_by_pass.external_record,
    vw_planned_obligations_doc_by_pass.quantity,
    vw_planned_obligations_doc_by_pass.match_type,
    vw_planned_obligations_doc_by_pass.allocation_type,
    vw_planned_obligations_doc_by_pass.vessel_id,
    vw_planned_obligations_doc_by_pass.vessel_name,
    vw_planned_obligations_doc_by_pass.trade_settlement_reference,
    vw_planned_obligations_doc_by_pass.transport_allocated_status,
    vw_planned_obligations_doc_by_pass.price_allocationstatus,
    vw_planned_obligations_doc_by_pass.settled,
    vw_planned_obligations_doc_by_pass.stocked,
    vw_planned_obligations_doc_by_pass.cndninvoiced,
    vw_planned_obligations_doc_by_pass.deliverystarted,
    vw_planned_obligations_doc_by_pass.provinvoiced,
    vw_planned_obligations_doc_by_pass.actualized,
    vw_planned_obligations_doc_by_pass.priced,
    vw_planned_obligations_doc_by_pass.partiallyfxallocated,
    vw_planned_obligations_doc_by_pass.discharged,
    vw_planned_obligations_doc_by_pass.docbypassfinal,
    vw_planned_obligations_doc_by_pass.fxallocated,
    vw_planned_obligations_doc_by_pass.docbypassboth,
    vw_planned_obligations_doc_by_pass.provpriced,
    vw_planned_obligations_doc_by_pass.finalinvoiced,
    vw_planned_obligations_doc_by_pass.initialinvoiced,
    vw_planned_obligations_doc_by_pass.planned,
    vw_planned_obligations_doc_by_pass.partiallysettled,
    vw_planned_obligations_doc_by_pass.docbypasscommercial,
    vw_planned_obligations_doc_by_pass.docbypasscndn,
    vw_planned_obligations_doc_by_pass.docbypass,
    vw_planned_obligations_doc_by_pass.partiallypriced,
    vw_planned_obligations_doc_by_pass.balance_quantity,
    vw_planned_obligations_doc_by_pass.obligation_state
   FROM taomish.vw_planned_obligations_doc_by_pass
  ORDER BY 1 DESC;</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-247">
        <createView fullDefinition="false" viewName="xceler_dashboardservice_futopenposbycommodity">SELECT taomish.uuid_generate_v4() AS uuid,
    xdp.commodity,
    to_char(xdp.deliveryenddate, 'FMMonthYYYY'::text) AS shipmentmonth,
    xdp.trantype AS transactiontype,
    xdp.tradetype,
    xdp.tenantid,
    sum(xdp.openposition) AS openposition
   FROM taomish.xceler_dashboardservice_futureopenposition xdp
  GROUP BY xdp.tradetype, xdp.commodity, (to_char(xdp.deliveryenddate, 'FMMonthYYYY'::text)), xdp.trantype, xdp.tenantid;</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-248">
        <createView fullDefinition="false" viewName="xceler_dashboardservice_futopenposbycompany">SELECT taomish.uuid_generate_v4() AS uuid,
    xdp.company,
    to_char(xdp.deliveryenddate, 'FMMonthYYYY'::text) AS shipmentmonth,
    xdp.trantype AS transactiontype,
    xdp.tradetype,
    xdp.tenantid,
    sum(xdp.openposition) AS openposition
   FROM taomish.xceler_dashboardservice_futureopenposition xdp
  GROUP BY xdp.tradetype, xdp.company, (to_char(xdp.deliveryenddate, 'FMMonthYYYY'::text)), xdp.trantype, xdp.tenantid;</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-249">
        <createView fullDefinition="false" viewName="xceler_dashboardservice_futopenposbycounterparty">SELECT taomish.uuid_generate_v4() AS uuid,
    xdp.counterparty,
    to_char(xdp.deliveryenddate, 'FMMonthYYYY'::text) AS shipmentmonth,
    xdp.trantype AS transactiontype,
    xdp.tradetype,
    xdp.tenantid,
    sum(xdp.openposition) AS openposition
   FROM taomish.xceler_dashboardservice_futureopenposition xdp
  GROUP BY xdp.tradetype, xdp.counterparty, (to_char(xdp.deliveryenddate, 'FMMonthYYYY'::text)), xdp.trantype, xdp.tenantid;</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-250">
        <createView fullDefinition="false" viewName="xceler_dashboardservice_futopenposbyprofitcenter">SELECT taomish.uuid_generate_v4() AS uuid,
    xdp.profitcenter,
    to_char(xdp.deliveryenddate, 'FMMonthYYYY'::text) AS shipmentmonth,
    xdp.trantype AS transactiontype,
    xdp.tradetype,
    xdp.tenantid,
    sum(xdp.openposition) AS openposition
   FROM taomish.xceler_dashboardservice_futureopenposition xdp
  GROUP BY xdp.tradetype, xdp.profitcenter, (to_char(xdp.deliveryenddate, 'FMMonthYYYY'::text)), xdp.trantype, xdp.tenantid;</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-251">
        <createView fullDefinition="false" viewName="xceler_dashboardservice_futopenposbytrader">SELECT taomish.uuid_generate_v4() AS uuid,
    xdp.trader,
    to_char(xdp.deliveryenddate, 'FMMonthYYYY'::text) AS shipmentmonth,
    xdp.trantype AS transactiontype,
    xdp.tradetype,
    xdp.tenantid,
    sum(xdp.openposition) AS openposition
   FROM taomish.xceler_dashboardservice_futureopenposition xdp
  GROUP BY xdp.tradetype, xdp.trader, (to_char(xdp.deliveryenddate, 'FMMonthYYYY'::text)), xdp.trantype, xdp.tenantid;</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-252">
        <createView fullDefinition="false" viewName="vw_planned_obligations_for_actualization_criteria">SELECT vw_planned_obligations_for_actualization.tenant_id,
    (json_build_object('trade_id', jsonb_agg(DISTINCT vw_planned_obligations_for_actualization.trade_id), 'planned_obligation_id', jsonb_agg(DISTINCT vw_planned_obligations_for_actualization.planned_obligation_id), 'commodity', jsonb_agg(DISTINCT vw_planned_obligations_for_actualization.commodity), 'counterparty', jsonb_agg(DISTINCT vw_planned_obligations_for_actualization.counterparty), 'load_location', jsonb_agg(DISTINCT vw_planned_obligations_for_actualization.load_location), 'unload_location', jsonb_agg(DISTINCT vw_planned_obligations_for_actualization.unload_location), 'profit_center', jsonb_agg(DISTINCT vw_planned_obligations_for_actualization.profit_center), 'plan_id', jsonb_agg(DISTINCT vw_planned_obligations_for_actualization.plan_id), 'trade_transaction_type', jsonb_agg(DISTINCT vw_planned_obligations_for_actualization.trade_transaction_type), 'match_type', jsonb_agg(DISTINCT vw_planned_obligations_for_actualization.match_type)))::text AS criteria_map
   FROM taomish.vw_planned_obligations_for_actualization
  GROUP BY vw_planned_obligations_for_actualization.tenant_id;</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-253">
        <createView fullDefinition="false" viewName="vw_planned_obligations_for_actualization_criteria_container">SELECT vw_planned_obligations_for_actualization.tenant_id,
    (json_build_object('trade_id', jsonb_agg(DISTINCT vw_planned_obligations_for_actualization.trade_id), 'planned_obligation_id', jsonb_agg(DISTINCT vw_planned_obligations_for_actualization.planned_obligation_id), 'commodity', jsonb_agg(DISTINCT vw_planned_obligations_for_actualization.commodity), 'counterparty', jsonb_agg(DISTINCT vw_planned_obligations_for_actualization.counterparty), 'load_location', jsonb_agg(DISTINCT vw_planned_obligations_for_actualization.load_location), 'unload_location', jsonb_agg(DISTINCT vw_planned_obligations_for_actualization.unload_location), 'profit_center', jsonb_agg(DISTINCT vw_planned_obligations_for_actualization.profit_center), 'plan_id', jsonb_agg(DISTINCT vw_planned_obligations_for_actualization.plan_id), 'trade_transaction_type', jsonb_agg(DISTINCT vw_planned_obligations_for_actualization.trade_transaction_type), 'match_type', jsonb_agg(DISTINCT vw_planned_obligations_for_actualization.match_type)))::text AS criteria_map
   FROM taomish.vw_planned_obligations_for_actualization
  WHERE (((vw_planned_obligations_for_actualization.match_type)::text &lt;&gt; 'Vessel Plan'::text) AND ((vw_planned_obligations_for_actualization.match_type)::text &lt;&gt; 'BUILD'::text) AND ((vw_planned_obligations_for_actualization.match_type)::text &lt;&gt; 'DRAW'::text))
  GROUP BY vw_planned_obligations_for_actualization.tenant_id;</createView>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-254">
        <createSequence cacheSize="1" cycle="false" dataType="bigint" incrementBy="1" maxValue="9223372036854775807" minValue="1" sequenceName="batch_job_execution_seq" startValue="1"/>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-255">
        <createSequence cacheSize="1" cycle="false" dataType="bigint" incrementBy="1" maxValue="9223372036854775807" minValue="1" sequenceName="batch_job_seq" startValue="1"/>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-256">
        <createSequence cacheSize="1" cycle="false" dataType="bigint" incrementBy="1" maxValue="9223372036854775807" minValue="1" sequenceName="batch_step_execution_seq" startValue="1"/>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-257">
        <createTable tableName="bank_limit">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="bank_limit_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="amortization_applicability" type="VARCHAR(255)"/>
            <column name="amount" type="JSONB"/>
            <column name="amount_fee" type="JSONB"/>
            <column name="bank_account_id" type="VARCHAR(255)"/>
            <column name="comments" type="VARCHAR(255)"/>
            <column name="country" type="VARCHAR(255)"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="entity" type="VARCHAR(255)"/>
            <column name="facility_code" type="VARCHAR(255)"/>
            <column name="facility_type" type="VARCHAR(255)"/>
            <column name="fees_type" type="VARCHAR(255)"/>
            <column name="guarantee_type" type="VARCHAR(255)"/>
            <column name="inflow_accounts" type="JSONB"/>
            <column name="outflow_accounts" type="JSONB"/>
            <column name="participant_info" type="JSONB"/>
            <column name="percentage" type="VARCHAR(255)"/>
            <column name="recall_clause" type="VARCHAR(255)"/>
            <column name="region_for_line" type="VARCHAR(255)"/>
            <column name="security_type" type="VARCHAR(255)"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="status" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-258">
        <createTable tableName="bank_limits">
            <column name="uuid" type="UUID">
                <constraints nullable="false"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="amortization_applicability" type="VARCHAR(255)"/>
            <column name="amount" type="TEXT"/>
            <column name="bank_account_id" type="VARCHAR(255)"/>
            <column name="comments" type="VARCHAR(255)"/>
            <column name="country" type="VARCHAR(255)"/>
            <column name="description" type="VARCHAR(255)"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="entity" type="VARCHAR(255)"/>
            <column name="facility_type" type="VARCHAR(255)"/>
            <column name="guarantee_type" type="VARCHAR(255)"/>
            <column name="participant_info" type="TEXT"/>
            <column name="recall_clause" type="VARCHAR(255)"/>
            <column name="region_for_line" type="VARCHAR(255)"/>
            <column name="security_type" type="VARCHAR(255)"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-259">
        <createTable tableName="batch_job_execution">
            <column name="job_execution_id" type="BIGINT">
                <constraints nullable="false"/>
            </column>
            <column name="version" type="BIGINT"/>
            <column name="job_instance_id" type="BIGINT">
                <constraints nullable="false"/>
            </column>
            <column name="create_time" type="TIMESTAMP WITHOUT TIME ZONE">
                <constraints nullable="false"/>
            </column>
            <column name="start_time" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_time" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="status" type="VARCHAR(10)"/>
            <column name="exit_code" type="VARCHAR(2500)"/>
            <column name="exit_message" type="VARCHAR(2500)"/>
            <column name="last_updated" type="TIMESTAMP WITHOUT TIME ZONE"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-260">
        <createTable tableName="batch_job_execution_context">
            <column name="job_execution_id" type="BIGINT">
                <constraints nullable="false"/>
            </column>
            <column name="short_context" type="VARCHAR(2500)">
                <constraints nullable="false"/>
            </column>
            <column name="serialized_context" type="TEXT"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-261">
        <createTable tableName="batch_job_instance">
            <column name="job_instance_id" type="BIGINT">
                <constraints nullable="false"/>
            </column>
            <column name="version" type="BIGINT"/>
            <column name="job_name" type="VARCHAR(100)">
                <constraints nullable="false"/>
            </column>
            <column name="job_key" type="VARCHAR(32)">
                <constraints nullable="false"/>
            </column>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-262">
        <createTable tableName="batch_step_execution_context">
            <column name="step_execution_id" type="BIGINT">
                <constraints nullable="false"/>
            </column>
            <column name="short_context" type="VARCHAR(2500)">
                <constraints nullable="false"/>
            </column>
            <column name="serialized_context" type="TEXT"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-263">
        <createTable tableName="ctrm_audit_log_bkp_250924">
            <column name="id" type="BIGINT"/>
            <column name="appended" type="TEXT"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="difference_list" type="JSONB"/>
            <column name="entity_id" type="VARCHAR(255)"/>
            <column name="entity_name" type="VARCHAR(255)"/>
            <column name="latest" type="BOOLEAN"/>
            <column name="modified" type="TEXT"/>
            <column name="payload" type="JSONB"/>
            <column name="removed" type="TEXT"/>
            <column name="summary" type="JSONB"/>
            <column name="table_name" type="VARCHAR(255)"/>
            <column name="parent_id" type="VARCHAR(100)"/>
            <column name="action" type="VARCHAR(255)"/>
            <column name="update_location" type="TEXT"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-264">
        <createTable tableName="databasechangelog">
            <column name="id" type="VARCHAR(255)">
                <constraints nullable="false"/>
            </column>
            <column name="author" type="VARCHAR(255)">
                <constraints nullable="false"/>
            </column>
            <column name="filename" type="VARCHAR(255)">
                <constraints nullable="false"/>
            </column>
            <column name="dateexecuted" type="TIMESTAMP WITHOUT TIME ZONE">
                <constraints nullable="false"/>
            </column>
            <column name="orderexecuted" type="INTEGER">
                <constraints nullable="false"/>
            </column>
            <column name="exectype" type="VARCHAR(10)">
                <constraints nullable="false"/>
            </column>
            <column name="md5sum" type="VARCHAR(35)"/>
            <column name="description" type="VARCHAR(255)"/>
            <column name="comments" type="VARCHAR(255)"/>
            <column name="tag" type="VARCHAR(255)"/>
            <column name="liquibase" type="VARCHAR(20)"/>
            <column name="contexts" type="VARCHAR(255)"/>
            <column name="labels" type="VARCHAR(255)"/>
            <column name="deployment_id" type="VARCHAR(10)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-265">
        <createTable tableName="databasechangeloglock">
            <column name="id" type="INTEGER">
                <constraints nullable="false" primaryKey="true" primaryKeyName="databasechangeloglock_pkey"/>
            </column>
            <column name="locked" type="BOOLEAN">
                <constraints nullable="false"/>
            </column>
            <column name="lockgranted" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="lockedby" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-266">
        <createTable tableName="existing_views">
            <column name="table_name" type="INFORMATION_SCHEMA.SQL_IDENTIFIER"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-267">
        <createTable tableName="http_trace_audit_log">
            <column autoIncrement="true" name="id" type="INTEGER">
                <constraints nullable="false" primaryKey="true" primaryKeyName="http_trace_audit_log_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="date"/>
            <column name="start_date" type="date"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="version" type="INTEGER"/>
            <column name="method" type="VARCHAR(255)"/>
            <column name="parameter_map" type="TEXT"/>
            <column name="path" type="VARCHAR(255)"/>
            <column name="request_body" type="TEXT"/>
            <column name="response_body" type="TEXT"/>
            <column name="status" type="INTEGER"/>
            <column name="time" type="VARCHAR(255)"/>
            <column name="time_taken" type="BIGINT"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-268">
        <createTable tableName="ois_commodity">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="ois_commodity_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="campaign_id" type="VARCHAR(255)"/>
            <column name="commodity_name" type="VARCHAR(255)"/>
            <column name="quality" type="VARCHAR(255)"/>
            <column name="quantity" type="FLOAT8"/>
            <column name="status" type="BOOLEAN">
                <constraints nullable="false"/>
            </column>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-269">
        <createTable tableName="ois_counterparty">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="ois_counterparty_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="campaign_id" type="VARCHAR(255)"/>
            <column name="commodity_name" type="VARCHAR(255)"/>
            <column name="counterparty_approval" type="VARCHAR(255)"/>
            <column name="counterparty_name" type="VARCHAR(255)"/>
            <column name="finance_approval" type="VARCHAR(255)"/>
            <column name="quality" type="VARCHAR(255)"/>
            <column name="quantity" type="FLOAT8"/>
            <column name="stage" type="VARCHAR(255)"/>
            <column name="status" type="BOOLEAN">
                <constraints nullable="false"/>
            </column>
            <column name="trader_approval" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-270">
        <createTable tableName="ois_purchase_order">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="ois_purchase_order_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="campaign_name" type="VARCHAR(255)"/>
            <column name="company_name" type="VARCHAR(255)"/>
            <column name="counterparty_address" type="VARCHAR(255)"/>
            <column name="counterparty_approval" type="VARCHAR(255)"/>
            <column name="counterparty_email_address" type="VARCHAR(255)"/>
            <column name="counterparty_name" type="VARCHAR(255)"/>
            <column name="counterparty_phone_no" type="VARCHAR(255)"/>
            <column name="delivery_month" type="JSONB"/>
            <column name="delivery_status" type="VARCHAR(255)"/>
            <column name="finance_approval" type="VARCHAR(255)"/>
            <column name="incoterm" type="VARCHAR(255)"/>
            <column name="notes" type="VARCHAR(255)"/>
            <column name="po_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="po_due_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="po_number" type="VARCHAR(255)"/>
            <column name="po_status" type="VARCHAR(255)"/>
            <column name="profit_center" type="VARCHAR(255)"/>
            <column name="purchase_order_description" type="JSONB"/>
            <column name="trader_approval" type="VARCHAR(255)"/>
            <column name="trader_name" type="VARCHAR(255)"/>
            <column name="available_quantity" type="FLOAT8"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-271">
        <createTable tableName="price_allocation_records">
            <column name="uuid" type="UUID"/>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="currency_uom" type="VARCHAR(255)"/>
            <column name="obligation_class_name" type="TEXT"/>
            <column name="obligation_id" type="VARCHAR(255)"/>
            <column name="price" type="FLOAT8"/>
            <column name="price_allocation_id" type="TEXT"/>
            <column name="price_currency" type="VARCHAR(255)"/>
            <column name="price_line_id" type="UUID"/>
            <column name="quantity" type="FLOAT8"/>
            <column name="quantity_uom" type="VARCHAR(255)"/>
            <column name="trade_id" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-272">
        <createTable tableName="price_allocation_records_partially">
            <column name="uuid" type="UUID"/>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="currency_uom" type="VARCHAR(255)"/>
            <column name="obligation_class_name" type="TEXT"/>
            <column name="obligation_id" type="VARCHAR(255)"/>
            <column name="price" type="FLOAT8"/>
            <column name="price_allocation_id" type="TEXT"/>
            <column name="price_currency" type="VARCHAR(255)"/>
            <column name="price_line_id" type="UUID"/>
            <column name="quantity" type="FLOAT8"/>
            <column name="quantity_uom" type="VARCHAR(255)"/>
            <column name="trade_id" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-273">
        <createTable tableName="taomish_error_log">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="taomish_error_log_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="error_message" type="TEXT"/>
            <column name="payload" type="JSONB"/>
            <column name="request_id" type="VARCHAR(255)"/>
            <column name="stacktrace" type="JSONB"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-274">
        <createTable tableName="taomish_external_system_configuration">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="pk_taomish_external_system_configuration"/>
            </column>
            <column name="username" type="VARCHAR(255)"/>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="destination_system" type="VARCHAR(255)"/>
            <column name="integration_type" type="VARCHAR(255)"/>
            <column name="auth_type" type="VARCHAR(255)"/>
            <column name="client_id" type="VARCHAR(255)"/>
            <column name="client_secret" type="VARCHAR(255)"/>
            <column name="environment" type="VARCHAR(255)"/>
            <column name="base_url" type="VARCHAR(255)"/>
            <column name="redirect_url" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-275">
        <createTable tableName="taomish_tenant_configuration">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="pk_taomish_tenant_configuration"/>
            </column>
            <column name="username" type="VARCHAR(255)"/>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="external_system_id" type="VARCHAR(255)"/>
            <column name="real_mid" type="VARCHAR(255)"/>
            <column name="token_type" type="VARCHAR(255)"/>
            <column name="access_token" type="TEXT"/>
            <column name="expire_at" type="BIGINT"/>
            <column name="refresh_token" type="VARCHAR(255)"/>
            <column name="refresh_token_expire_at" type="BIGINT"/>
            <column name="refresh_token_created_at" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="posting_url" type="VARCHAR(255)"/>
            <column name="transform_text" type="TEXT"/>
            <column name="auth_url" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-276">
        <createTable tableName="taomish_tenant_postinghistory">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="pk_taomish_tenant_postinghistory"/>
            </column>
            <column name="username" type="VARCHAR(255)"/>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="input_payload" type="TEXT"/>
            <column name="external_system" type="VARCHAR(255)"/>
            <column name="external_system_response" type="TEXT"/>
            <column name="posting_payload" type="TEXT"/>
            <column name="unique_id" type="VARCHAR(255)"/>
            <column name="execution_id" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-277">
        <createTable tableName="treasury_account_transaction">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="treasury_account_transactions_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="account_number" type="VARCHAR(255)"/>
            <column name="account_currency" type="VARCHAR(255)"/>
            <column name="transaction_source" type="VARCHAR(255)"/>
            <column name="transaction_source_id" type="VARCHAR(255)"/>
            <column name="transaction_source_sub_id" type="VARCHAR(255)"/>
            <column name="post_date" type="date"/>
            <column name="value_date" type="date"/>
            <column name="transaction_type" type="VARCHAR(255)"/>
            <column name="booked_amount" type="FLOAT8"/>
            <column name="booked_currency" type="VARCHAR(255)"/>
            <column name="fx_pair" type="VARCHAR(255)"/>
            <column name="fx_rate" type="VARCHAR(255)"/>
            <column name="reference_number" type="VARCHAR(255)"/>
            <column name="transaction_purpose" type="VARCHAR(255)"/>
            <column name="transaction_cost" type="FLOAT8"/>
            <column name="transaction_status" type="VARCHAR(255)"/>
            <column name="transaction_amount" type="JSONB"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-278">
        <createTable tableName="treasury_credit_transaction_repayment_list">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="treasury_credit_transaction_repayment_list_pkey"/>
            </column>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="repayment_id" type="VARCHAR(255)"/>
            <column name="principal_repayment_amount" type="FLOAT8"/>
            <column name="actual_repayment_amount" type="FLOAT8"/>
            <column name="scheduled_repayment_date" type="date"/>
            <column name="repayment_date" type="date"/>
            <column name="repayment_remark" type="TEXT"/>
            <column name="status" type="VARCHAR(255)"/>
            <column name="credit_transaction_uuid" type="UUID"/>
            <column name="interest_paid" type="FLOAT8"/>
            <column name="credit_txn_id" type="VARCHAR(50)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-279">
        <createTable tableName="treasury_fx_cash_booking">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="treasury_fx_cash_booking_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="booking_type" type="VARCHAR(255)"/>
            <column name="broker" type="VARCHAR(255)"/>
            <column name="broker_account_no" type="VARCHAR(255)"/>
            <column name="buy_notional" type="TEXT"/>
            <column name="company" type="VARCHAR(255)"/>
            <column name="cost" type="VARCHAR(255)"/>
            <column name="counterparty" type="VARCHAR(255)"/>
            <column name="delivery_status" type="VARCHAR(255)"/>
            <column name="expiry_date" type="date"/>
            <column name="fx_pair" type="VARCHAR(255)"/>
            <column name="initial_margin" type="VARCHAR(255)"/>
            <column name="profit_center" type="VARCHAR(255)"/>
            <column name="rate" type="VARCHAR(255)"/>
            <column name="reference_price" type="VARCHAR(255)"/>
            <column name="sell_notional" type="TEXT"/>
            <column name="settlement_currency" type="VARCHAR(255)"/>
            <column name="trade_date" type="date"/>
            <column name="trader" type="VARCHAR(255)"/>
            <column name="tenor" type="INTEGER"/>
            <column name="maintenance_margin" type="VARCHAR(255)"/>
            <column name="settlement_date" type="date"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-280">
        <createTable tableName="treasury_fx_futures">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="treasury_fx_futures_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="buysell" type="VARCHAR(255)"/>
            <column name="clearing_broker" type="VARCHAR(255)"/>
            <column name="clearing_broker_account_no" type="VARCHAR(255)"/>
            <column name="clearing_fee" type="FLOAT8"/>
            <column name="company" type="VARCHAR(255)"/>
            <column name="cost" type="FLOAT8"/>
            <column name="currency" type="VARCHAR(255)"/>
            <column name="exchange_for" type="VARCHAR(255)"/>
            <column name="execution_broker" type="VARCHAR(255)"/>
            <column name="execution_fee" type="FLOAT8"/>
            <column name="expiry_date" type="date"/>
            <column name="expiry_month" type="VARCHAR(255)"/>
            <column name="future_product_ticker" type="VARCHAR(255)"/>
            <column name="initial_margin" type="FLOAT8"/>
            <column name="lot" type="FLOAT8"/>
            <column name="lot_size" type="FLOAT8"/>
            <column name="maintainance_margin" type="FLOAT8"/>
            <column name="price" type="FLOAT8"/>
            <column name="product_code" type="VARCHAR(255)"/>
            <column name="profit_center" type="VARCHAR(255)"/>
            <column name="tag" type="VARCHAR(255)"/>
            <column name="trade_date" type="date"/>
            <column name="trader" type="VARCHAR(255)"/>
            <column name="uom" type="VARCHAR(255)"/>
            <column name="expiry_status" type="BOOLEAN"/>
            <column name="netted_status" type="BOOLEAN"/>
            <column name="rollover_status" type="BOOLEAN"/>
            <column name="rollover_spread" type="FLOAT8"/>
            <column name="parent_row_id" type="UUID"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-281">
        <createTable tableName="vessel_master">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="vessel_master_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="beam" type="FLOAT4"/>
            <column name="builder" type="VARCHAR(255)"/>
            <column name="crude" type="INTEGER"/>
            <column name="dead_weight_tonnage" type="INTEGER"/>
            <column name="freight_capacity" type="INTEGER"/>
            <column name="gross_tonnage" type="INTEGER"/>
            <column name="imo" type="VARCHAR(255)"/>
            <column name="length" type="FLOAT4"/>
            <column name="maximum_drought" type="FLOAT4"/>
            <column name="net_tonnage" type="INTEGER"/>
            <column name="status" type="BOOLEAN"/>
            <column name="teu" type="INTEGER"/>
            <column name="vessel_capacity" type="INTEGER"/>
            <column name="vessel_class" type="VARCHAR(255)"/>
            <column name="vessel_code" type="VARCHAR(255)"/>
            <column name="vessel_country_flag" type="VARCHAR(255)"/>
            <column name="vessel_make" type="VARCHAR(255)"/>
            <column name="vessel_model" type="VARCHAR(255)"/>
            <column name="vessel_name" type="VARCHAR(255)"/>
            <column name="vessel_owner" type="VARCHAR(255)"/>
            <column name="vessel_type" type="VARCHAR(255)"/>
            <column name="year" type="INTEGER"/>
            <column name="deadweight_tonnage" type="INTEGER"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-282">
        <createTable tableName="work_in_progress">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="pk_work_in_progress"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="request_id" type="VARCHAR(255)"/>
            <column name="reference_id" type="VARCHAR(255)"/>
            <column name="value" type="JSONB"/>
            <column name="wait_until" type="TIMESTAMP WITHOUT TIME ZONE"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-283">
        <createTable tableName="xceler_accounting_gl_account">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_accounting_gl_account_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="account_description" type="TEXT"/>
            <column name="account_type" type="VARCHAR(255)"/>
            <column name="currency" type="VARCHAR(255)"/>
            <column name="gl_account" type="VARCHAR(255)"/>
            <column name="parent" type="VARCHAR(255)"/>
            <column name="status" type="BOOLEAN"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-284">
        <createTable tableName="xceler_accounting_gl_structure">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_accounting_gl_structure_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="gl_structure" type="VARCHAR(255)"/>
            <column name="parent_structure" type="VARCHAR(255)"/>
            <column name="status" type="BOOLEAN"/>
            <column name="structure_description" type="TEXT"/>
            <column name="structure_type" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-285">
        <createTable tableName="xceler_actualizationservice_actual_packing_details">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_actualizationservice_actual_packing_details_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="packaging_id" type="VARCHAR(255)"/>
            <column name="internal_package_no" type="VARCHAR(255)"/>
            <column name="actualization_id" type="VARCHAR(255)"/>
            <column name="planned_obligation_id" type="VARCHAR(255)"/>
            <column name="seal_id" type="VARCHAR(255)"/>
            <column name="marks_and_number" type="VARCHAR(255)"/>
            <column name="shipping_mark" type="VARCHAR(255)"/>
            <column name="gross_weight" type="FLOAT8"/>
            <column name="net_weight" type="FLOAT8"/>
            <column name="split_sequence_number" type="FLOAT8"/>
            <column name="custom_added_fields" type="JSONB"/>
            <column name="transport_no" type="VARCHAR(255)"/>
            <column name="internal_package_name" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-286">
        <createTable tableName="xceler_actualizationservice_actual_quality">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_actualizationservice_actual_quality_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="quality_parameter" type="VARCHAR(255)"/>
            <column name="contracted_value" type="VARCHAR(255)"/>
            <column name="actualization_id" type="VARCHAR(255)"/>
            <column name="planned_obligation_id" type="VARCHAR(255)"/>
            <column name="actualized_on" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="trade_id" type="VARCHAR(255)"/>
            <column name="actualized_quality_id" type="VARCHAR(255)"/>
            <column name="basis" type="VARCHAR(255)"/>
            <column name="unit" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-287">
        <createTable tableName="xceler_actualizationservice_actual_quality_details">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_actualizationservice_actual_quality_details_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="stage" type="VARCHAR(255)"/>
            <column name="buyer" type="VARCHAR(255)"/>
            <column name="supplier" type="VARCHAR(255)"/>
            <column name="umpire" type="VARCHAR(255)"/>
            <column name="custom_added_fields" type="JSONB"/>
            <column name="actualized_quality_id" type="UUID"/>
            <column name="active_quality" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-288">
        <createTable tableName="xceler_actualizationservice_actualizeddocuments">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_actualizationservice_actualizeddocuments_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="actualization_id" type="VARCHAR(255)"/>
            <column name="actualized_on" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="attachment_file_name" type="VARCHAR(255)"/>
            <column name="attachment_file_type" type="VARCHAR(255)"/>
            <column name="file_size" type="VARCHAR(255)"/>
            <column name="message_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="msg_session_id" type="INTEGER"/>
            <column name="planned_obligation_id" type="VARCHAR(255)"/>
            <column name="trade_id" type="VARCHAR(255)"/>
            <column name="upload_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="uploaded_by" type="VARCHAR(255)"/>
            <column name="attachment_url" type="VARCHAR(255)"/>
            <column name="shipment_document" type="VARCHAR(255)"/>
            <column name="document_type" type="VARCHAR(255)"/>
            <column name="status" type="VARCHAR(50)"/>
            <column name="description" type="TEXT"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-289">
        <createTable tableName="xceler_actualizationservice_actualizedeventdetails">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_actualizationservice_actualizedeventdetails_pkey"/>
            </column>
            <column name="event_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="event_code" type="VARCHAR(255)">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_actualizationservice_actualizedeventdetails_pkey"/>
            </column>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-290">
        <createTable tableName="xceler_actualizationservice_actualizedtradeobligation">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_actualizationservice_actualizedtradeobligation_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="actualization_id" type="VARCHAR(255)"/>
            <column name="actualized_costs" type="BYTEA"/>
            <column name="actualized_quality" type="BYTEA"/>
            <column name="actualized_quantity_id" type="VARCHAR(255)"/>
            <column name="planned_obligation_id" type="VARCHAR(255)"/>
            <column name="planned_obligation_type" type="VARCHAR(255)"/>
            <column name="trade_id" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-291">
        <createTable tableName="xceler_apiconfigservice_eaiconfiguration">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_apiconfigservice_eaiconfiguration_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="api_type" type="VARCHAR(255)"/>
            <column name="authorization" type="VARCHAR(255)"/>
            <column name="business_application" type="VARCHAR(255)"/>
            <column name="params" type="VARCHAR(255)"/>
            <column name="trigger_action" type="VARCHAR(255)"/>
            <column name="url" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-292">
        <createTable tableName="xceler_apiconfigservice_header">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_apiconfigservice_header_pkey"/>
            </column>
            <column name="headers_value" type="VARCHAR(255)"/>
            <column name="headers_key" type="VARCHAR(255)">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_apiconfigservice_header_pkey"/>
            </column>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-293">
        <createTable tableName="xceler_authservice_mode">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_authservice_mode_pkey"/>
            </column>
            <column name="value" type="VARCHAR(255)"/>
            <column name="mode_key" type="VARCHAR(255)">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_authservice_mode_pkey"/>
            </column>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-294">
        <createTable tableName="xceler_authservice_onetimepassword">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_authservice_onetimepassword_pkey"/>
            </column>
            <column name="business_application" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="delivery_method" type="VARCHAR(255)"/>
            <column name="expiry" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="otp" type="VARCHAR(255)"/>
            <column name="user_type" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-295">
        <createTable tableName="xceler_authservice_rolemaster_bkp">
            <column name="uuid" type="UUID"/>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="description" type="VARCHAR(255)"/>
            <column name="is_visible" type="BOOLEAN"/>
            <column name="number_of_users" type="INTEGER"/>
            <column name="policy" type="TEXT"/>
            <column name="role_name" type="VARCHAR(255)"/>
            <column name="status" type="BOOLEAN"/>
            <column name="policy_version" type="FLOAT8"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-296">
        <createTable tableName="xceler_authservice_tenant">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_authservice_tenant_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="company_documents" type="BYTEA"/>
            <column name="company_name" type="VARCHAR(255)"/>
            <column name="company_registration_number" type="VARCHAR(255)"/>
            <column name="currency" type="VARCHAR(255)"/>
            <column name="day_light_saving" type="BOOLEAN"/>
            <column name="is_active" type="BOOLEAN"/>
            <column name="tenant_alias" type="VARCHAR(255)"/>
            <column name="auth_broker_url" type="VARCHAR(500)"/>
            <column name="validate_url" type="VARCHAR(500)"/>
            <column name="client_id" type="VARCHAR(256)"/>
            <column name="secret" type="VARCHAR(256)"/>
            <column name="internal" type="VARCHAR(256)"/>
            <column name="login_client_id" type="VARCHAR(256)"/>
            <column name="realm" type="VARCHAR(256)"/>
            <column name="admin_client_id" type="VARCHAR(256)"/>
            <column name="admin_secret" type="VARCHAR(256)"/>
            <column name="grant_type" type="VARCHAR(256)"/>
            <column name="encrypted_licensing" type="TEXT"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-297">
        <createTable tableName="xceler_authservice_tenant_24_07_bkp">
            <column name="uuid" type="UUID"/>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="company_documents" type="BYTEA"/>
            <column name="company_name" type="VARCHAR(255)"/>
            <column name="company_registration_number" type="VARCHAR(255)"/>
            <column name="currency" type="VARCHAR(255)"/>
            <column name="day_light_saving" type="BOOLEAN"/>
            <column name="is_active" type="BOOLEAN"/>
            <column name="tenant_alias" type="VARCHAR(255)"/>
            <column name="auth_broker_url" type="VARCHAR(500)"/>
            <column name="validate_url" type="VARCHAR(500)"/>
            <column name="client_id" type="VARCHAR(256)"/>
            <column name="secret" type="VARCHAR(256)"/>
            <column name="internal" type="VARCHAR(256)"/>
            <column name="login_client_id" type="VARCHAR(256)"/>
            <column name="realm" type="VARCHAR(256)"/>
            <column name="admin_client_id" type="VARCHAR(256)"/>
            <column name="admin_secret" type="VARCHAR(256)"/>
            <column name="grant_type" type="VARCHAR(256)"/>
            <column name="encrypted_licensing" type="TEXT"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-298">
        <createTable tableName="xceler_authservice_tenantadmin">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_authservice_tenantadmin_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="address" type="VARCHAR(255)"/>
            <column name="city" type="VARCHAR(255)"/>
            <column name="country" type="VARCHAR(255)"/>
            <column name="email_address" type="VARCHAR(255)"/>
            <column name="fax" type="VARCHAR(255)"/>
            <column name="first_name" type="VARCHAR(255)"/>
            <column name="language" type="VARCHAR(255)"/>
            <column name="last_name" type="VARCHAR(255)"/>
            <column name="middle_name" type="VARCHAR(255)"/>
            <column name="password" type="VARCHAR(255)"/>
            <column name="password_expiry_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="telephone" type="VARCHAR(255)"/>
            <column name="time_zone" type="VARCHAR(255)"/>
            <column name="user_master_status" type="BOOLEAN"/>
            <column name="user_role" type="VARCHAR(255)"/>
            <column name="user_type" type="VARCHAR(255)"/>
            <column name="username" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-299">
        <createTable tableName="xceler_authservice_usermaster_18_06_bkp">
            <column name="uuid" type="UUID"/>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="address" type="VARCHAR(255)"/>
            <column name="city" type="VARCHAR(255)"/>
            <column name="commodity" type="VARCHAR(255)"/>
            <column name="contract_book" type="VARCHAR(255)"/>
            <column name="counter_party" type="VARCHAR(255)"/>
            <column name="country" type="VARCHAR(255)"/>
            <column name="email_address" type="VARCHAR(255)"/>
            <column name="fax" type="VARCHAR(255)"/>
            <column name="first_name" type="VARCHAR(255)"/>
            <column name="is_lock" type="BOOLEAN"/>
            <column name="language" type="VARCHAR(255)"/>
            <column name="last_name" type="VARCHAR(255)"/>
            <column name="legal_entity" type="VARCHAR(255)"/>
            <column name="middle_name" type="VARCHAR(255)"/>
            <column name="password" type="VARCHAR(255)"/>
            <column name="password_expiry_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="profile_center" type="VARCHAR(255)"/>
            <column name="role" type="VARCHAR(255)"/>
            <column name="telephone" type="VARCHAR(255)"/>
            <column name="time_zone" type="VARCHAR(255)"/>
            <column name="user_master_status" type="BOOLEAN"/>
            <column name="user_name" type="VARCHAR(255)"/>
            <column name="user_type" type="TEXT"/>
            <column name="product_subscription" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-300">
        <createTable tableName="xceler_authservice_usermaster_24_07_bkp">
            <column name="uuid" type="UUID"/>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="address" type="VARCHAR(255)"/>
            <column name="city" type="VARCHAR(255)"/>
            <column name="commodity" type="VARCHAR(255)"/>
            <column name="contract_book" type="VARCHAR(255)"/>
            <column name="counter_party" type="VARCHAR(255)"/>
            <column name="country" type="VARCHAR(255)"/>
            <column name="email_address" type="VARCHAR(255)"/>
            <column name="fax" type="VARCHAR(255)"/>
            <column name="first_name" type="VARCHAR(255)"/>
            <column name="is_lock" type="BOOLEAN"/>
            <column name="language" type="VARCHAR(255)"/>
            <column name="last_name" type="VARCHAR(255)"/>
            <column name="legal_entity" type="VARCHAR(255)"/>
            <column name="middle_name" type="VARCHAR(255)"/>
            <column name="password" type="VARCHAR(255)"/>
            <column name="password_expiry_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="profile_center" type="VARCHAR(255)"/>
            <column name="role" type="VARCHAR(255)"/>
            <column name="telephone" type="VARCHAR(255)"/>
            <column name="time_zone" type="VARCHAR(255)"/>
            <column name="user_master_status" type="BOOLEAN"/>
            <column name="user_name" type="VARCHAR(255)"/>
            <column name="user_type" type="TEXT"/>
            <column name="product_subscription" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-301">
        <createTable tableName="xceler_basedata_externalpackagebase">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_basedata_externalpackagebase_pkey"/>
            </column>
            <column name="external_identifier" type="VARCHAR(255)"/>
            <column name="height" type="FLOAT8"/>
            <column name="height_uom" type="VARCHAR(255)"/>
            <column name="length" type="FLOAT8"/>
            <column name="length_uom" type="VARCHAR(255)"/>
            <column name="name" type="VARCHAR(255)"/>
            <column name="status" type="BOOLEAN"/>
            <column name="width" type="FLOAT8"/>
            <column name="width_uom" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-302">
        <createTable tableName="xceler_basedata_globalindicatorbase">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_basedata_globalindicatorbase_pkey"/>
            </column>
            <column name="description" type="VARCHAR(255)"/>
            <column name="group_name" type="VARCHAR(255)"/>
            <column name="indicator_type" type="INTEGER"/>
            <column name="status" type="BOOLEAN"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-303">
        <createTable tableName="xceler_basedata_globalindicatordetailsbase">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_basedata_globalindicatordetailsbase_pkey"/>
            </column>
            <column name="description" type="VARCHAR(255)"/>
            <column name="group_name" type="VARCHAR(255)"/>
            <column name="name" type="VARCHAR(255)"/>
            <column name="status" type="BOOLEAN"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-304">
        <createTable tableName="xceler_basedata_incotermbase">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_basedata_incotermbase_pkey"/>
            </column>
            <column name="description" type="VARCHAR(255)"/>
            <column name="insurance_responsibility" type="VARCHAR(255)"/>
            <column name="name" type="VARCHAR(255)"/>
            <column name="option_for_invoice" type="VARCHAR(255)"/>
            <column name="status" type="BOOLEAN"/>
            <column name="title_transfer_event" type="VARCHAR(255)"/>
            <column name="transport_responsibility" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-305">
        <createTable tableName="xceler_basedata_rolemaster">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_basedata_rolemaster_pkey"/>
            </column>
            <column name="description" type="VARCHAR(255)"/>
            <column name="is_visible" type="BOOLEAN"/>
            <column name="number_of_users" type="INTEGER"/>
            <column name="policy" type="VARCHAR(60000)"/>
            <column name="role_name" type="VARCHAR(255)"/>
            <column name="status" type="BOOLEAN"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-306">
        <createTable tableName="xceler_basedata_transactionidreferencebase">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_basedata_transactionidreferencebase_pkey"/>
            </column>
            <column name="end_value" type="INTEGER"/>
            <column name="last_sequence_id" type="BIGINT"/>
            <column name="name" type="VARCHAR(255)"/>
            <column name="number_of_digits" type="INTEGER"/>
            <column name="reference_format" type="VARCHAR(255)"/>
            <column name="reset_value" type="VARCHAR(255)"/>
            <column name="start_value" type="INTEGER"/>
            <column name="transaction_reference_description" type="VARCHAR(255)"/>
            <column name="transaction_status" type="SMALLINT"/>
            <column name="transaction_type" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-307">
        <createTable tableName="xceler_basedata_uombase">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_basedata_uombase_pkey"/>
            </column>
            <column name="description" type="VARCHAR(255)"/>
            <column name="name" type="VARCHAR(255)"/>
            <column name="status" type="BOOLEAN"/>
            <column name="uom_conversion" type="FLOAT8"/>
            <column name="uom_type" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-308">
        <createTable tableName="xceler_blending_inventory">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_blending_inventory_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="blending_id" type="VARCHAR(255)"/>
            <column name="output_commodity" type="VARCHAR(255)"/>
            <column name="transfer_quantity" type="FLOAT8"/>
            <column name="transfer_id" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-309">
        <createTable tableName="xceler_blmanagementservice_blrecord">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_blmanagementservice_blrecord_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="assign_contract" type="VARCHAR(255)"/>
            <column name="bl_number" type="VARCHAR(255)"/>
            <column name="bl_record_type" type="INTEGER"/>
            <column name="consignee" type="VARCHAR(255)"/>
            <column name="export_reference" type="VARCHAR(255)"/>
            <column name="forwarding_agent" type="VARCHAR(255)"/>
            <column name="notify_party" type="BYTEA"/>
            <column name="parent_bl_id" type="VARCHAR(255)"/>
            <column name="plan_id" type="VARCHAR(255)"/>
            <column name="planned_obligation_id" type="VARCHAR(255)"/>
            <column name="quantity" type="VARCHAR(255)"/>
            <column name="ship_to" type="VARCHAR(255)"/>
            <column name="shipper" type="VARCHAR(255)"/>
            <column name="quantity_uom" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-310">
        <createTable tableName="xceler_configservice_brandqualityspec">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_configservice_brandqualityspec_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="basis" type="VARCHAR(255)"/>
            <column name="description" type="VARCHAR(255)"/>
            <column name="max" type="FLOAT4"/>
            <column name="min" type="FLOAT4"/>
            <column name="name" type="VARCHAR(255)"/>
            <column name="status" type="BOOLEAN"/>
            <column name="typical" type="VARCHAR(255)"/>
            <column name="unit" type="VARCHAR(255)"/>
            <column name="brand_uuid" type="VARCHAR(255)"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="brand_name" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-311">
        <createTable tableName="xceler_configservice_calendarholidays">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_configservice_calendarholidays_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="calendar_holidays_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="calendar_uuid" type="VARCHAR(255)"/>
            <column name="holiday" type="VARCHAR(255)"/>
            <column name="name" type="VARCHAR(255)"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-312">
        <createTable tableName="xceler_configservice_calendarworkingdays">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_configservice_calendarworkingdays_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="calendar_uuid" type="VARCHAR(255)"/>
            <column name="is_working" type="BOOLEAN"/>
            <column name="name" type="VARCHAR(255)"/>
            <column name="period" type="VARCHAR(255)"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-313">
        <createTable tableName="xceler_configservice_commoditybrand">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_configservice_commoditybrand_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="brand_name" type="VARCHAR(255)"/>
            <column name="commodity_uuid" type="VARCHAR(255)"/>
            <column name="default_value" type="BOOLEAN"/>
            <column name="description" type="TEXT"/>
            <column name="name" type="VARCHAR(255)"/>
            <column name="status" type="BOOLEAN"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="brand_code" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-314">
        <createTable tableName="xceler_configservice_commoditycropseason">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_configservice_commoditycropseason_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="commodity_uuid" type="VARCHAR(255)"/>
            <column name="crop_season_name" type="VARCHAR(255)"/>
            <column name="default_value" type="BOOLEAN"/>
            <column name="description" type="TEXT"/>
            <column name="name" type="VARCHAR(255)"/>
            <column name="status" type="BOOLEAN"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="season_code" type="VARCHAR(255)"/>
            <column name="season_from" type="VARCHAR(255)"/>
            <column name="season_to" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-315">
        <createTable tableName="xceler_configservice_commoditygrade">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_configservice_commoditygrade_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="commodity_uuid" type="VARCHAR(255)"/>
            <column name="default_value" type="BOOLEAN"/>
            <column name="description" type="TEXT"/>
            <column name="grade_name" type="VARCHAR(255)"/>
            <column name="name" type="VARCHAR(255)"/>
            <column name="status" type="BOOLEAN"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-316">
        <createTable tableName="xceler_configservice_commodityorigin">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_configservice_commodityorigin_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="commodity_uuid" type="VARCHAR(255)"/>
            <column name="default_value" type="BOOLEAN"/>
            <column name="description" type="TEXT"/>
            <column name="name" type="VARCHAR(255)"/>
            <column name="origin_name" type="VARCHAR(255)"/>
            <column name="status" type="BOOLEAN"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-317">
        <createTable tableName="xceler_configservice_commodityqualityspec">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_configservice_commodityqualityspec_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="basis" type="VARCHAR(255)"/>
            <column name="description" type="VARCHAR(255)"/>
            <column name="max" type="FLOAT4"/>
            <column name="min" type="FLOAT4"/>
            <column name="name" type="VARCHAR(255)"/>
            <column name="status" type="BOOLEAN"/>
            <column name="typical" type="VARCHAR(255)"/>
            <column name="unit" type="VARCHAR(255)"/>
            <column name="commodity_name" type="VARCHAR(255)"/>
            <column name="commodity_uuid" type="VARCHAR(255)"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-318">
        <createTable tableName="xceler_configservice_commodityuomconversion">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_configservice_commodityuomconversion_pkey"/>
            </column>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="commodity_name" type="VARCHAR(255)"/>
            <column name="commodity_uuid" type="VARCHAR(255)"/>
            <column name="from_uom" type="VARCHAR(255)"/>
            <column name="to_uom" type="VARCHAR(255)"/>
            <column name="conversion_factor" type="FLOAT8"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-319">
        <createTable tableName="xceler_configservice_companyaddressdetails">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_configservice_companyaddressdetails_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="address" type="VARCHAR(255)"/>
            <column name="address_type" type="VARCHAR(255)"/>
            <column name="company_uuid" type="VARCHAR(255)"/>
            <column name="country" type="VARCHAR(255)"/>
            <column name="default_value" type="BOOLEAN"/>
            <column name="fax" type="VARCHAR(255)"/>
            <column name="name" type="VARCHAR(255)"/>
            <column name="tag" type="VARCHAR(255)"/>
            <column name="telephone" type="VARCHAR(255)"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="city" type="VARCHAR(255)"/>
            <column name="state" type="VARCHAR(255)"/>
            <column name="state_code" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-320">
        <createTable tableName="xceler_configservice_companycalendardetail">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_configservice_companycalendardetail_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="accounting_month_from" type="INTEGER"/>
            <column name="accounting_month_to" type="INTEGER"/>
            <column name="accounting_year_from" type="INTEGER"/>
            <column name="accounting_year_to" type="INTEGER"/>
            <column name="calendar_name" type="VARCHAR(255)"/>
            <column name="company_uuid" type="VARCHAR(255)"/>
            <column name="name" type="VARCHAR(255)"/>
            <column name="period_status" type="BOOLEAN"/>
            <column name="status" type="BOOLEAN"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-321">
        <createTable tableName="xceler_configservice_companypaymentmethod">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_configservice_companypaymentmethod_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="attachment" type="BYTEA"/>
            <column name="attachment_file_name" type="VARCHAR(255)"/>
            <column name="attachment_file_type" type="VARCHAR(255)"/>
            <column name="attachment_name" type="VARCHAR(255)"/>
            <column name="company_uuid" type="VARCHAR(255)"/>
            <column name="name" type="VARCHAR(255)"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-322">
        <createTable tableName="xceler_configservice_counterpartyaddressdetails">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_configservice_counterpartyaddressdetails_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="address" type="TEXT"/>
            <column name="address_type" type="VARCHAR(255)"/>
            <column name="counterparty_uuid" type="VARCHAR(255)"/>
            <column name="country" type="VARCHAR(255)"/>
            <column name="default_value" type="BOOLEAN"/>
            <column name="fax" type="VARCHAR(255)"/>
            <column name="name" type="VARCHAR(255)"/>
            <column name="tag" type="VARCHAR(255)"/>
            <column name="telephone" type="VARCHAR(255)"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="counterparty_code" type="VARCHAR(255)"/>
            <column name="city" type="VARCHAR(255)"/>
            <column name="state" type="VARCHAR(255)"/>
            <column name="state_code" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-323">
        <createTable tableName="xceler_configservice_counterpartyattachments">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_configservice_counterpartyattachments_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="attachment" type="BYTEA"/>
            <column name="attachment_file_name" type="VARCHAR(255)"/>
            <column name="attachment_file_type" type="VARCHAR(255)"/>
            <column name="attachment_name" type="VARCHAR(255)"/>
            <column name="counterparty_uuid" type="VARCHAR(255)"/>
            <column name="name" type="VARCHAR(255)"/>
            <column name="attachment_url" type="VARCHAR(255)"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="counterparty_code" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-324">
        <createTable tableName="xceler_configservice_counterpartybankaccount">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_configservice_counterpartybankaccount_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="account_currency" type="VARCHAR(255)"/>
            <column name="account_number" type="VARCHAR(255)"/>
            <column name="bank_address" type="TEXT"/>
            <column name="bank_name" type="VARCHAR(255)"/>
            <column name="counterparty_uuid" type="VARCHAR(255)"/>
            <column name="default_value" type="BOOLEAN"/>
            <column name="name" type="VARCHAR(255)"/>
            <column name="notice_of_assignment" type="VARCHAR(255)"/>
            <column name="payment_method" type="VARCHAR(255)"/>
            <column name="remit_to_description" type="TEXT"/>
            <column name="status" type="BOOLEAN"/>
            <column name="swift_code" type="VARCHAR(255)"/>
            <column name="country_of_bank" type="VARCHAR(255)"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="counterparty_code" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-325">
        <createTable tableName="xceler_configservice_counterpartybrokerage">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_configservice_counterpartybrokerage_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="brokerage_fee" type="FLOAT8"/>
            <column name="commodity" type="VARCHAR(255)"/>
            <column name="counterparty_uuid" type="VARCHAR(255)"/>
            <column name="name" type="VARCHAR(255)"/>
            <column name="price_index_name" type="VARCHAR(255)"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="counterparty_code" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-326">
        <createTable tableName="xceler_configservice_counterpartybusinessprofile">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_configservice_counterpartybusinessprofile_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="legal_entity_type" type="VARCHAR(255)"/>
            <column name="counterparty_uuid" type="VARCHAR(255)"/>
            <column name="kyc_created_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="kyc_renewal_details" type="TEXT"/>
            <column name="kyc_status" type="VARCHAR(255)"/>
            <column name="indentification_type" type="VARCHAR(255)"/>
            <column name="expiry_date" type="VARCHAR(255)"/>
            <column name="identification_issuing_authority" type="VARCHAR(255)"/>
            <column name="identification_no" type="VARCHAR(255)"/>
            <column name="issue_date" type="VARCHAR(255)"/>
            <column name="kyc_updated_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="comment" type="VARCHAR(255)"/>
            <column name="annual_turnover" type="VARCHAR(255)"/>
            <column name="annual_volume" type="VARCHAR(255)"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-327">
        <createTable tableName="xceler_configservice_counterpartycommodity">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_configservice_counterpartycommodity_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="commodity" type="VARCHAR(255)"/>
            <column name="counterparty_uuid" type="VARCHAR(255)"/>
            <column name="incoterm" type="VARCHAR(255)"/>
            <column name="name" type="VARCHAR(255)"/>
            <column name="status" type="BOOLEAN"/>
            <column name="trade_type" type="VARCHAR(255)"/>
            <column name="transaction_type" type="VARCHAR(255)"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="counterparty_code" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-328">
        <createTable tableName="xceler_configservice_counterpartycontactdetails">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_configservice_counterpartycontactdetails_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="contact_address" type="TEXT"/>
            <column name="contact_name" type="VARCHAR(255)"/>
            <column name="contact_phone" type="VARCHAR(255)"/>
            <column name="contact_type" type="VARCHAR(255)"/>
            <column name="counterparty_uuid" type="VARCHAR(255)"/>
            <column name="country" type="VARCHAR(255)"/>
            <column name="default_value" type="BOOLEAN"/>
            <column name="email" type="VARCHAR(255)"/>
            <column name="fax" type="VARCHAR(255)"/>
            <column name="name" type="VARCHAR(255)"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="counterparty_code" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-329">
        <createTable tableName="xceler_configservice_counterpartyincidentreport">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_configservice_counterpartyincidentreport_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="counterparty_uuid" type="VARCHAR(255)"/>
            <column name="date_of_reporting" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="name" type="VARCHAR(255)"/>
            <column name="summary" type="VARCHAR(255)"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="counterparty_code" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-330">
        <createTable tableName="xceler_configservice_counterpartyinstructions">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_configservice_counterpartyinstructions_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="applicable_to" type="VARCHAR(255)"/>
            <column name="commodity" type="VARCHAR(255)"/>
            <column name="counterparty_uuid" type="VARCHAR(255)"/>
            <column name="instruction" type="VARCHAR(255)"/>
            <column name="instruction_type" type="VARCHAR(255)"/>
            <column name="name" type="VARCHAR(255)"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="counterparty_code" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-331">
        <createTable tableName="xceler_configservice_counterpartypaymentterm">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_configservice_counterpartypaymentterm_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="approved_payment_term_name" type="VARCHAR(255)"/>
            <column name="counterparty_uuid" type="VARCHAR(255)"/>
            <column name="default_value" type="BOOLEAN"/>
            <column name="name" type="VARCHAR(255)"/>
            <column name="status" type="BOOLEAN"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="counterparty_code" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-332">
        <createTable tableName="xceler_configservice_counterpartytopbuyerandsupplier">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_configservice_counterpartytopbuyerandsupplier_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="counterparty_business_profile_uuid" type="VARCHAR(255)"/>
            <column name="country" type="VARCHAR(255)"/>
            <column name="full_name" type="VARCHAR(255)"/>
            <column name="line_of_business" type="VARCHAR(255)"/>
            <column name="trader_type" type="VARCHAR(255)"/>
            <column name="website_link" type="VARCHAR(255)"/>
            <column name="temail_id" type="VARCHAR(255)"/>
            <column name="tregistered_phone_number" type="VARCHAR(255)"/>
            <column name="temailid" type="VARCHAR(255)"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-333">
        <createTable tableName="xceler_configservice_counterpartyultimatebenificialownership">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_configservice_counterpartyultimatebenificialowners_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="address_of_residence" type="VARCHAR(255)"/>
            <column name="counterparty_business_profile_uuid" type="VARCHAR(255)"/>
            <column name="date_of_appointment" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="emailid" type="VARCHAR(255)"/>
            <column name="identification_number" type="VARCHAR(255)"/>
            <column name="identification_type" type="VARCHAR(255)"/>
            <column name="nationality" type="VARCHAR(255)"/>
            <column name="owner_name" type="VARCHAR(255)"/>
            <column name="ownership_percentage" type="VARCHAR(255)"/>
            <column name="person_in_charge" type="BOOLEAN"/>
            <column name="registered_phone_number" type="VARCHAR(255)"/>
            <column name="risk_level" type="VARCHAR(255)"/>
            <column name="role_in_the_company" type="VARCHAR(255)"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-334">
        <createTable tableName="xceler_configservice_externalpackage">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_configservice_externalpackage_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="external_identifier" type="VARCHAR(255)"/>
            <column name="height" type="FLOAT8"/>
            <column name="height_uom" type="VARCHAR(255)"/>
            <column name="length" type="FLOAT8"/>
            <column name="length_uom" type="VARCHAR(255)"/>
            <column name="name" type="VARCHAR(255)"/>
            <column name="status" type="BOOLEAN"/>
            <column name="width" type="FLOAT8"/>
            <column name="width_uom" type="VARCHAR(255)"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-335">
        <createTable tableName="xceler_configservice_futureoptionperiodcalendar">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_configservice_futureoptionperiodcalendar_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="expiry_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="first_delivery_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="first_notification_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="future_index_uuid" type="VARCHAR(255)"/>
            <column name="last_delivery_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="last_notification_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="name" type="VARCHAR(255)"/>
            <column name="shipment_terminal_month" type="VARCHAR(255)"/>
            <column name="status" type="BOOLEAN"/>
            <column name="ticker" type="VARCHAR(255)"/>
            <column name="trade_start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-336">
        <createTable tableName="xceler_configservice_fxirperiodcalendar">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_configservice_fxirperiodcalendar_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="fx_index_uuid" type="VARCHAR(255)"/>
            <column name="name" type="VARCHAR(255)"/>
            <column name="status" type="BOOLEAN"/>
            <column name="term_structure" type="VARCHAR(255)"/>
            <column name="value_expiry" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-337">
        <createTable tableName="xceler_configservice_globalindicator">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_configservice_globalindicator_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="description" type="VARCHAR(255)"/>
            <column name="group_name" type="VARCHAR(255)"/>
            <column name="indicator_type" type="INTEGER"/>
            <column name="status" type="BOOLEAN"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-338">
        <createTable tableName="xceler_configservice_globalindicator_tenantise">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="pk_xceler_configservice_globalindicator_tenantise"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="version" type="FLOAT8"/>
            <column name="updated_json" type="JSONB"/>
            <column name="screen_name" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-339">
        <createTable tableName="xceler_configservice_globalindicatordetails">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_configservice_globalindicatordetails_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="description" type="VARCHAR(255)"/>
            <column name="global_indicator_uuid" type="VARCHAR(255)"/>
            <column name="group_name" type="VARCHAR(255)"/>
            <column name="name" type="VARCHAR(255)"/>
            <column name="status" type="BOOLEAN"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-340">
        <createTable tableName="xceler_configservice_gradequalityspec">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_configservice_gradequalityspec_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="basis" type="VARCHAR(255)"/>
            <column name="description" type="VARCHAR(255)"/>
            <column name="max" type="FLOAT4"/>
            <column name="min" type="FLOAT4"/>
            <column name="name" type="VARCHAR(255)"/>
            <column name="status" type="BOOLEAN"/>
            <column name="typical" type="VARCHAR(255)"/>
            <column name="unit" type="VARCHAR(255)"/>
            <column name="grade_uuid" type="VARCHAR(255)"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="grade_name" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-341">
        <createTable tableName="xceler_configservice_incoterm">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_configservice_incoterm_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="description" type="VARCHAR(255)"/>
            <column name="insurance_responsibility" type="VARCHAR(255)"/>
            <column name="name" type="VARCHAR(255)"/>
            <column name="option_for_invoice" type="VARCHAR(255)"/>
            <column name="status" type="BOOLEAN"/>
            <column name="title_transfer_event" type="VARCHAR(255)"/>
            <column name="transport_responsibility" type="VARCHAR(255)"/>
            <column name="code" type="VARCHAR(8)"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-342">
        <createTable tableName="xceler_configservice_internalexternalpackage">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_configservice_internalexternalpackage_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="external_package_name" type="VARCHAR(255)"/>
            <column name="internal_package_name" type="VARCHAR(255)"/>
            <column name="internal_packaging_unit" type="FLOAT8"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-343">
        <createTable tableName="xceler_configservice_paymentevent">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_configservice_paymentevent_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="inclusive_of_event_day" type="BOOLEAN"/>
            <column name="name" type="VARCHAR(255)"/>
            <column name="offset_after" type="VARCHAR(255)"/>
            <column name="offset_before" type="VARCHAR(255)"/>
            <column name="payment_due_event" type="VARCHAR(255)"/>
            <column name="payment_due_offset_days" type="INTEGER"/>
            <column name="payment_term_uuid" type="VARCHAR(255)"/>
            <column name="period" type="VARCHAR(255)"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-344">
        <createTable tableName="xceler_configservice_periodcalendar">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_configservice_periodcalendar_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="name" type="VARCHAR(255)"/>
            <column name="period_calendar_end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="period_calendar_start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="physical_basis_index_uuid" type="VARCHAR(255)"/>
            <column name="shipment_terminal_month" type="VARCHAR(255)"/>
            <column name="status" type="BOOLEAN"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-345">
        <createTable tableName="xceler_configservice_profitcenter">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_configservice_profitcenter_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="description" type="TEXT"/>
            <column name="is_tradeable" type="BOOLEAN"/>
            <column name="name" type="VARCHAR(255)"/>
            <column name="parent" type="VARCHAR(255)"/>
            <column name="reporting_pnl_currency" type="VARCHAR(255)"/>
            <column name="reporting_pnl_uom" type="VARCHAR(255)"/>
            <column name="status" type="BOOLEAN"/>
            <column name="time_zone" type="VARCHAR(255)"/>
            <column name="code" type="VARCHAR(255)"/>
            <column name="commodity" type="TEXT"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="profitcenter_external_ref" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-346">
        <createTable tableName="xceler_configservice_profitcenterconfiguration">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_configservice_profitcenterconfiguration_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="commodity_name" type="VARCHAR(255)"/>
            <column name="description" type="VARCHAR(255)"/>
            <column name="fx_rounding" type="INTEGER"/>
            <column name="invoice_amount_rounding" type="INTEGER"/>
            <column name="name" type="VARCHAR(255)"/>
            <column name="price_rounding" type="INTEGER"/>
            <column name="profit_center_uuid" type="VARCHAR(255)"/>
            <column name="quantity_rounding" type="INTEGER"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-347">
        <createTable tableName="xceler_configservice_secondarycost">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_configservice_secondarycost_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="calculation_basis" type="VARCHAR(255)"/>
            <column name="cost_type" type="VARCHAR(255)"/>
            <column name="description" type="VARCHAR(255)"/>
            <column name="name" type="VARCHAR(255)"/>
            <column name="settlement_type" type="VARCHAR(255)"/>
            <column name="status" type="BOOLEAN"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-348">
        <createTable tableName="xceler_configservice_tenant_config">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_configservice_tenant_config_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="config_json" type="TEXT"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-349">
        <createTable tableName="xceler_configservice_transaction_ref_second_level_sequence_numb">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_configservice_transaction_ref_second_level_sequenc_pkey"/>
            </column>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="object_name" type="VARCHAR(255)"/>
            <column name="transaction_type" type="VARCHAR(255)"/>
            <column name="last_sequence_id" type="BIGINT"/>
            <column name="transaction_status" type="BOOLEAN"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-350">
        <createTable tableName="xceler_configservice_unitofmeasurement">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_configservice_unitofmeasurement_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="description" type="VARCHAR(255)"/>
            <column name="name" type="VARCHAR(255)"/>
            <column name="status" type="BOOLEAN"/>
            <column name="uom_conversion" type="FLOAT8"/>
            <column name="uom_type" type="VARCHAR(255)"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-351">
        <createTable tableName="xceler_configservice_uploader">
            <column name="uuid" type="UUID"/>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="date"/>
            <column name="start_date" type="date"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="error_file" type="TEXT"/>
            <column name="file_name" type="TEXT"/>
            <column name="import_as" type="TEXT"/>
            <column name="original_file_name" type="TEXT"/>
            <column name="position" type="TEXT"/>
            <column name="status" type="VARCHAR(255)"/>
            <column name="uploaded_by" type="VARCHAR(255)"/>
            <column name="completion_time" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_time" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="upload_data_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="upload_for" type="date"/>
            <column name="file_size" type="BIGINT"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-352">
        <createTable tableName="xceler_configservice_uploadrules">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_configservice_uploadrules_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="date"/>
            <column name="start_date" type="date"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="file_name" type="TEXT"/>
            <column name="original_file_name" type="TEXT"/>
            <column name="status" type="VARCHAR(255)"/>
            <column name="uploaded_by" type="VARCHAR(255)"/>
            <column name="rule_data" type="JSONB"/>
            <column name="description" type="TEXT"/>
            <column name="code" type="VARCHAR(50)"/>
            <column name="template_type" type="VARCHAR(255)"/>
            <column name="file_size" type="BIGINT"/>
            <column name="template_name" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-353">
        <createTable tableName="xceler_costservice_tradecost_bkp">
            <column name="uuid" type="UUID"/>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="additional_note" type="VARCHAR(255)"/>
            <column name="cost_currency" type="VARCHAR(255)"/>
            <column name="cost_group" type="VARCHAR(255)"/>
            <column name="cost_id" type="VARCHAR(255)"/>
            <column name="cost_type" type="VARCHAR(255)"/>
            <column name="cost_value" type="FLOAT8"/>
            <column name="counterparty" type="VARCHAR(255)"/>
            <column name="description" type="VARCHAR(255)"/>
            <column name="effective_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="input_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="maturity_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="name" type="VARCHAR(255)"/>
            <column name="payment_due_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="payment_term" type="VARCHAR(255)"/>
            <column name="payment_type" type="VARCHAR(255)"/>
            <column name="percentage_component" type="VARCHAR(255)"/>
            <column name="percentage_payable" type="FLOAT8"/>
            <column name="quantity_option" type="VARCHAR(255)"/>
            <column name="tax_applicable" type="BOOLEAN"/>
            <column name="trade_id" type="VARCHAR(255)"/>
            <column name="trade_uuid" type="VARCHAR(255)"/>
            <column name="type" type="VARCHAR(255)"/>
            <column name="uom" type="VARCHAR(255)"/>
            <column name="cost_for" type="VARCHAR(255)"/>
            <column name="link_to" type="VARCHAR(255)"/>
            <column name="cost_charges_type" type="VARCHAR(255)"/>
            <column name="cost_matrix_id" type="VARCHAR(50)"/>
            <column name="cost_matrix_workflow" type="JSONB"/>
            <column name="quantity" type="FLOAT8"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-354">
        <createTable tableName="xceler_counterparty_on_boarding_request">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_counterparty_on_boarding_request_pkey"/>
            </column>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="request_no" type="VARCHAR(255)"/>
            <column name="request_type" type="VARCHAR(255)"/>
            <column name="business_area_application_type" type="VARCHAR(255)"/>
            <column name="request_status" type="VARCHAR(255)"/>
            <column name="counter_party_name" type="VARCHAR(255)"/>
            <column name="counter_party_type" type="VARCHAR(255)"/>
            <column name="company_name" type="VARCHAR(255)"/>
            <column name="trade_type" type="JSONB"/>
            <column name="proposed_trade_product" type="VARCHAR(255)"/>
            <column name="commercial_term" type="JSONB"/>
            <column name="payment_term" type="JSONB"/>
            <column name="currency" type="VARCHAR(255)"/>
            <column name="counter_party_address" type="VARCHAR(255)"/>
            <column name="group_name" type="VARCHAR(255)"/>
            <column name="parent_company_name" type="VARCHAR(255)"/>
            <column name="website" type="VARCHAR(255)"/>
            <column name="register_email_address" type="VARCHAR(255)"/>
            <column name="mailing_address" type="VARCHAR(255)"/>
            <column name="lei_registration" type="VARCHAR(255)"/>
            <column name="date_of_incorporation" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="country_of_registration" type="VARCHAR(255)"/>
            <column name="commercial_destination" type="VARCHAR(255)"/>
            <column name="identification_type" type="VARCHAR(255)"/>
            <column name="legal_entity_type" type="VARCHAR(255)"/>
            <column name="annual_turn_over" type="JSONB"/>
            <column name="ubo_share_holding" type="FLOAT8"/>
            <column name="ubo_name" type="VARCHAR(255)"/>
            <column name="ubo_nationality" type="VARCHAR(255)"/>
            <column name="reasonfor_proposed_counterparty_limit" type="VARCHAR(255)"/>
            <column name="forward_trade_application" type="BOOLEAN"/>
            <column name="contact_name" type="VARCHAR(255)"/>
            <column name="contact_address" type="TEXT"/>
            <column name="contact_telephone_no" type="VARCHAR(255)"/>
            <column name="contact_email_id" type="VARCHAR(255)"/>
            <column name="trader_name" type="VARCHAR(255)"/>
            <column name="objective_of_request" type="VARCHAR(255)"/>
            <column name="counter_party_major_supplier_and_buyer" type="VARCHAR(255)"/>
            <column name="counter_party_principal_business_activities" type="VARCHAR(255)"/>
            <column name="equivalent_competitor_of_app" type="VARCHAR(255)"/>
            <column name="how_did_learn_about_this_counter_party" type="VARCHAR(255)"/>
            <column name="counterparty_description" type="VARCHAR(255)"/>
            <column name="upload_files" type="JSONB"/>
            <column name="status" type="VARCHAR(255)"/>
            <column name="counter_party_assessment" type="JSONB"/>
            <column name="stage" type="VARCHAR(255)"/>
            <column name="assign_to" type="VARCHAR(255)"/>
            <column name="tier_name" type="VARCHAR(255)"/>
            <column name="counterparty_code" type="VARCHAR(255)"/>
            <column name="telephone_no" type="VARCHAR(255)"/>
            <column name="email_address" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-355">
        <createTable tableName="xceler_counterparty_on_boarding_request_bankdetails">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_counterparty_on_boarding_request_bankdetails_pkey"/>
            </column>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="bank_name" type="VARCHAR(255)"/>
            <column name="bank_account_no" type="VARCHAR(255)"/>
            <column name="lc_issuing_bank" type="VARCHAR(255)"/>
            <column name="country_of_bank" type="VARCHAR(255)"/>
            <column name="bank_address" type="TEXT"/>
            <column name="swift_code" type="VARCHAR(255)"/>
            <column name="advising_bank" type="VARCHAR(255)"/>
            <column name="counterparty_on_boarding_request_uuid" type="UUID"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-356">
        <createTable tableName="xceler_counterparty_on_boarding_request_limitrequest">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_counterparty_on_boarding_request_limitrequest_pkey"/>
            </column>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="mtm_limit" type="FLOAT8"/>
            <column name="monthly_credit_exposure" type="FLOAT8"/>
            <column name="max_position" type="FLOAT8"/>
            <column name="max_group_position" type="FLOAT8"/>
            <column name="periodicity" type="VARCHAR(255)"/>
            <column name="tenor" type="INTEGER"/>
            <column name="counterparty_on_boarding_request_uuid" type="UUID"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-357">
        <createTable tableName="xceler_doctemplateservice_doctemplatemaster">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_doctemplateservice_doctemplatemaster_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="business_application" type="VARCHAR(255)"/>
            <column name="commodity" type="VARCHAR(255)"/>
            <column name="company" type="VARCHAR(255)"/>
            <column name="counterparty" type="VARCHAR(255)"/>
            <column name="doc_template" type="BYTEA"/>
            <column name="doc_template_name" type="VARCHAR(255)"/>
            <column name="incoterm" type="VARCHAR(255)"/>
            <column name="status" type="BOOLEAN"/>
            <column name="template_engine" type="VARCHAR(255)"/>
            <column name="template_file_name" type="VARCHAR(255)"/>
            <column name="template_file_type" type="VARCHAR(255)"/>
            <column name="trade_type" type="VARCHAR(255)"/>
            <column name="transaction_type" type="VARCHAR(255)"/>
            <column name="template_url" type="VARCHAR(255)"/>
            <column name="load_port" type="VARCHAR(255)"/>
            <column name="discharge_port" type="VARCHAR(255)"/>
            <column name="region" type="VARCHAR(255)"/>
            <column name="allowed_output_formats" type="TEXT"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-358">
        <createTable tableName="xceler_doctemplateservice_documentrepository">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_doctemplateservice_documentrepository_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="business_application_id" type="VARCHAR(255)"/>
            <column name="business_application_name" type="VARCHAR(255)"/>
            <column name="commodity" type="VARCHAR(255)"/>
            <column name="company" type="VARCHAR(255)"/>
            <column name="counterparty" type="VARCHAR(255)"/>
            <column name="document" type="BYTEA"/>
            <column name="document_id" type="VARCHAR(255)"/>
            <column name="incoterm" type="VARCHAR(255)"/>
            <column name="trade_type" type="VARCHAR(255)"/>
            <column name="transaction_type" type="VARCHAR(255)"/>
            <column name="document_name" type="VARCHAR(255)"/>
            <column name="mime_type" type="VARCHAR(255)"/>
            <column name="description" type="TEXT"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-359">
        <createTable tableName="xceler_eodervice_fxtraderawdata">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_eodervice_fxtraderawdata_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="buy_amount" type="FLOAT8"/>
            <column name="buy_amount_currency" type="VARCHAR(255)"/>
            <column name="company" type="VARCHAR(255)"/>
            <column name="counterparty" type="VARCHAR(255)"/>
            <column name="fx_market_index" type="VARCHAR(255)"/>
            <column name="fx_pair" type="VARCHAR(255)"/>
            <column name="fx_trade_id" type="VARCHAR(255)"/>
            <column name="fx_trade_type" type="VARCHAR(255)"/>
            <column name="notional_amount" type="FLOAT8"/>
            <column name="planned_notional_value" type="FLOAT8"/>
            <column name="profitcenter" type="VARCHAR(255)"/>
            <column name="rate" type="FLOAT8"/>
            <column name="sell_amount" type="FLOAT8"/>
            <column name="sell_amount_currency" type="VARCHAR(255)"/>
            <column name="settlement_currency" type="VARCHAR(255)"/>
            <column name="settlement_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="trade_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="trade_transaction_type" type="INTEGER"/>
            <column name="value_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-360">
        <createTable tableName="xceler_eodservice_eodjobhistory">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_eodservice_eodjobhistory_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_time" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="eod_job_name" type="VARCHAR(255)"/>
            <column name="eod_parameters" type="VARCHAR(255)"/>
            <column name="message" type="VARCHAR(255)"/>
            <column name="published" type="BOOLEAN"/>
            <column name="run_by_user" type="VARCHAR(255)"/>
            <column name="start_time" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="step_status" type="BYTEA"/>
            <column name="task_run_name" type="VARCHAR(255)"/>
            <column name="value_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-361">
        <createTable tableName="xceler_eodservice_eodjobtemplate">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_eodservice_eodjobtemplate_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="schedule" type="VARCHAR(255)"/>
            <column name="commodity" type="TEXT"/>
            <column name="company" type="TEXT"/>
            <column name="eod_currency" type="VARCHAR(255)"/>
            <column name="eod_template_name" type="VARCHAR(255)"/>
            <column name="eod_uom" type="VARCHAR(255)"/>
            <column name="last_run_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="monthly_date" type="VARCHAR(255)"/>
            <column name="prerequisite" type="BYTEA"/>
            <column name="profit_centre" type="TEXT"/>
            <column name="trade_type" type="VARCHAR(255)"/>
            <column name="transaction_type" type="VARCHAR(255)"/>
            <column name="weekdays" type="BYTEA"/>
            <column name="status" type="VARCHAR(255)"/>
            <column name="run_type" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-362">
        <createTable tableName="xceler_eodservice_futuretradenettingeodrawdata">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_eodservice_futuretradenettingeodrawdata_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="commodity" type="VARCHAR(255)"/>
            <column name="company" type="VARCHAR(255)"/>
            <column name="match_lots" type="FLOAT8"/>
            <column name="netted_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="netting_id" type="VARCHAR(255)"/>
            <column name="netting_price" type="FLOAT8"/>
            <column name="netting_uuid" type="VARCHAR(255)"/>
            <column name="profitcenter" type="VARCHAR(255)"/>
            <column name="trade_id" type="VARCHAR(255)"/>
            <column name="trade_transaction_type" type="INTEGER"/>
            <column name="trade_uuid" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-363">
        <createTable tableName="xceler_eodservice_fxallocationrawdata">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_eodservice_fxallocationrawdata_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="fx_plan_id" type="VARCHAR(255)"/>
            <column name="fx_trade_id" type="VARCHAR(255)"/>
            <column name="obligation_allocated_notional_value" type="FLOAT8"/>
            <column name="obligation_fx_allocation_id" type="VARCHAR(255)"/>
            <column name="planned_obligation_id" type="VARCHAR(255)"/>
            <column name="rate" type="FLOAT8"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-364">
        <createTable tableName="xceler_eodservice_fxeodpublished">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_eodservice_fxeodpublished_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="company" type="VARCHAR(255)"/>
            <column name="eod_currency" type="VARCHAR(255)"/>
            <column name="eod_job_name" type="VARCHAR(255)"/>
            <column name="eod_run_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="eoduom" type="VARCHAR(255)"/>
            <column name="fx_trade_id" type="VARCHAR(255)"/>
            <column name="mtm_pnl" type="FLOAT8"/>
            <column name="mtm_pnl_currency" type="VARCHAR(255)"/>
            <column name="profitcenter" type="VARCHAR(255)"/>
            <column name="realised_pnl" type="FLOAT8"/>
            <column name="realised_pnl_currency" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-365">
        <createTable tableName="xceler_eodservice_inventorydetailsrawdata">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_eodservice_inventorydetailsrawdata_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="allow_negative_draw" type="BOOLEAN"/>
            <column name="commodity" type="VARCHAR(255)"/>
            <column name="net_price" type="FLOAT8"/>
            <column name="net_quantity" type="FLOAT8"/>
            <column name="storage_id" type="VARCHAR(255)"/>
            <column name="storage_uuid" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-366">
        <createTable tableName="xceler_eodservice_mtmvalidationresults">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_eodservice_mtmvalidationresults_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="brand" type="VARCHAR(255)"/>
            <column name="commodity" type="VARCHAR(255)"/>
            <column name="company" type="VARCHAR(255)"/>
            <column name="eod_job_name" type="VARCHAR(255)"/>
            <column name="error_message" type="VARCHAR(255)"/>
            <column name="grade" type="VARCHAR(255)"/>
            <column name="incoterm" type="VARCHAR(255)"/>
            <column name="location" type="VARCHAR(255)"/>
            <column name="obligation_id" type="VARCHAR(255)"/>
            <column name="origin" type="VARCHAR(255)"/>
            <column name="price_type" type="VARCHAR(255)"/>
            <column name="season" type="VARCHAR(255)"/>
            <column name="trade_discharge_location" type="VARCHAR(255)"/>
            <column name="trade_id" type="VARCHAR(255)"/>
            <column name="trade_load_location" type="VARCHAR(255)"/>
            <column name="trade_transaction_type" type="INTEGER"/>
            <column name="trade_type" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-367">
        <createTable tableName="xceler_eodservice_stockrawdata">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_eodservice_stockrawdata_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="commodity" type="VARCHAR(255)"/>
            <column name="plan_id" type="VARCHAR(255)"/>
            <column name="planned_obligation_id" type="VARCHAR(255)"/>
            <column name="price_currency" type="VARCHAR(255)"/>
            <column name="price_uom" type="VARCHAR(255)"/>
            <column name="quantity" type="FLOAT8"/>
            <column name="quantity_uom" type="VARCHAR(255)"/>
            <column name="stock_created_on" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="stock_id" type="VARCHAR(255)"/>
            <column name="stock_plan_type" type="VARCHAR(255)"/>
            <column name="stock_price" type="FLOAT8"/>
            <column name="storage_id" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-368">
        <createTable tableName="xceler_eodservice_stockstaging">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_eodservice_stockstaging_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="commodity" type="VARCHAR(255)"/>
            <column name="company" type="VARCHAR(255)"/>
            <column name="eod_job_name" type="VARCHAR(255)"/>
            <column name="eod_run_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="mtm_pnl" type="FLOAT8"/>
            <column name="profitcenter" type="VARCHAR(255)"/>
            <column name="storage_id" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-369">
        <createTable tableName="xceler_eodservice_storagerawdata">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_eodservice_storagerawdata_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="active" type="INTEGER"/>
            <column name="available_capacity" type="FLOAT8"/>
            <column name="comingle" type="BOOLEAN"/>
            <column name="commodity" type="VARCHAR(255)"/>
            <column name="company" type="VARCHAR(255)"/>
            <column name="eod_currency" type="VARCHAR(255)"/>
            <column name="eod_uom" type="VARCHAR(255)"/>
            <column name="fx_index_code" type="VARCHAR(255)"/>
            <column name="fx_index_name" type="VARCHAR(255)"/>
            <column name="fx_index_pair" type="VARCHAR(255)"/>
            <column name="fx_index_rate" type="FLOAT8"/>
            <column name="location" type="VARCHAR(255)"/>
            <column name="mtmindex" type="VARCHAR(255)"/>
            <column name="owner_name" type="VARCHAR(255)"/>
            <column name="profitcentre" type="VARCHAR(255)"/>
            <column name="status" type="INTEGER"/>
            <column name="storage_currency" type="VARCHAR(255)"/>
            <column name="storage_id" type="VARCHAR(255)"/>
            <column name="storage_name" type="VARCHAR(255)"/>
            <column name="storage_uom" type="VARCHAR(255)"/>
            <column name="storage_uuid" type="VARCHAR(255)"/>
            <column name="total_storage_capacity" type="FLOAT8"/>
            <column name="type" type="VARCHAR(255)"/>
            <column name="valuation_method" type="VARCHAR(255)"/>
            <column name="virtual_storage" type="BOOLEAN"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-370">
        <createTable tableName="xceler_futuretradeservice_futuretrade_version_4_4_6">
            <column name="uuid" type="UUID"/>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="brokerage_fee" type="FLOAT8"/>
            <column name="clearing_broker" type="VARCHAR(255)"/>
            <column name="clearing_broker_account" type="VARCHAR(255)"/>
            <column name="clearing_fee" type="FLOAT8"/>
            <column name="commodity" type="VARCHAR(255)"/>
            <column name="company" type="VARCHAR(255)"/>
            <column name="counterparty" type="VARCHAR(255)"/>
            <column name="currency" type="VARCHAR(255)"/>
            <column name="exchange" type="VARCHAR(255)"/>
            <column name="exchange_for" type="VARCHAR(255)"/>
            <column name="execution_broker" type="VARCHAR(255)"/>
            <column name="expired_status" type="VARCHAR(255)"/>
            <column name="expiry_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="expiry_month" type="VARCHAR(255)"/>
            <column name="future_index" type="VARCHAR(255)"/>
            <column name="lot" type="FLOAT8"/>
            <column name="lot_size" type="FLOAT8"/>
            <column name="netting_status" type="VARCHAR(255)"/>
            <column name="profitcenter" type="VARCHAR(255)"/>
            <column name="tag" type="VARCHAR(255)"/>
            <column name="trade_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="trade_id" type="VARCHAR(255)"/>
            <column name="trade_price" type="FLOAT8"/>
            <column name="trade_transaction_type" type="INTEGER"/>
            <column name="trade_type" type="VARCHAR(255)"/>
            <column name="trader_name" type="VARCHAR(255)"/>
            <column name="uom" type="VARCHAR(255)"/>
            <column name="cost" type="FLOAT8"/>
            <column name="initial_margin" type="FLOAT8"/>
            <column name="maintenance_margin" type="FLOAT8"/>
            <column name="rollover_status" type="BOOLEAN"/>
            <column name="rollover_spread" type="FLOAT8"/>
            <column name="parent_row_id" type="VARCHAR(255)"/>
            <column name="product_code" type="VARCHAR(255)"/>
            <column name="contract_month" type="VARCHAR(255)"/>
            <column name="match_lot" type="FLOAT8"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-371">
        <createTable tableName="xceler_fxtradeservice_fxallocationdata">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_fxtradeservice_fxallocationdata_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="fx_plan_id" type="VARCHAR(255)"/>
            <column name="fx_trade_id" type="VARCHAR(255)"/>
            <column name="obligation_allocated_notional_value" type="FLOAT8"/>
            <column name="obligation_fx_allocation_id" type="VARCHAR(255)"/>
            <column name="planned_obligation_id" type="VARCHAR(255)"/>
            <column name="rate" type="FLOAT8"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-372">
        <createTable tableName="xceler_fxtradeservice_fxtradeplan">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_fxtradeservice_fxtradeplan_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="company" type="VARCHAR(255)"/>
            <column name="counterparty" type="VARCHAR(255)"/>
            <column name="external_ref" type="VARCHAR(255)"/>
            <column name="fx_pair" type="VARCHAR(255)"/>
            <column name="fx_trade_id" type="VARCHAR(255)"/>
            <column name="fx_trade_plan_id" type="VARCHAR(255)"/>
            <column name="fx_trade_type" type="VARCHAR(255)"/>
            <column name="planned_notional_value" type="FLOAT8"/>
            <column name="profit_center" type="VARCHAR(255)"/>
            <column name="rate" type="FLOAT8"/>
            <column name="settlement_currency" type="VARCHAR(255)"/>
            <column name="settlement_date" type="date"/>
            <column name="trade_transaction_type" type="INTEGER"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-373">
        <createTable tableName="xceler_grn_stock">
            <column name="uuid" type="UUID"/>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="grn_id" type="VARCHAR(255)"/>
            <column name="planned_obligation_id" type="VARCHAR(255)"/>
            <column name="split_sequence_number" type="FLOAT8"/>
            <column name="actualize_id" type="VARCHAR(255)"/>
            <column name="grn_quantity" type="FLOAT8"/>
            <column name="transfer_id" type="VARCHAR(255)"/>
            <column name="grn_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="loss_gain_quantity" type="FLOAT8"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-374">
        <createTable tableName="xceler_integration_hub_events">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_integration_hub_events_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="event_id" type="VARCHAR(255)"/>
            <column name="event_type" type="VARCHAR(255)"/>
            <column name="event_payload_template" type="VARCHAR(255)"/>
            <column name="event_data" type="JSONB"/>
            <column name="subscription_id" type="BIGINT"/>
            <column name="entry_type" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-375">
        <createTable tableName="xceler_integration_hub_history">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_integration_hub_history_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="payload" type="JSONB"/>
            <column name="status" type="VARCHAR(50)"/>
            <column name="error_message" type="TEXT"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-376">
        <createTable tableName="xceler_integration_hub_listeners">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_integration_hub_listeners_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="listener_id" type="VARCHAR(255)"/>
            <column name="event_subscribed" type="VARCHAR(255)"/>
            <column name="listener_type" type="VARCHAR(255)"/>
            <column name="listener_configuration" type="JSONB"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-377">
        <createTable tableName="xceler_inventory_backup_v5_1_2">
            <column name="uuid" type="UUID"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="inventory_id" type="VARCHAR(255)"/>
            <column name="inventory_name" type="VARCHAR(255)"/>
            <column name="commodity" type="VARCHAR(255)"/>
            <column name="total_capacity" type="JSONB"/>
            <column name="inventory_uom" type="VARCHAR(255)"/>
            <column name="inventory_currency" type="VARCHAR(255)"/>
            <column name="grade" type="VARCHAR(255)"/>
            <column name="brand" type="VARCHAR(255)"/>
            <column name="mode_of_inventory" type="VARCHAR(255)"/>
            <column name="inventory_type" type="VARCHAR(255)"/>
            <column name="inventory_status" type="VARCHAR(255)"/>
            <column name="stocked_quantity" type="FLOAT8"/>
            <column name="available_capacity" type="FLOAT8"/>
            <column name="average_price" type="FLOAT8"/>
            <column name="valuation_method" type="VARCHAR(255)"/>
            <column name="eod_currency" type="VARCHAR(255)"/>
            <column name="eod_uom" type="VARCHAR(255)"/>
            <column name="status" type="VARCHAR(50)"/>
            <column name="storage_name" type="VARCHAR(255)"/>
            <column name="company_name" type="VARCHAR(255)"/>
            <column name="profit_center" type="VARCHAR(255)"/>
            <column name="blending" type="VARCHAR(20)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-378">
        <createTable tableName="xceler_json_change_log">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_json_change_log_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="id" type="VARCHAR(255)"/>
            <column name="developer" type="VARCHAR(255)"/>
            <column name="status" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-379">
        <createTable tableName="xceler_messagepreservingservice_messagepreserve">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_messagepreservingservice_messagepreserve_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="exchange_name" type="VARCHAR(255)"/>
            <column name="failure_reason" type="VARCHAR(255)"/>
            <column name="re_publish_status" type="VARCHAR(255)"/>
            <column name="service_name" type="VARCHAR(255)"/>
            <column name="topic_name" type="VARCHAR(255)"/>
            <column name="transaction_object" type="JSONB"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-380">
        <createTable tableName="xceler_notificationservice_notifcations">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_notificationservice_notifcations_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="action_required" type="VARCHAR(255)"/>
            <column name="allowed_roles" type="VARCHAR(255)"/>
            <column name="expiry_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="generated_by" type="VARCHAR(255)"/>
            <column name="is_read" type="BOOLEAN"/>
            <column name="message" type="VARCHAR(255)"/>
            <column name="url" type="VARCHAR(255)"/>
            <column name="reference_id" type="VARCHAR(255)"/>
            <column name="notification_to" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-381">
        <createTable tableName="xceler_notificationservice_notificationconfiguration">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_notificationservice_notificationconfiguration_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="notification_config_id" type="VARCHAR(255)"/>
            <column name="query" type="VARCHAR(255)"/>
            <column name="table_name" type="VARCHAR(255)"/>
            <column name="user_id" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-382">
        <createTable tableName="xceler_notificationservice_notificationrulesquery">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_notificationservice_notificationrulesquery_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="body_text" type="TEXT"/>
            <column name="description" type="VARCHAR(255)"/>
            <column name="email_id" type="VARCHAR(255)"/>
            <column name="notification_config_id" type="VARCHAR(255)"/>
            <column name="notification_option" type="VARCHAR(255)"/>
            <column name="phone" type="VARCHAR(255)"/>
            <column name="query" type="TEXT"/>
            <column name="recipient" type="VARCHAR(255)"/>
            <column name="recipient_type" type="VARCHAR(255)"/>
            <column name="role" type="VARCHAR(255)"/>
            <column name="status" type="BOOLEAN"/>
            <column name="subject" type="VARCHAR(255)"/>
            <column name="user_id" type="VARCHAR(255)"/>
            <column name="trigger_event" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-383">
        <createTable tableName="xceler_physicaltradeservice_clausecapture">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_physicaltradeservice_clausecapture_pkey"/>
            </column>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="clause_master_uuid" type="VARCHAR(255)"/>
            <column name="clause_name" type="VARCHAR(255)"/>
            <column name="trade_id" type="VARCHAR(255)"/>
            <column name="clause_print_sequence" type="VARCHAR(10)"/>
            <column name="clause_description" type="TEXT"/>
            <column name="modified" type="BOOLEAN"/>
            <column name="clause_heading" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-384">
        <createTable tableName="xceler_physicaltradeservice_deliveryschedule">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_physicaltradeservice_deliveryschedule_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="internalpackage" type="VARCHAR(255)"/>
            <column name="no_of_units" type="FLOAT8"/>
            <column name="period_end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="period_start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="quantity" type="FLOAT8"/>
            <column name="ship_del_month" type="VARCHAR(255)"/>
            <column name="trade_id" type="VARCHAR(255)"/>
            <column name="trade_uuid" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-385">
        <createTable tableName="xceler_physicaltradeservice_deliveryschedule_bkp">
            <column name="uuid" type="UUID"/>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="internalpackage" type="VARCHAR(255)"/>
            <column name="no_of_units" type="FLOAT8"/>
            <column name="period_end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="period_start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="quantity" type="FLOAT8"/>
            <column name="ship_del_month" type="VARCHAR(255)"/>
            <column name="trade_id" type="VARCHAR(255)"/>
            <column name="trade_uuid" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-386">
        <createTable tableName="xceler_physicaltradeservice_physicaltrade_23_07">
            <column name="uuid" type="UUID"/>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="brand" type="VARCHAR(255)"/>
            <column name="broker" type="VARCHAR(255)"/>
            <column name="comments" type="VARCHAR(2048)"/>
            <column name="commodity" type="VARCHAR(255)"/>
            <column name="company" type="VARCHAR(255)"/>
            <column name="contract_confirmation" type="VARCHAR(255)"/>
            <column name="counterparty" type="VARCHAR(255)"/>
            <column name="delivery_end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="delivery_start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="discharge_location" type="VARCHAR(255)"/>
            <column name="external_package" type="VARCHAR(255)"/>
            <column name="external_package_unit" type="FLOAT8"/>
            <column name="external_reference" type="VARCHAR(255)"/>
            <column name="factory" type="VARCHAR(255)"/>
            <column name="future_contract_month" type="VARCHAR(255)"/>
            <column name="future_index" type="VARCHAR(255)"/>
            <column name="fxrate" type="FLOAT8"/>
            <column name="grade" type="VARCHAR(255)"/>
            <column name="incoterm" type="VARCHAR(255)"/>
            <column name="internal_package" type="VARCHAR(255)"/>
            <column name="internal_package_unit" type="FLOAT8"/>
            <column name="internal_profit_center" type="VARCHAR(255)"/>
            <column name="is_internal_trade" type="BOOLEAN"/>
            <column name="is_provisional_pricing" type="BOOLEAN"/>
            <column name="load_location" type="VARCHAR(255)"/>
            <column name="location" type="VARCHAR(255)"/>
            <column name="long_contract" type="VARCHAR(255)"/>
            <column name="origin" type="VARCHAR(255)"/>
            <column name="package_type" type="VARCHAR(255)"/>
            <column name="paymentterm" type="VARCHAR(255)"/>
            <column name="percentage" type="FLOAT8"/>
            <column name="period_end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="period_start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="price_type" type="VARCHAR(255)"/>
            <column name="profitcenter" type="VARCHAR(255)"/>
            <column name="provisional_fx_rate" type="FLOAT8"/>
            <column name="provisional_price" type="FLOAT8"/>
            <column name="provisional_price_currency" type="VARCHAR(255)"/>
            <column name="provisional_price_type" type="VARCHAR(255)"/>
            <column name="provisional_price_uom" type="VARCHAR(255)"/>
            <column name="quantity" type="FLOAT8"/>
            <column name="quantity_periodicity" type="VARCHAR(255)"/>
            <column name="quantity_tolerance_type" type="VARCHAR(255)"/>
            <column name="quantity_uom" type="VARCHAR(255)"/>
            <column name="season" type="VARCHAR(255)"/>
            <column name="special_instructions" type="TEXT"/>
            <column name="tolerance_value" type="VARCHAR(255)"/>
            <column name="total_trade_qty" type="FLOAT8"/>
            <column name="trade_date_time" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="trade_id" type="VARCHAR(255)"/>
            <column name="trade_price" type="FLOAT8"/>
            <column name="trade_price_currency" type="VARCHAR(255)"/>
            <column name="trade_price_uom" type="VARCHAR(255)"/>
            <column name="trade_settlement_currency" type="VARCHAR(255)"/>
            <column name="trade_transaction_type" type="INTEGER"/>
            <column name="trader_name" type="VARCHAR(255)"/>
            <column name="load_location_type" type="VARCHAR(255)"/>
            <column name="location_type" type="VARCHAR(255)"/>
            <column name="mode_of_transport" type="VARCHAR(255)"/>
            <column name="total_units" type="FLOAT8"/>
            <column name="unload_location_type" type="VARCHAR(255)"/>
            <column name="weight_basis" type="VARCHAR(255)"/>
            <column name="delivery_terms_clause" type="VARCHAR(2048)"/>
            <column name="payment_terms_clause" type="VARCHAR(2048)"/>
            <column name="pricing_terms_clause" type="VARCHAR(2048)"/>
            <column name="quantity_terms_clause" type="VARCHAR(2048)"/>
            <column name="quotation_period_clause" type="VARCHAR(2048)"/>
            <column name="quality_terms_clause" type="VARCHAR(2048)"/>
            <column name="commodity_code" type="VARCHAR(255)"/>
            <column name="company_code" type="VARCHAR(255)"/>
            <column name="profitcenter_code" type="VARCHAR(255)"/>
            <column name="internal_profitcenter_code" type="VARCHAR(255)"/>
            <column name="counterparty_code" type="VARCHAR(255)"/>
            <column name="manual_trade_id" type="VARCHAR(255)"/>
            <column name="broker_reference" type="VARCHAR(255)"/>
            <column name="paper_trade" type="BOOLEAN"/>
            <column name="settlement_tolerance_percentage" type="FLOAT8"/>
            <column name="trade_type" type="VARCHAR(255)"/>
            <column name="total_trade_value" type="FLOAT8"/>
            <column name="contract_term" type="VARCHAR(255)"/>
            <column name="settlement_tolerance_value" type="VARCHAR(255)"/>
            <column name="trade_approval_status" type="VARCHAR(255)"/>
            <column name="delivery_schedule" type="JSONB"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-387">
        <createTable tableName="xceler_physicaltradeservice_physicaltrade_bkp">
            <column name="uuid" type="UUID"/>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="brand" type="VARCHAR(255)"/>
            <column name="broker" type="VARCHAR(255)"/>
            <column name="comments" type="VARCHAR(2048)"/>
            <column name="commodity" type="VARCHAR(255)"/>
            <column name="company" type="VARCHAR(255)"/>
            <column name="contract_confirmation" type="VARCHAR(255)"/>
            <column name="counterparty" type="VARCHAR(255)"/>
            <column name="delivery_end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="delivery_start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="discharge_location" type="VARCHAR(255)"/>
            <column name="external_package" type="VARCHAR(255)"/>
            <column name="external_package_unit" type="FLOAT8"/>
            <column name="external_reference" type="VARCHAR(255)"/>
            <column name="factory" type="VARCHAR(255)"/>
            <column name="future_contract_month" type="VARCHAR(255)"/>
            <column name="future_index" type="VARCHAR(255)"/>
            <column name="fxrate" type="FLOAT8"/>
            <column name="grade" type="VARCHAR(255)"/>
            <column name="incoterm" type="VARCHAR(255)"/>
            <column name="internal_package" type="VARCHAR(255)"/>
            <column name="internal_package_unit" type="FLOAT8"/>
            <column name="internal_profit_center" type="VARCHAR(255)"/>
            <column name="is_internal_trade" type="BOOLEAN"/>
            <column name="is_provisional_pricing" type="BOOLEAN"/>
            <column name="load_location" type="VARCHAR(255)"/>
            <column name="location" type="VARCHAR(255)"/>
            <column name="long_contract" type="VARCHAR(255)"/>
            <column name="origin" type="VARCHAR(255)"/>
            <column name="package_type" type="VARCHAR(255)"/>
            <column name="paymentterm" type="VARCHAR(255)"/>
            <column name="percentage" type="FLOAT8"/>
            <column name="period_end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="period_start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="price_type" type="VARCHAR(255)"/>
            <column name="profitcenter" type="VARCHAR(255)"/>
            <column name="provisional_fx_rate" type="FLOAT8"/>
            <column name="provisional_price" type="FLOAT8"/>
            <column name="provisional_price_currency" type="VARCHAR(255)"/>
            <column name="provisional_price_type" type="VARCHAR(255)"/>
            <column name="provisional_price_uom" type="VARCHAR(255)"/>
            <column name="quantity" type="FLOAT8"/>
            <column name="quantity_periodicity" type="VARCHAR(255)"/>
            <column name="quantity_tolerance_type" type="VARCHAR(255)"/>
            <column name="quantity_uom" type="VARCHAR(255)"/>
            <column name="season" type="VARCHAR(255)"/>
            <column name="special_instructions" type="TEXT"/>
            <column name="tolerance_value" type="VARCHAR(255)"/>
            <column name="total_trade_qty" type="FLOAT8"/>
            <column name="trade_date_time" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="trade_id" type="VARCHAR(255)"/>
            <column name="trade_price" type="FLOAT8"/>
            <column name="trade_price_currency" type="VARCHAR(255)"/>
            <column name="trade_price_uom" type="VARCHAR(255)"/>
            <column name="trade_settlement_currency" type="VARCHAR(255)"/>
            <column name="trade_transaction_type" type="INTEGER"/>
            <column name="trader_name" type="VARCHAR(255)"/>
            <column name="load_location_type" type="VARCHAR(255)"/>
            <column name="location_type" type="VARCHAR(255)"/>
            <column name="mode_of_transport" type="VARCHAR(255)"/>
            <column name="total_units" type="FLOAT8"/>
            <column name="unload_location_type" type="VARCHAR(255)"/>
            <column name="weight_basis" type="VARCHAR(255)"/>
            <column name="delivery_terms_clause" type="VARCHAR(2048)"/>
            <column name="payment_terms_clause" type="VARCHAR(2048)"/>
            <column name="pricing_terms_clause" type="VARCHAR(2048)"/>
            <column name="quantity_terms_clause" type="VARCHAR(2048)"/>
            <column name="quotation_period_clause" type="VARCHAR(2048)"/>
            <column name="quality_terms_clause" type="VARCHAR(2048)"/>
            <column name="commodity_code" type="VARCHAR(255)"/>
            <column name="company_code" type="VARCHAR(255)"/>
            <column name="profitcenter_code" type="VARCHAR(255)"/>
            <column name="internal_profitcenter_code" type="VARCHAR(255)"/>
            <column name="counterparty_code" type="VARCHAR(255)"/>
            <column name="manual_trade_id" type="VARCHAR(255)"/>
            <column name="broker_reference" type="VARCHAR(255)"/>
            <column name="paper_trade" type="BOOLEAN"/>
            <column name="settlement_tolerance_percentage" type="FLOAT8"/>
            <column name="trade_type" type="VARCHAR(255)"/>
            <column name="total_trade_value" type="FLOAT8"/>
            <column name="contract_term" type="VARCHAR(255)"/>
            <column name="settlement_tolerance_value" type="VARCHAR(255)"/>
            <column name="trade_approval_status" type="VARCHAR(255)"/>
            <column name="delivery_schedule" type="JSONB"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-388">
        <createTable tableName="xceler_physicaltradeservice_physicaltradequalityspec">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_physicaltradeservice_physicaltradequalityspec_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="basis" type="VARCHAR(255)"/>
            <column name="description" type="VARCHAR(255)"/>
            <column name="max" type="FLOAT8"/>
            <column name="min" type="FLOAT8"/>
            <column name="name" type="VARCHAR(255)"/>
            <column name="trade_id" type="VARCHAR(255)"/>
            <column name="typical" type="VARCHAR(255)"/>
            <column name="unit" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-389">
        <createTable tableName="xceler_physicaltradeservice_tradeattachment">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_physicaltradeservice_tradeattachment_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="attachment_file_name" type="VARCHAR(255)"/>
            <column name="attachment_file_type" type="VARCHAR(255)"/>
            <column name="file_size" type="VARCHAR(255)"/>
            <column name="trade_id" type="VARCHAR(255)"/>
            <column name="trade_uuid" type="VARCHAR(255)"/>
            <column name="upload_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="uploaded_by" type="VARCHAR(255)"/>
            <column name="attachment_url" type="TEXT"/>
            <column name="manual_trade_id" type="VARCHAR(255)"/>
            <column name="description" type="TEXT"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-390">
        <createTable tableName="xceler_physicaltradeservice_tradestatus">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_physicaltradeservice_tradestatus_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="counterparty_approval_status" type="VARCHAR(255)"/>
            <column name="finance_controller_approval_status" type="VARCHAR(255)"/>
            <column name="trade_status" type="VARCHAR(255)"/>
            <column name="tradeuuid" type="VARCHAR(255)"/>
            <column name="trader_approval_status" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-391">
        <createTable tableName="xceler_physicaltradeservice_tradestatus_bkp">
            <column name="uuid" type="UUID"/>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="counterparty_approval_status" type="VARCHAR(255)"/>
            <column name="finance_controller_approval_status" type="VARCHAR(255)"/>
            <column name="trade_status" type="VARCHAR(255)"/>
            <column name="tradeuuid" type="VARCHAR(255)"/>
            <column name="trader_approval_status" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-392">
        <createTable tableName="xceler_pricingservice_advancedtradeprice_backup_migration">
            <column name="uuid" type="UUID"/>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="price_line_id" type="VARCHAR(255)"/>
            <column name="obligation_id" type="VARCHAR(255)"/>
            <column name="trade_price_type" type="VARCHAR(255)"/>
            <column name="trade_quantity" type="FLOAT8"/>
            <column name="trade_quantity_uom" type="VARCHAR(255)"/>
            <column name="price_status" type="VARCHAR(255)"/>
            <column name="priced_quantity" type="FLOAT8"/>
            <column name="trade_price" type="FLOAT8"/>
            <column name="trade_price_currency" type="VARCHAR(255)"/>
            <column name="trade_price_uom" type="VARCHAR(255)"/>
            <column name="provisional_price" type="FLOAT8"/>
            <column name="fx_rate" type="FLOAT8"/>
            <column name="trade_settlement_currency" type="VARCHAR(255)"/>
            <column name="trade_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="balance_quantity" type="FLOAT8"/>
            <column name="average_price" type="FLOAT8"/>
            <column name="priced_lot" type="FLOAT8"/>
            <column name="balance_lot" type="FLOAT8"/>
            <column name="trade_type" type="VARCHAR(255)"/>
            <column name="commodity" type="VARCHAR(255)"/>
            <column name="trade_transaction_type" type="INTEGER"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-393">
        <createTable tableName="xceler_pricingservice_priceallocation_backup_july_23">
            <column name="uuid" type="UUID"/>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="currency_uom" type="VARCHAR(255)"/>
            <column name="obligation_class_name" type="VARCHAR(255)"/>
            <column name="obligation_id" type="VARCHAR(255)"/>
            <column name="price" type="FLOAT8"/>
            <column name="price_allocation_id" type="VARCHAR(255)"/>
            <column name="price_currency" type="VARCHAR(255)"/>
            <column name="price_line_id" type="VARCHAR(255)"/>
            <column name="quantity" type="FLOAT8"/>
            <column name="quantity_uom" type="VARCHAR(255)"/>
            <column name="trade_id" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-394">
        <createTable tableName="xceler_pricingservice_pricecomponent_backup_july_23">
            <column name="uuid" type="UUID"/>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="pricing_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="price_line_id" type="VARCHAR(255)"/>
            <column name="obligation_id" type="VARCHAR(255)"/>
            <column name="component" type="VARCHAR(255)"/>
            <column name="price_line_type" type="VARCHAR(255)"/>
            <column name="price_formula" type="VARCHAR(255)"/>
            <column name="price_index" type="BYTEA"/>
            <column name="price" type="FLOAT8"/>
            <column name="priced_quantity" type="FLOAT8"/>
            <column name="allocated_quantity" type="FLOAT8"/>
            <column name="pricing_currency" type="VARCHAR(255)"/>
            <column name="pricing_uom" type="VARCHAR(255)"/>
            <column name="fx_rate" type="FLOAT8"/>
            <column name="flexible_fx_rate" type="BOOLEAN"/>
            <column name="is_provisional" type="BOOLEAN"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-395">
        <createTable tableName="xceler_pricingservice_pricecomponent_backup_migration">
            <column name="uuid" type="UUID"/>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="pricing_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="price_line_id" type="VARCHAR(255)"/>
            <column name="obligation_id" type="VARCHAR(255)"/>
            <column name="component" type="VARCHAR(255)"/>
            <column name="price_line_type" type="VARCHAR(255)"/>
            <column name="price_formula" type="VARCHAR(255)"/>
            <column name="price_index" type="BYTEA"/>
            <column name="price" type="FLOAT8"/>
            <column name="priced_quantity" type="FLOAT8"/>
            <column name="allocated_quantity" type="FLOAT8"/>
            <column name="pricing_currency" type="VARCHAR(255)"/>
            <column name="pricing_uom" type="VARCHAR(255)"/>
            <column name="fx_rate" type="FLOAT8"/>
            <column name="flexible_fx_rate" type="BOOLEAN"/>
            <column name="is_provisional" type="BOOLEAN"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-396">
        <createTable tableName="xceler_pricingservice_tradeprice">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_pricingservice_tradeprice_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="average_price" type="FLOAT8"/>
            <column name="balance_lot" type="FLOAT8"/>
            <column name="balance_quantity" type="FLOAT8"/>
            <column name="price_fixing_option" type="VARCHAR(255)"/>
            <column name="price_status" type="VARCHAR(255)"/>
            <column name="priced_lot" type="FLOAT8"/>
            <column name="priced_quantity" type="FLOAT8"/>
            <column name="quantity_uom" type="VARCHAR(255)"/>
            <column name="trade_id" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-397">
        <createTable tableName="xceler_riskservice_counterpartylimit">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_riskservice_counterpartylimit_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="approval_status" type="INTEGER"/>
            <column name="approved_by" type="VARCHAR(255)"/>
            <column name="approved_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="counterparty_name" type="VARCHAR(255)"/>
            <column name="description" type="VARCHAR(255)"/>
            <column name="notification" type="VARCHAR(255)"/>
            <column name="counterparty_code" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-398">
        <createTable tableName="xceler_riskservice_creditlimit">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_riskservice_creditlimit_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="counterparty_uuid" type="VARCHAR(255)"/>
            <column name="credit_limit" type="VARCHAR(255)"/>
            <column name="limit_amount" type="FLOAT8"/>
            <column name="limit_currency" type="VARCHAR(255)"/>
            <column name="notification_type" type="VARCHAR(255)"/>
            <column name="period_start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="renewal_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-399">
        <createTable tableName="xceler_riskservice_futurecommodityprice">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_riskservice_futurecommodityprice_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="future_commodity_price_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="name" type="VARCHAR(255)"/>
            <column name="px_high" type="FLOAT8"/>
            <column name="px_low" type="FLOAT8"/>
            <column name="px_open" type="FLOAT8"/>
            <column name="settlement_price" type="FLOAT8"/>
            <column name="ticker" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-400">
        <createTable tableName="xceler_riskservice_futurecommoditypriceticker">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_riskservice_futurecommoditypriceticker_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="future_commodity_price_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="px_high" type="FLOAT8"/>
            <column name="px_low" type="FLOAT8"/>
            <column name="px_open" type="FLOAT8"/>
            <column name="settlement_price" type="FLOAT8"/>
            <column name="ticker" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-401">
        <createTable tableName="xceler_riskservice_futuremarketdashboard">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_riskservice_futuremarketdashboard_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="commodity_name" type="VARCHAR(255)"/>
            <column name="ticker_name" type="VARCHAR(255)"/>
            <column name="bookmark" type="BOOLEAN"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-402">
        <createTable tableName="xceler_riskservice_fxirprice">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_riskservice_fxirprice_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="ask" type="FLOAT8"/>
            <column name="bid" type="FLOAT8"/>
            <column name="name" type="VARCHAR(255)"/>
            <column name="price_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="settlement_price" type="FLOAT8"/>
            <column name="term_structure" type="VARCHAR(255)"/>
            <column name="term_structure_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="fx_index_pair" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-403">
        <createTable tableName="xceler_riskservice_marketlimit">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_riskservice_marketlimit_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="commodity" type="VARCHAR(255)"/>
            <column name="description" type="VARCHAR(255)"/>
            <column name="drawdown_limits" type="FLOAT8"/>
            <column name="drawdown_limits_currency" type="VARCHAR(255)"/>
            <column name="name" type="VARCHAR(255)"/>
            <column name="notification" type="VARCHAR(255)"/>
            <column name="notification_type" type="VARCHAR(255)"/>
            <column name="open_position" type="FLOAT8"/>
            <column name="open_position_uom" type="VARCHAR(255)"/>
            <column name="profitcenter" type="VARCHAR(255)"/>
            <column name="status" type="BOOLEAN"/>
            <column name="trade_type" type="VARCHAR(255)"/>
            <column name="trader_name" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-404">
        <createTable tableName="xceler_riskservice_physicalcommodityprice_23_07">
            <column name="uuid" type="UUID"/>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="name" type="VARCHAR(255)"/>
            <column name="physical_comm_end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="physical_comm_price_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="physical_comm_start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="px_high" type="FLOAT8"/>
            <column name="px_low" type="FLOAT8"/>
            <column name="px_open" type="FLOAT8"/>
            <column name="settlement_price" type="FLOAT8"/>
            <column name="shipment_month" type="VARCHAR(255)"/>
            <column name="uom" type="VARCHAR(255)"/>
            <column name="currency" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-405">
        <createTable tableName="xceler_riskservice_tenorlimit">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_riskservice_tenorlimit_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="counterparty_uuid" type="VARCHAR(255)"/>
            <column name="notification_type" type="VARCHAR(255)"/>
            <column name="period_start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="periodicity" type="VARCHAR(255)"/>
            <column name="renewal_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenor" type="FLOAT8"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-406">
        <createTable tableName="xceler_riskservice_volumelimit">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_riskservice_volumelimit_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="commodity" type="VARCHAR(255)"/>
            <column name="counterparty_uuid" type="VARCHAR(255)"/>
            <column name="notification_type" type="VARCHAR(255)"/>
            <column name="period_start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="quantity" type="FLOAT8"/>
            <column name="renewal_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="uom" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-407">
        <createTable tableName="xceler_stockservice_inventorycommoditydetails">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_stockservice_inventorycommoditydetails_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="allow_negative_draw" type="BOOLEAN"/>
            <column name="commodity" type="VARCHAR(255)"/>
            <column name="net_price" type="FLOAT8"/>
            <column name="net_quantity" type="FLOAT8"/>
            <column name="storage_id" type="VARCHAR(255)"/>
            <column name="storage_uuid" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-408">
        <createTable tableName="xceler_stockservice_pointofsale">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_stockservice_pointofsale_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="commodity" type="VARCHAR(255)"/>
            <column name="counterparty" type="VARCHAR(255)"/>
            <column name="delivery_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="payment_term" type="VARCHAR(255)"/>
            <column name="pos_id" type="VARCHAR(255)"/>
            <column name="quantity" type="FLOAT8"/>
            <column name="quantity_uom" type="VARCHAR(255)"/>
            <column name="sale_currency" type="VARCHAR(255)"/>
            <column name="sale_prize" type="FLOAT8"/>
            <column name="special_instructions" type="VARCHAR(255)"/>
            <column name="storage_id" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-409">
        <createTable tableName="xceler_stockservice_stockbuildhistorydata">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_stockservice_stockbuildhistorydata_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="draw_price" type="FLOAT8"/>
            <column name="net_quantity" type="FLOAT8"/>
            <column name="stock_build_time_stamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="commodity_inventoryuuid" type="UUID"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-410">
        <createTable tableName="xceler_stockservice_stockdata">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_stockservice_stockdata_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="commodity" type="VARCHAR(255)">
                <constraints nullable="false"/>
            </column>
            <column name="planned_obligation_id" type="VARCHAR(255)"/>
            <column name="planned_obligation_uuid" type="VARCHAR(255)"/>
            <column name="planning_id" type="VARCHAR(255)"/>
            <column name="planning_uuid" type="VARCHAR(255)"/>
            <column name="price_currency" type="VARCHAR(255)"/>
            <column name="price_uom" type="VARCHAR(255)"/>
            <column name="quantity" type="FLOAT8"/>
            <column name="quantity_uom" type="VARCHAR(255)"/>
            <column name="stock_created_on" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="stock_id" type="VARCHAR(255)"/>
            <column name="stock_plan_type" type="INTEGER"/>
            <column name="stock_price" type="FLOAT8"/>
            <column name="storage_id" type="VARCHAR(255)"/>
            <column name="storage_uuid" type="VARCHAR(255)"/>
            <column name="stock_status" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-411">
        <createTable tableName="xceler_stockservice_storageinventory">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_stockservice_storageinventory_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="active" type="INTEGER"/>
            <column name="available_capacity" type="FLOAT8"/>
            <column name="commodity" type="VARCHAR(255)"/>
            <column name="company" type="VARCHAR(255)"/>
            <column name="eod_currency" type="VARCHAR(255)"/>
            <column name="eod_uom" type="VARCHAR(255)"/>
            <column name="location" type="VARCHAR(255)"/>
            <column name="owner_name" type="VARCHAR(255)"/>
            <column name="profitcentre" type="VARCHAR(255)"/>
            <column name="status" type="INTEGER"/>
            <column name="storage_currency" type="VARCHAR(255)"/>
            <column name="storage_id" type="VARCHAR(255)"/>
            <column name="storage_name" type="VARCHAR(255)"/>
            <column name="storage_uom" type="VARCHAR(255)"/>
            <column name="total_storage_capacity" type="FLOAT8"/>
            <column name="type" type="VARCHAR(255)"/>
            <column name="valuation_method" type="VARCHAR(255)"/>
            <column name="storage_facility" type="VARCHAR(255)"/>
            <column name="mode_of_storage" type="VARCHAR(255)"/>
            <column name="stored_capacity" type="VARCHAR(255)"/>
            <column name="comingle" type="VARCHAR(255)"/>
            <column name="virtual_storage" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-412">
        <createTable tableName="xceler_stockservice_storagepackaging">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_stockservice_storagepackaging_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="commodity" type="VARCHAR(255)"/>
            <column name="internal_package" type="VARCHAR(255)"/>
            <column name="max_no_ofip" type="VARCHAR(255)"/>
            <column name="space_id" type="VARCHAR(255)"/>
            <column name="storage_id" type="VARCHAR(255)"/>
            <column name="storage_uuid" type="VARCHAR(255)"/>
            <column name="total_capacity" type="FLOAT8"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-413">
        <createTable tableName="xceler_store">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_store_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="username" type="VARCHAR(255)"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="user_id" type="VARCHAR(255)"/>
            <column name="type" type="VARCHAR(50)"/>
            <column name="payload" type="JSONB"/>
            <column name="status" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-414">
        <createTable tableName="xceler_task_comment_feauture">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_task_comment_feauture_pkey"/>
            </column>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="object_type" type="VARCHAR(255)"/>
            <column name="task_type_id" type="VARCHAR(255)"/>
            <column name="replies" type="JSONB"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-415">
        <createTable tableName="xceler_task_feauture">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_task_feauture_pkey"/>
            </column>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="valid_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="valid_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="created_by" type="VARCHAR(255)"/>
            <column autoIncrement="true" name="task_id" type="INTEGER">
                <constraints nullable="false"/>
            </column>
            <column name="purpose" type="VARCHAR(255)"/>
            <column name="assigned_to" type="VARCHAR(255)"/>
            <column name="assigned_by" type="VARCHAR(255)"/>
            <column name="task_details" type="VARCHAR(255)"/>
            <column name="status" type="VARCHAR(255)"/>
            <column name="task_group" type="JSONB"/>
            <column name="task_type" type="VARCHAR(255)"/>
            <column name="service_id" type="VARCHAR(255)"/>
            <column name="is_primary" type="BOOLEAN"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-416">
        <createTable tableName="xceler_tradeplanningservice_attachment">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_tradeplanningservice_attachment_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="business_application_id" type="VARCHAR(255)"/>
            <column name="business_application_name" type="VARCHAR(255)"/>
            <column name="commodity" type="VARCHAR(255)"/>
            <column name="company" type="VARCHAR(255)"/>
            <column name="counterparty" type="VARCHAR(255)"/>
            <column name="document_size" type="VARCHAR(255)"/>
            <column name="document" type="BYTEA"/>
            <column name="attachment_name" type="VARCHAR(255)"/>
            <column name="attachment_url" type="VARCHAR(255)"/>
            <column name="incoterm" type="VARCHAR(255)"/>
            <column name="transaction_type" type="VARCHAR(255)"/>
            <column name="attachment_file_type" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-417">
        <createTable tableName="xceler_tradeplanningservice_lcdetails">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_tradeplanningservice_lcdetails_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="planned_obligation_id" type="VARCHAR(255)"/>
            <column name="lc_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="lc_number" type="VARCHAR(255)"/>
            <column name="lc_bank" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-418">
        <createTable tableName="xceler_tradeplanningservice_plannedtradeobligation_22_06_2024_b">
            <column name="uuid" type="UUID"/>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="broker" type="VARCHAR(255)"/>
            <column name="circle_string_seq" type="INTEGER"/>
            <column name="commodity" type="VARCHAR(255)"/>
            <column name="company" type="VARCHAR(255)"/>
            <column name="counterparty" type="VARCHAR(255)"/>
            <column name="crop_origin" type="VARCHAR(255)"/>
            <column name="delivery_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="delivery_end_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="delivery_start_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="grade" type="VARCHAR(255)"/>
            <column name="incoterm" type="VARCHAR(255)"/>
            <column name="location" type="VARCHAR(255)"/>
            <column name="obligation_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="plan_id" type="VARCHAR(255)"/>
            <column name="plan_uuid" type="VARCHAR(255)"/>
            <column name="planned_obligation_id" type="VARCHAR(255)"/>
            <column name="planned_quantity" type="FLOAT8"/>
            <column name="price_type" type="VARCHAR(255)"/>
            <column name="profitcenter" type="VARCHAR(255)"/>
            <column name="quantityuom" type="VARCHAR(255)"/>
            <column name="reference_number" type="VARCHAR(255)"/>
            <column name="trade_date_time" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="trade_id" type="VARCHAR(255)"/>
            <column name="trade_obligation_id" type="VARCHAR(255)"/>
            <column name="trade_obligation_uuid" type="VARCHAR(255)"/>
            <column name="trade_price" type="FLOAT8"/>
            <column name="trade_price_currency" type="VARCHAR(255)"/>
            <column name="trade_price_uom" type="VARCHAR(255)"/>
            <column name="trade_quantity" type="FLOAT8"/>
            <column name="trade_transaction_type" type="INTEGER"/>
            <column name="trade_type" type="VARCHAR(255)"/>
            <column name="trade_uuid" type="VARCHAR(255)"/>
            <column name="no_of_units" type="FLOAT8"/>
            <column name="remarks" type="TEXT"/>
            <column name="brand" type="VARCHAR(255)"/>
            <column name="season" type="VARCHAR(255)"/>
            <column name="load_location" type="VARCHAR(255)"/>
            <column name="unload_location" type="VARCHAR(255)"/>
            <column name="payment_term" type="VARCHAR(255)"/>
            <column name="trader" type="VARCHAR(255)"/>
            <column name="fx_rate" type="FLOAT8"/>
            <column name="provisional_fx_rate" type="FLOAT8"/>
            <column name="provisional_price_percentage" type="FLOAT8"/>
            <column name="provisional_price_type" type="VARCHAR(255)"/>
            <column name="provisional_price" type="FLOAT8"/>
            <column name="tradesettlementcurrency" type="VARCHAR(255)"/>
            <column name="trade_settlement_currency" type="VARCHAR(255)"/>
            <column name="premiun_cost" type="FLOAT8"/>
            <column name="discount_cost" type="FLOAT8"/>
            <column name="total_trade_qty" type="FLOAT8"/>
            <column name="broker_reference_number" type="VARCHAR(255)"/>
            <column name="provisional_price_uom" type="VARCHAR(255)"/>
            <column name="provisional_price_currency" type="VARCHAR(255)"/>
            <column name="planned_obligation_status" type="VARCHAR(255)"/>
            <column name="parent_planned_obligation" type="VARCHAR(255)"/>
            <column name="shipment_month" type="VARCHAR(255)"/>
            <column name="external_record" type="BOOLEAN"/>
            <column name="delivery_term_clause" type="TEXT"/>
            <column name="payment_terms_clause" type="TEXT"/>
            <column name="quantity_terms_clause" type="TEXT"/>
            <column name="quality_terms_clause" type="TEXT"/>
            <column name="pricing_terms_clause" type="TEXT"/>
            <column name="broker_reference" type="TEXT"/>
            <column name="comments" type="TEXT"/>
            <column name="trade_settlement_reference" type="VARCHAR(255)"/>
            <column name="doc_by_pass_id" type="VARCHAR(255)"/>
            <column name="package_type" type="VARCHAR(255)"/>
            <column name="balance_quantity" type="FLOAT8"/>
            <column name="contract_term" type="VARCHAR(255)"/>
            <column name="external_package" type="VARCHAR(255)"/>
            <column name="external_package_unit" type="FLOAT8"/>
            <column name="internal_package_unit" type="FLOAT8"/>
            <column name="internal_package" type="VARCHAR(255)"/>
            <column name="provisional_pricing" type="BOOLEAN"/>
            <column name="weight_basis" type="VARCHAR(255)"/>
            <column name="tolerance_value" type="VARCHAR(255)"/>
            <column name="external_reference" type="VARCHAR(255)"/>
            <column name="price_ticker" type="VARCHAR(255)"/>
            <column name="special_instructions" type="TEXT"/>
            <column name="match_type" type="VARCHAR(255)"/>
            <column name="settlement_tolerance_value" type="VARCHAR(255)"/>
            <column name="obligation_state" type="JSONB"/>
            <column name="quotation_period_clause" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-419">
        <createTable tableName="xceler_tradeplanningservice_plannedtradeobligationstate">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_tradeplanningservice_plannedtradeobligationstate_pkey"/>
            </column>
            <column name="status" type="BOOLEAN"/>
            <column name="obligation_state" type="VARCHAR(255)">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_tradeplanningservice_plannedtradeobligationstate_pkey"/>
            </column>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-420">
        <createTable tableName="xceler_transportallocationservice_airfreight">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_transportallocationservice_airfreight_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="notes" type="VARCHAR(255)"/>
            <column name="planned_obligation_id" type="VARCHAR(255)"/>
            <column name="trade_id" type="VARCHAR(255)"/>
            <column name="trade_type" type="INTEGER"/>
            <column name="air_freight_allocation_id" type="VARCHAR(255)"/>
            <column name="planned_obligation_ids" type="BYTEA"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-421">
        <createTable tableName="xceler_transportallocationservice_allocationdocuments">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_transportallocationservice_allocationdocuments_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="attachment" type="BYTEA"/>
            <column name="attachment_file_name" type="VARCHAR(255)"/>
            <column name="attachment_file_type" type="VARCHAR(255)"/>
            <column name="document_name" type="VARCHAR(255)"/>
            <column name="file_size" type="VARCHAR(255)"/>
            <column name="planning_id" type="VARCHAR(255)"/>
            <column name="upload_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="uploaded_by" type="VARCHAR(255)"/>
            <column name="attachment_url" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-422">
        <createTable tableName="xceler_transportallocationservice_bookingattachmenmts">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_transportallocationservice_bookingattachmenmts_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="document_size" type="VARCHAR(255)"/>
            <column name="document" type="BYTEA"/>
            <column name="attachment_name" type="VARCHAR(255)"/>
            <column name="attachment_url" type="VARCHAR(255)"/>
            <column name="attachment_file_type" type="VARCHAR(255)"/>
            <column name="vessel_id" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-423">
        <createTable tableName="xceler_transportallocationservice_roadfreight">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_transportallocationservice_roadfreight_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="notes" type="VARCHAR(255)"/>
            <column name="planned_obligation_id" type="VARCHAR(255)"/>
            <column name="trade_id" type="VARCHAR(255)"/>
            <column name="trade_type" type="INTEGER"/>
            <column name="road_freight_allocation_id" type="VARCHAR(255)"/>
            <column name="planned_obligation_ids" type="BYTEA"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-424">
        <createTable tableName="xceler_transportallocationservice_seafreight">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_transportallocationservice_seafreight_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="notes" type="VARCHAR(255)"/>
            <column name="planned_obligation_id" type="VARCHAR(255)"/>
            <column name="trade_id" type="VARCHAR(255)"/>
            <column name="trade_type" type="INTEGER"/>
            <column name="age" type="INTEGER"/>
            <column name="bl_date" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="bl_number" type="VARCHAR(255)"/>
            <column name="city" type="VARCHAR(255)"/>
            <column name="discharge_port" type="VARCHAR(255)"/>
            <column name="discharge_rate" type="FLOAT8"/>
            <column name="imo" type="INTEGER"/>
            <column name="load_port" type="VARCHAR(255)"/>
            <column name="load_rate" type="FLOAT8"/>
            <column name="shipping_freight_allocation_id" type="VARCHAR(255)"/>
            <column name="vessel_flag" type="VARCHAR(255)"/>
            <column name="vessel_name" type="VARCHAR(255)"/>
            <column name="laycan_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="laycan_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="eta_from" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="eta_to" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="planned_obligation_ids" type="BYTEA"/>
            <column name="vessel_id" type="VARCHAR(255)"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-425">
        <createTable tableName="xceler_transportallocationservice_trainfreight">
            <column name="uuid" type="UUID">
                <constraints nullable="false" primaryKey="true" primaryKeyName="xceler_transportallocationservice_trainfreight_pkey"/>
            </column>
            <column name="created_by" type="VARCHAR(255)"/>
            <column name="created_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="tenant_id" type="VARCHAR(255)"/>
            <column name="updated_by" type="VARCHAR(255)"/>
            <column name="updated_timestamp" type="TIMESTAMP WITHOUT TIME ZONE"/>
            <column name="notes" type="VARCHAR(255)"/>
            <column name="planned_obligation_id" type="VARCHAR(255)"/>
            <column name="trade_id" type="VARCHAR(255)"/>
            <column name="trade_type" type="INTEGER"/>
            <column name="train_freight_allocation_id" type="VARCHAR(255)"/>
            <column name="planned_obligation_ids" type="BYTEA"/>
        </createTable>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-426">
        <addForeignKeyConstraint baseColumnNames="uuid" baseTableName="xceler_apiconfigservice_header" constraintName="fk3buyjjc7qapiycv99ts5d69cf" deferrable="false" initiallyDeferred="false" onDelete="RESTRICT" onUpdate="RESTRICT" referencedColumnNames="uuid" referencedTableName="xceler_apiconfigservice_eaiconfiguration" referencedTableSchemaName="taomish" validate="true"/>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-427">
        <addForeignKeyConstraint baseColumnNames="bank_limit_uuid" baseTableName="xceler_business_master_bank_limit_product_info" constraintName="fk_bank_limit_uuid" deferrable="false" initiallyDeferred="false" onDelete="NO ACTION" onUpdate="NO ACTION" referencedColumnNames="uuid" referencedTableName="xceler_business_master_bank_limit" referencedTableSchemaName="taomish" validate="true"/>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-428">
        <addForeignKeyConstraint baseColumnNames="counterparty_on_boarding_request_uuid" baseTableName="xceler_counterparty_on_boarding_request_bankdetails" constraintName="fk_counterparty_on_boarding_request_uuid" deferrable="false" initiallyDeferred="false" onDelete="NO ACTION" onUpdate="NO ACTION" referencedColumnNames="uuid" referencedTableName="xceler_counterparty_on_boarding_request" referencedTableSchemaName="taomish" validate="true"/>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-429">
        <addForeignKeyConstraint baseColumnNames="counterparty_on_boarding_request_uuid" baseTableName="xceler_counterparty_on_boarding_request_limitrequest" constraintName="fk_counterparty_on_boarding_request_uuid" deferrable="false" initiallyDeferred="false" onDelete="NO ACTION" onUpdate="NO ACTION" referencedColumnNames="uuid" referencedTableName="xceler_counterparty_on_boarding_request" referencedTableSchemaName="taomish" validate="true"/>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-430">
        <addForeignKeyConstraint baseColumnNames="credit_transaction_uuid" baseTableName="treasury_credit_transaction_repayment_list" constraintName="fk_credit_transaction_uuid" deferrable="false" initiallyDeferred="false" onDelete="NO ACTION" onUpdate="NO ACTION" referencedColumnNames="uuid" referencedTableName="treasury_credit_transaction" referencedTableSchemaName="taomish" validate="true"/>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-431">
        <addForeignKeyConstraint baseColumnNames="product_info_uuid" baseTableName="xceler_business_master_product_info_participant_info" constraintName="fk_product_info_uuid" deferrable="false" initiallyDeferred="false" onDelete="NO ACTION" onUpdate="NO ACTION" referencedColumnNames="uuid" referencedTableName="xceler_business_master_bank_limit_product_info" referencedTableSchemaName="taomish" validate="true"/>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-432">
        <addForeignKeyConstraint baseColumnNames="statement_id" baseTableName="treasury_statement_transaction" constraintName="fk_statement_transaction" deferrable="false" initiallyDeferred="false" onDelete="NO ACTION" onUpdate="NO ACTION" referencedColumnNames="s_id" referencedTableName="treasury_account_statement" referencedTableSchemaName="taomish" validate="true"/>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-433">
        <addForeignKeyConstraint baseColumnNames="uuid" baseTableName="xceler_authservice_mode" constraintName="fkkw062gsiw90wu6dngh9bmff0u" deferrable="false" initiallyDeferred="false" onDelete="NO ACTION" onUpdate="NO ACTION" referencedColumnNames="uuid" referencedTableName="xceler_authservice_onetimepassword" referencedTableSchemaName="taomish" validate="true"/>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-434">
        <addForeignKeyConstraint baseColumnNames="uuid" baseTableName="xceler_actualizationservice_actualizedeventdetails" constraintName="fkmqmy9rqju1fqm8w1qtof64mce" deferrable="false" initiallyDeferred="false" onDelete="RESTRICT" onUpdate="RESTRICT" referencedColumnNames="uuid" referencedTableName="xceler_actualizationservice_actualizedquantity" referencedTableSchemaName="taomish" validate="true"/>
    </changeSet>
    <changeSet author="ec2-user (generated)" id="1729502208304-435">
        <addForeignKeyConstraint baseColumnNames="commodity_history_uuid" baseTableName="xceler_stockservice_commoditystockbuildhistory" constraintName="fkso27q9i849sf2jxfy163snjga" deferrable="false" initiallyDeferred="false" onDelete="RESTRICT" onUpdate="RESTRICT" referencedColumnNames="uuid" referencedTableName="xceler_stockservice_stockbuildhistorydata" referencedTableSchemaName="taomish" validate="true"/>
    </changeSet>
</databaseChangeLog>
